enum Period {
  Evidence
  Commit
  Vote
  Appeal
  Execution
}

type Court @entity {
  id: ID!
  hiddenVotes: Boolean!
  children: [Court!]!
  childrenIDs: [String!]!
  minStake: BigInt!
  alpha: BigInt!
  feeForJuror: BigInt!
  jurorsForCourtJump: BigInt!
  timesPerPeriod: [BigInt!]!
  supportedDisputeKits: BigInt!
  disputes: [Dispute!]! @derivedFrom(field: "subcourtID")
  stakedJurors: [JurorTokensPerSubcourt!]! @derivedFrom(field: "subcourt")
  tokens: [JurorTokensPerSubcourt!]! @derivedFrom(field: "subcourt")
}

type Juror @entity {
  id: ID! # Set to address
  tokens: [JurorTokensPerSubcourt!]! @derivedFrom(field: "juror")
  shifts: [TokenAndETHShift!]! @derivedFrom(field: "juror")
  draws: [Draw!]! @derivedFrom(field: "juror")
}

type TokenAndETHShift @entity {
  id: ID! # Set to `${juror.id}-${dispute.id}`
  juror: Juror!
  dispute: Dispute!
  tokenAmount: BigInt!
  ethAmount: BigInt!
}

type JurorTokensPerSubcourt @entity {
  id: ID! # Set to `${juror.id}-${court.id}`
  juror: Juror!
  subcourt: Court!
  staked: BigInt!
  locked: BigInt!
}

type Round @entity {
  id: ID! # Set to `${dispute.id}-${currentRound}`
  dispute: Dispute!
  tokensAtStakePerJuror: BigInt!
  totalFeesForJurors: BigInt!
  repartitions: BigInt!
  penalties: BigInt!
  draws: [Draw!]! @derivedFrom(field: "round")
}

type Draw @entity {
  id: ID! # Set to `${dispute.id}-${currentRound}-${voteID}`
  round: Round!
  juror: Juror!
  voteID: BigInt!
}

type Dispute @entity {
  id: ID!
  subcourtID: Court!
  arbitrated: Bytes!
  disputeKit: Bytes!
  period: Period!
  ruled: Boolean!
  lastPeriodChange: BigInt!
  nbVotes: BigInt!
  currentRound: Int!
  rounds: [Round!]! @derivedFrom(field: "dispute")
  shifts: [TokenAndETHShift!]! @derivedFrom(field: "dispute")
}
