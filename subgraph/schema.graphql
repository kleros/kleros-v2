enum Period {
  Evidence
  Commit
  Vote
  Appeal
  Execution
}

type Court @entity {
  id: ID!
  policy: String
  hiddenVotes: Boolean!
  parent: Court
  children: [Court!]! @derivedFrom(field: "parent")
  minStake: BigInt!
  alpha: BigInt!
  feeForJuror: BigInt!
  jurorsForCourtJump: BigInt!
  timesPerPeriod: [BigInt!]!
  supportedDisputeKits: [DisputeKit!]!
  disputes: [Dispute!]! @derivedFrom(field: "subcourtID")
  stakedJurors: [JurorTokensPerSubcourt!]! @derivedFrom(field: "subcourt")
  tokens: [JurorTokensPerSubcourt!]! @derivedFrom(field: "subcourt")
}

type Juror @entity {
  id: ID! # Set to address
  tokens: [JurorTokensPerSubcourt!]! @derivedFrom(field: "juror")
  shifts: [TokenAndETHShift!]! @derivedFrom(field: "juror")
  draws: [Draw!]! @derivedFrom(field: "juror")
}

type TokenAndETHShift @entity {
  id: ID! # Set to `${juror.id}-${dispute.id}`
  juror: Juror!
  dispute: Dispute!
  tokenAmount: BigInt!
  ethAmount: BigInt!
}

type JurorTokensPerSubcourt @entity {
  id: ID! # Set to `${juror.id}-${court.id}`
  juror: Juror!
  subcourt: Court!
  staked: BigInt!
  locked: BigInt!
}

type EvidenceGroup @entity {
  id: ID!
  evidences: [Evidence!]! @derivedFrom(field: "evidenceGroup")
  lastEvidenceID: BigInt!
}

type Evidence @entity {
  id: ID! # Set to `${evidenceGroupID}-${id}`
  evidence: String!
  evidenceGroup: EvidenceGroup!
  sender: Bytes!
}

type Round @entity {
  id: ID! # Set to `${dispute.id}-${currentRound}`
  dispute: Dispute!
  disputeKitID: DisputeKit!
  tokensAtStakePerJuror: BigInt!
  totalFeesForJurors: BigInt!
  nbVotes: BigInt!
  repartitions: BigInt!
  penalties: BigInt!
  drawnJurors: [Draw!]! @derivedFrom(field: "round")
}

type Draw @entity {
  id: ID! # Set to `${dispute.id}-${currentRound}-${voteID}`
  dispute: Dispute!
  round: Round!
  juror: Juror!
  voteID: BigInt!
}

type Dispute @entity {
  id: ID!
  subcourtID: Court!
  arbitrated: Bytes!
  period: Period!
  ruled: Boolean!
  lastPeriodChange: BigInt!
  rounds: [Round!]! @derivedFrom(field: "dispute")
  draws: [Draw!]! @derivedFrom(field: "dispute")
  currentRound: Int!
  shifts: [TokenAndETHShift!]! @derivedFrom(field: "dispute")
  gatewayDispute: GatewayDispute! @derivedFrom(field: "homeDispute")
}

type DisputeKit @entity {
  id: ID!
  address: Bytes
  parent: DisputeKit
  children: [DisputeKit!]! @derivedFrom(field: "parent")
  needsFreezing: Boolean!
  depthLevel: BigInt!
  rounds: [Round!]! @derivedFrom(field: "disputeKitID")
  courts: [Court!]! @derivedFrom(field: "supportedDisputeKits")
}

type GatewayDispute @entity {
  id: ID!
  homeDispute: Dispute!
  arbitrator: Bytes!
  disputeHash: Bytes!
  arbitrationCost: BigInt!
  relayer: Bytes!
}

type OutgoingBatch @entity {
  id: ID! # Set to messageHash
  size: BigInt!
  epoch: BigInt!
  batchMerkleRoot: String!
}

type PNKStakedDataPoint @entity {
  id: ID! # Will be the timestamp except for the counter which will be 0
  value: BigInt!
}

type ETHPaidDataPoint @entity {
  id: ID! # Will be the timestamp except for the counter which will be 0
  value: BigInt!
}

type PNKRedistributedDataPoint @entity {
  id: ID! # Will be the timestamp except for the counter which will be 0
  value: BigInt!
}

type ActiveJurorsDataPoint @entity {
  id: ID! # Will be the timestamp except for the counter which will be 0
  value: BigInt!
}

type CasesDataPoint @entity {
  id: ID! # Will be the timestamp except for the counter which will be 0
  value: BigInt!
}
