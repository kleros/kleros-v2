// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AppealDecision extends ethereum.Event {
  get params(): AppealDecision__Params {
    return new AppealDecision__Params(this);
  }
}

export class AppealDecision__Params {
  _event: AppealDecision;

  constructor(event: AppealDecision) {
    this._event = event;
  }

  get _disputeID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _arbitrable(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class AppealPossible extends ethereum.Event {
  get params(): AppealPossible__Params {
    return new AppealPossible__Params(this);
  }
}

export class AppealPossible__Params {
  _event: AppealPossible;

  constructor(event: AppealPossible) {
    this._event = event;
  }

  get _disputeID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _arbitrable(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class DisputeCreation extends ethereum.Event {
  get params(): DisputeCreation__Params {
    return new DisputeCreation__Params(this);
  }
}

export class DisputeCreation__Params {
  _event: DisputeCreation;

  constructor(event: DisputeCreation) {
    this._event = event;
  }

  get _disputeID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _arbitrable(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Draw extends ethereum.Event {
  get params(): Draw__Params {
    return new Draw__Params(this);
  }
}

export class Draw__Params {
  _event: Draw;

  constructor(event: Draw) {
    this._event = event;
  }

  get _address(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _disputeID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _appeal(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _voteID(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class NewPeriod extends ethereum.Event {
  get params(): NewPeriod__Params {
    return new NewPeriod__Params(this);
  }
}

export class NewPeriod__Params {
  _event: NewPeriod;

  constructor(event: NewPeriod) {
    this._event = event;
  }

  get _disputeID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _period(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class StakeSet extends ethereum.Event {
  get params(): StakeSet__Params {
    return new StakeSet__Params(this);
  }
}

export class StakeSet__Params {
  _event: StakeSet;

  constructor(event: StakeSet) {
    this._event = event;
  }

  get _address(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _subcourtID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _newTotalStake(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class TokenAndETHShift extends ethereum.Event {
  get params(): TokenAndETHShift__Params {
    return new TokenAndETHShift__Params(this);
  }
}

export class TokenAndETHShift__Params {
  _event: TokenAndETHShift;

  constructor(event: TokenAndETHShift) {
    this._event = event;
  }

  get _account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _disputeID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _tokenAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _ETHAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Kleroscore__appealPeriodResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Kleroscore__courtsResult {
  value0: BigInt;
  value1: boolean;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: BigInt,
    value1: boolean,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }
}

export class Kleroscore__disputesResult {
  value0: BigInt;
  value1: Address;
  value2: Address;
  value3: i32;
  value4: boolean;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: Address,
    value3: i32,
    value4: boolean,
    value5: BigInt,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }
}

export class Kleroscore__getJurorBalanceResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Kleroscore__getRoundInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: Array<Address>;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: Array<Address>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddressArray(this.value4));
    return map;
  }
}

export class Kleroscore__getSortitionSumTreeResult {
  value0: BigInt;
  value1: Array<BigInt>;
  value2: Array<BigInt>;

  constructor(value0: BigInt, value1: Array<BigInt>, value2: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigIntArray(this.value2));
    return map;
  }
}

export class Kleroscore extends ethereum.SmartContract {
  static bind(address: Address): Kleroscore {
    return new Kleroscore("Kleroscore", address);
  }

  ALPHA_DIVISOR(): BigInt {
    let result = super.call("ALPHA_DIVISOR", "ALPHA_DIVISOR():(uint256)", []);

    return result[0].toBigInt();
  }

  try_ALPHA_DIVISOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ALPHA_DIVISOR",
      "ALPHA_DIVISOR():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_STAKE_PATHS(): BigInt {
    let result = super.call(
      "MAX_STAKE_PATHS",
      "MAX_STAKE_PATHS():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_STAKE_PATHS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_STAKE_PATHS",
      "MAX_STAKE_PATHS():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MIN_JURORS(): BigInt {
    let result = super.call("MIN_JURORS", "MIN_JURORS():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MIN_JURORS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MIN_JURORS", "MIN_JURORS():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  NON_PAYABLE_AMOUNT(): BigInt {
    let result = super.call(
      "NON_PAYABLE_AMOUNT",
      "NON_PAYABLE_AMOUNT():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_NON_PAYABLE_AMOUNT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "NON_PAYABLE_AMOUNT",
      "NON_PAYABLE_AMOUNT():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  appealCost(_disputeID: BigInt): BigInt {
    let result = super.call("appealCost", "appealCost(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_disputeID)
    ]);

    return result[0].toBigInt();
  }

  try_appealCost(_disputeID: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("appealCost", "appealCost(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_disputeID)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  appealPeriod(_disputeID: BigInt): Kleroscore__appealPeriodResult {
    let result = super.call(
      "appealPeriod",
      "appealPeriod(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_disputeID)]
    );

    return new Kleroscore__appealPeriodResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_appealPeriod(
    _disputeID: BigInt
  ): ethereum.CallResult<Kleroscore__appealPeriodResult> {
    let result = super.tryCall(
      "appealPeriod",
      "appealPeriod(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_disputeID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Kleroscore__appealPeriodResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  arbitrationCost(_extraData: Bytes): BigInt {
    let result = super.call(
      "arbitrationCost",
      "arbitrationCost(bytes):(uint256)",
      [ethereum.Value.fromBytes(_extraData)]
    );

    return result[0].toBigInt();
  }

  try_arbitrationCost(_extraData: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "arbitrationCost",
      "arbitrationCost(bytes):(uint256)",
      [ethereum.Value.fromBytes(_extraData)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  areVotesHidden(_subcourtID: BigInt): boolean {
    let result = super.call(
      "areVotesHidden",
      "areVotesHidden(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_subcourtID)]
    );

    return result[0].toBoolean();
  }

  try_areVotesHidden(_subcourtID: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "areVotesHidden",
      "areVotesHidden(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_subcourtID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  courts(param0: BigInt): Kleroscore__courtsResult {
    let result = super.call(
      "courts",
      "courts(uint256):(uint96,bool,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Kleroscore__courtsResult(
      result[0].toBigInt(),
      result[1].toBoolean(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt()
    );
  }

  try_courts(param0: BigInt): ethereum.CallResult<Kleroscore__courtsResult> {
    let result = super.tryCall(
      "courts",
      "courts(uint256):(uint96,bool,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Kleroscore__courtsResult(
        value[0].toBigInt(),
        value[1].toBoolean(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt()
      )
    );
  }

  currentRuling(_disputeID: BigInt): BigInt {
    let result = super.call(
      "currentRuling",
      "currentRuling(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_disputeID)]
    );

    return result[0].toBigInt();
  }

  try_currentRuling(_disputeID: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentRuling",
      "currentRuling(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_disputeID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  disputeKits(param0: BigInt): Address {
    let result = super.call("disputeKits", "disputeKits(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_disputeKits(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "disputeKits",
      "disputeKits(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  disputes(param0: BigInt): Kleroscore__disputesResult {
    let result = super.call(
      "disputes",
      "disputes(uint256):(uint96,address,address,uint8,bool,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Kleroscore__disputesResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toI32(),
      result[4].toBoolean(),
      result[5].toBigInt(),
      result[6].toBigInt()
    );
  }

  try_disputes(
    param0: BigInt
  ): ethereum.CallResult<Kleroscore__disputesResult> {
    let result = super.tryCall(
      "disputes",
      "disputes(uint256):(uint96,address,address,uint8,bool,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Kleroscore__disputesResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toI32(),
        value[4].toBoolean(),
        value[5].toBigInt(),
        value[6].toBigInt()
      )
    );
  }

  getCurrentPeriod(_disputeID: BigInt): i32 {
    let result = super.call(
      "getCurrentPeriod",
      "getCurrentPeriod(uint256):(uint8)",
      [ethereum.Value.fromUnsignedBigInt(_disputeID)]
    );

    return result[0].toI32();
  }

  try_getCurrentPeriod(_disputeID: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getCurrentPeriod",
      "getCurrentPeriod(uint256):(uint8)",
      [ethereum.Value.fromUnsignedBigInt(_disputeID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getJurorBalance(
    _juror: Address,
    _subcourtID: BigInt
  ): Kleroscore__getJurorBalanceResult {
    let result = super.call(
      "getJurorBalance",
      "getJurorBalance(address,uint96):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(_juror),
        ethereum.Value.fromUnsignedBigInt(_subcourtID)
      ]
    );

    return new Kleroscore__getJurorBalanceResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getJurorBalance(
    _juror: Address,
    _subcourtID: BigInt
  ): ethereum.CallResult<Kleroscore__getJurorBalanceResult> {
    let result = super.tryCall(
      "getJurorBalance",
      "getJurorBalance(address,uint96):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(_juror),
        ethereum.Value.fromUnsignedBigInt(_subcourtID)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Kleroscore__getJurorBalanceResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getNumberOfRounds(_disputeID: BigInt): BigInt {
    let result = super.call(
      "getNumberOfRounds",
      "getNumberOfRounds(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_disputeID)]
    );

    return result[0].toBigInt();
  }

  try_getNumberOfRounds(_disputeID: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNumberOfRounds",
      "getNumberOfRounds(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_disputeID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRoundInfo(
    _disputeID: BigInt,
    _round: BigInt
  ): Kleroscore__getRoundInfoResult {
    let result = super.call(
      "getRoundInfo",
      "getRoundInfo(uint256,uint256):(uint256,uint256,uint256,uint256,address[])",
      [
        ethereum.Value.fromUnsignedBigInt(_disputeID),
        ethereum.Value.fromUnsignedBigInt(_round)
      ]
    );

    return new Kleroscore__getRoundInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toAddressArray()
    );
  }

  try_getRoundInfo(
    _disputeID: BigInt,
    _round: BigInt
  ): ethereum.CallResult<Kleroscore__getRoundInfoResult> {
    let result = super.tryCall(
      "getRoundInfo",
      "getRoundInfo(uint256,uint256):(uint256,uint256,uint256,uint256,address[])",
      [
        ethereum.Value.fromUnsignedBigInt(_disputeID),
        ethereum.Value.fromUnsignedBigInt(_round)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Kleroscore__getRoundInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toAddressArray()
      )
    );
  }

  getSortitionSumTree(_key: Bytes): Kleroscore__getSortitionSumTreeResult {
    let result = super.call(
      "getSortitionSumTree",
      "getSortitionSumTree(bytes32):(uint256,uint256[],uint256[])",
      [ethereum.Value.fromFixedBytes(_key)]
    );

    return new Kleroscore__getSortitionSumTreeResult(
      result[0].toBigInt(),
      result[1].toBigIntArray(),
      result[2].toBigIntArray()
    );
  }

  try_getSortitionSumTree(
    _key: Bytes
  ): ethereum.CallResult<Kleroscore__getSortitionSumTreeResult> {
    let result = super.tryCall(
      "getSortitionSumTree",
      "getSortitionSumTree(bytes32):(uint256,uint256[],uint256[])",
      [ethereum.Value.fromFixedBytes(_key)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Kleroscore__getSortitionSumTreeResult(
        value[0].toBigInt(),
        value[1].toBigIntArray(),
        value[2].toBigIntArray()
      )
    );
  }

  getSortitionSumTreeID(_key: Bytes, _nodeIndex: BigInt): Bytes {
    let result = super.call(
      "getSortitionSumTreeID",
      "getSortitionSumTreeID(bytes32,uint256):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(_key),
        ethereum.Value.fromUnsignedBigInt(_nodeIndex)
      ]
    );

    return result[0].toBytes();
  }

  try_getSortitionSumTreeID(
    _key: Bytes,
    _nodeIndex: BigInt
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getSortitionSumTreeID",
      "getSortitionSumTreeID(bytes32,uint256):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(_key),
        ethereum.Value.fromUnsignedBigInt(_nodeIndex)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getSubcourtID(_disputeID: BigInt): BigInt {
    let result = super.call(
      "getSubcourtID",
      "getSubcourtID(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_disputeID)]
    );

    return result[0].toBigInt();
  }

  try_getSubcourtID(_disputeID: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSubcourtID",
      "getSubcourtID(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_disputeID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTimesPerPeriod(_subcourtID: BigInt): Array<BigInt> {
    let result = super.call(
      "getTimesPerPeriod",
      "getTimesPerPeriod(uint96):(uint256[4])",
      [ethereum.Value.fromUnsignedBigInt(_subcourtID)]
    );

    return result[0].toBigIntArray();
  }

  try_getTimesPerPeriod(
    _subcourtID: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getTimesPerPeriod",
      "getTimesPerPeriod(uint96):(uint256[4])",
      [ethereum.Value.fromUnsignedBigInt(_subcourtID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  governor(): Address {
    let result = super.call("governor", "governor():(address)", []);

    return result[0].toAddress();
  }

  try_governor(): ethereum.CallResult<Address> {
    let result = super.tryCall("governor", "governor():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isRuled(_disputeID: BigInt): boolean {
    let result = super.call("isRuled", "isRuled(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_disputeID)
    ]);

    return result[0].toBoolean();
  }

  try_isRuled(_disputeID: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isRuled", "isRuled(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_disputeID)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  jurorProsecutionModule(): Address {
    let result = super.call(
      "jurorProsecutionModule",
      "jurorProsecutionModule():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_jurorProsecutionModule(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "jurorProsecutionModule",
      "jurorProsecutionModule():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pinakion(): Address {
    let result = super.call("pinakion", "pinakion():(address)", []);

    return result[0].toAddress();
  }

  try_pinakion(): ethereum.CallResult<Address> {
    let result = super.tryCall("pinakion", "pinakion():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _governor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _pinakion(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _jurorProsecutionModule(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _disputeKit(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _hiddenVotes(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }

  get _minStake(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _alpha(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _feeForJuror(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _jurorsForCourtJump(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }

  get _timesPerPeriod(): Array<BigInt> {
    return this._call.inputValues[9].value.toBigIntArray();
  }

  get _sortitionSumTreeK(): BigInt {
    return this._call.inputValues[10].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddNewDisputeKitCall extends ethereum.Call {
  get inputs(): AddNewDisputeKitCall__Inputs {
    return new AddNewDisputeKitCall__Inputs(this);
  }

  get outputs(): AddNewDisputeKitCall__Outputs {
    return new AddNewDisputeKitCall__Outputs(this);
  }
}

export class AddNewDisputeKitCall__Inputs {
  _call: AddNewDisputeKitCall;

  constructor(call: AddNewDisputeKitCall) {
    this._call = call;
  }

  get _disputeKitAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _disputeKitID(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class AddNewDisputeKitCall__Outputs {
  _call: AddNewDisputeKitCall;

  constructor(call: AddNewDisputeKitCall) {
    this._call = call;
  }
}

export class AppealCall extends ethereum.Call {
  get inputs(): AppealCall__Inputs {
    return new AppealCall__Inputs(this);
  }

  get outputs(): AppealCall__Outputs {
    return new AppealCall__Outputs(this);
  }
}

export class AppealCall__Inputs {
  _call: AppealCall;

  constructor(call: AppealCall) {
    this._call = call;
  }

  get _disputeID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AppealCall__Outputs {
  _call: AppealCall;

  constructor(call: AppealCall) {
    this._call = call;
  }
}

export class ChangeGovernorCall extends ethereum.Call {
  get inputs(): ChangeGovernorCall__Inputs {
    return new ChangeGovernorCall__Inputs(this);
  }

  get outputs(): ChangeGovernorCall__Outputs {
    return new ChangeGovernorCall__Outputs(this);
  }
}

export class ChangeGovernorCall__Inputs {
  _call: ChangeGovernorCall;

  constructor(call: ChangeGovernorCall) {
    this._call = call;
  }

  get _governor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeGovernorCall__Outputs {
  _call: ChangeGovernorCall;

  constructor(call: ChangeGovernorCall) {
    this._call = call;
  }
}

export class ChangeJurorProsecutionModuleCall extends ethereum.Call {
  get inputs(): ChangeJurorProsecutionModuleCall__Inputs {
    return new ChangeJurorProsecutionModuleCall__Inputs(this);
  }

  get outputs(): ChangeJurorProsecutionModuleCall__Outputs {
    return new ChangeJurorProsecutionModuleCall__Outputs(this);
  }
}

export class ChangeJurorProsecutionModuleCall__Inputs {
  _call: ChangeJurorProsecutionModuleCall;

  constructor(call: ChangeJurorProsecutionModuleCall) {
    this._call = call;
  }

  get _jurorProsecutionModule(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeJurorProsecutionModuleCall__Outputs {
  _call: ChangeJurorProsecutionModuleCall;

  constructor(call: ChangeJurorProsecutionModuleCall) {
    this._call = call;
  }
}

export class ChangePinakionCall extends ethereum.Call {
  get inputs(): ChangePinakionCall__Inputs {
    return new ChangePinakionCall__Inputs(this);
  }

  get outputs(): ChangePinakionCall__Outputs {
    return new ChangePinakionCall__Outputs(this);
  }
}

export class ChangePinakionCall__Inputs {
  _call: ChangePinakionCall;

  constructor(call: ChangePinakionCall) {
    this._call = call;
  }

  get _pinakion(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangePinakionCall__Outputs {
  _call: ChangePinakionCall;

  constructor(call: ChangePinakionCall) {
    this._call = call;
  }
}

export class ChangeSubcourtAlphaCall extends ethereum.Call {
  get inputs(): ChangeSubcourtAlphaCall__Inputs {
    return new ChangeSubcourtAlphaCall__Inputs(this);
  }

  get outputs(): ChangeSubcourtAlphaCall__Outputs {
    return new ChangeSubcourtAlphaCall__Outputs(this);
  }
}

export class ChangeSubcourtAlphaCall__Inputs {
  _call: ChangeSubcourtAlphaCall;

  constructor(call: ChangeSubcourtAlphaCall) {
    this._call = call;
  }

  get _subcourtID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _alpha(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ChangeSubcourtAlphaCall__Outputs {
  _call: ChangeSubcourtAlphaCall;

  constructor(call: ChangeSubcourtAlphaCall) {
    this._call = call;
  }
}

export class ChangeSubcourtJurorFeeCall extends ethereum.Call {
  get inputs(): ChangeSubcourtJurorFeeCall__Inputs {
    return new ChangeSubcourtJurorFeeCall__Inputs(this);
  }

  get outputs(): ChangeSubcourtJurorFeeCall__Outputs {
    return new ChangeSubcourtJurorFeeCall__Outputs(this);
  }
}

export class ChangeSubcourtJurorFeeCall__Inputs {
  _call: ChangeSubcourtJurorFeeCall;

  constructor(call: ChangeSubcourtJurorFeeCall) {
    this._call = call;
  }

  get _subcourtID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _feeForJuror(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ChangeSubcourtJurorFeeCall__Outputs {
  _call: ChangeSubcourtJurorFeeCall;

  constructor(call: ChangeSubcourtJurorFeeCall) {
    this._call = call;
  }
}

export class ChangeSubcourtJurorsForJumpCall extends ethereum.Call {
  get inputs(): ChangeSubcourtJurorsForJumpCall__Inputs {
    return new ChangeSubcourtJurorsForJumpCall__Inputs(this);
  }

  get outputs(): ChangeSubcourtJurorsForJumpCall__Outputs {
    return new ChangeSubcourtJurorsForJumpCall__Outputs(this);
  }
}

export class ChangeSubcourtJurorsForJumpCall__Inputs {
  _call: ChangeSubcourtJurorsForJumpCall;

  constructor(call: ChangeSubcourtJurorsForJumpCall) {
    this._call = call;
  }

  get _subcourtID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _jurorsForCourtJump(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ChangeSubcourtJurorsForJumpCall__Outputs {
  _call: ChangeSubcourtJurorsForJumpCall;

  constructor(call: ChangeSubcourtJurorsForJumpCall) {
    this._call = call;
  }
}

export class ChangeSubcourtMinStakeCall extends ethereum.Call {
  get inputs(): ChangeSubcourtMinStakeCall__Inputs {
    return new ChangeSubcourtMinStakeCall__Inputs(this);
  }

  get outputs(): ChangeSubcourtMinStakeCall__Outputs {
    return new ChangeSubcourtMinStakeCall__Outputs(this);
  }
}

export class ChangeSubcourtMinStakeCall__Inputs {
  _call: ChangeSubcourtMinStakeCall;

  constructor(call: ChangeSubcourtMinStakeCall) {
    this._call = call;
  }

  get _subcourtID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _minStake(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ChangeSubcourtMinStakeCall__Outputs {
  _call: ChangeSubcourtMinStakeCall;

  constructor(call: ChangeSubcourtMinStakeCall) {
    this._call = call;
  }
}

export class ChangeSubcourtTimesPerPeriodCall extends ethereum.Call {
  get inputs(): ChangeSubcourtTimesPerPeriodCall__Inputs {
    return new ChangeSubcourtTimesPerPeriodCall__Inputs(this);
  }

  get outputs(): ChangeSubcourtTimesPerPeriodCall__Outputs {
    return new ChangeSubcourtTimesPerPeriodCall__Outputs(this);
  }
}

export class ChangeSubcourtTimesPerPeriodCall__Inputs {
  _call: ChangeSubcourtTimesPerPeriodCall;

  constructor(call: ChangeSubcourtTimesPerPeriodCall) {
    this._call = call;
  }

  get _subcourtID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _timesPerPeriod(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class ChangeSubcourtTimesPerPeriodCall__Outputs {
  _call: ChangeSubcourtTimesPerPeriodCall;

  constructor(call: ChangeSubcourtTimesPerPeriodCall) {
    this._call = call;
  }
}

export class CreateDisputeCall extends ethereum.Call {
  get inputs(): CreateDisputeCall__Inputs {
    return new CreateDisputeCall__Inputs(this);
  }

  get outputs(): CreateDisputeCall__Outputs {
    return new CreateDisputeCall__Outputs(this);
  }
}

export class CreateDisputeCall__Inputs {
  _call: CreateDisputeCall;

  constructor(call: CreateDisputeCall) {
    this._call = call;
  }

  get _numberOfChoices(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _extraData(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class CreateDisputeCall__Outputs {
  _call: CreateDisputeCall;

  constructor(call: CreateDisputeCall) {
    this._call = call;
  }

  get disputeID(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateSubcourtCall extends ethereum.Call {
  get inputs(): CreateSubcourtCall__Inputs {
    return new CreateSubcourtCall__Inputs(this);
  }

  get outputs(): CreateSubcourtCall__Outputs {
    return new CreateSubcourtCall__Outputs(this);
  }
}

export class CreateSubcourtCall__Inputs {
  _call: CreateSubcourtCall;

  constructor(call: CreateSubcourtCall) {
    this._call = call;
  }

  get _parent(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _hiddenVotes(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get _minStake(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _alpha(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _feeForJuror(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _jurorsForCourtJump(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _timesPerPeriod(): Array<BigInt> {
    return this._call.inputValues[6].value.toBigIntArray();
  }

  get _sortitionSumTreeK(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _supportedDisputeKits(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }
}

export class CreateSubcourtCall__Outputs {
  _call: CreateSubcourtCall;

  constructor(call: CreateSubcourtCall) {
    this._call = call;
  }
}

export class DrawCall extends ethereum.Call {
  get inputs(): DrawCall__Inputs {
    return new DrawCall__Inputs(this);
  }

  get outputs(): DrawCall__Outputs {
    return new DrawCall__Outputs(this);
  }
}

export class DrawCall__Inputs {
  _call: DrawCall;

  constructor(call: DrawCall) {
    this._call = call;
  }

  get _disputeID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _iterations(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DrawCall__Outputs {
  _call: DrawCall;

  constructor(call: DrawCall) {
    this._call = call;
  }
}

export class ExecuteCall extends ethereum.Call {
  get inputs(): ExecuteCall__Inputs {
    return new ExecuteCall__Inputs(this);
  }

  get outputs(): ExecuteCall__Outputs {
    return new ExecuteCall__Outputs(this);
  }
}

export class ExecuteCall__Inputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }

  get _disputeID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _appeal(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _iterations(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ExecuteCall__Outputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }
}

export class ExecuteGovernorProposalCall extends ethereum.Call {
  get inputs(): ExecuteGovernorProposalCall__Inputs {
    return new ExecuteGovernorProposalCall__Inputs(this);
  }

  get outputs(): ExecuteGovernorProposalCall__Outputs {
    return new ExecuteGovernorProposalCall__Outputs(this);
  }
}

export class ExecuteGovernorProposalCall__Inputs {
  _call: ExecuteGovernorProposalCall;

  constructor(call: ExecuteGovernorProposalCall) {
    this._call = call;
  }

  get _destination(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class ExecuteGovernorProposalCall__Outputs {
  _call: ExecuteGovernorProposalCall;

  constructor(call: ExecuteGovernorProposalCall) {
    this._call = call;
  }
}

export class ExecuteRulingCall extends ethereum.Call {
  get inputs(): ExecuteRulingCall__Inputs {
    return new ExecuteRulingCall__Inputs(this);
  }

  get outputs(): ExecuteRulingCall__Outputs {
    return new ExecuteRulingCall__Outputs(this);
  }
}

export class ExecuteRulingCall__Inputs {
  _call: ExecuteRulingCall;

  constructor(call: ExecuteRulingCall) {
    this._call = call;
  }

  get _disputeID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ExecuteRulingCall__Outputs {
  _call: ExecuteRulingCall;

  constructor(call: ExecuteRulingCall) {
    this._call = call;
  }
}

export class PassPeriodCall extends ethereum.Call {
  get inputs(): PassPeriodCall__Inputs {
    return new PassPeriodCall__Inputs(this);
  }

  get outputs(): PassPeriodCall__Outputs {
    return new PassPeriodCall__Outputs(this);
  }
}

export class PassPeriodCall__Inputs {
  _call: PassPeriodCall;

  constructor(call: PassPeriodCall) {
    this._call = call;
  }

  get _disputeID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class PassPeriodCall__Outputs {
  _call: PassPeriodCall;

  constructor(call: PassPeriodCall) {
    this._call = call;
  }
}

export class SetDisputeKitsCall extends ethereum.Call {
  get inputs(): SetDisputeKitsCall__Inputs {
    return new SetDisputeKitsCall__Inputs(this);
  }

  get outputs(): SetDisputeKitsCall__Outputs {
    return new SetDisputeKitsCall__Outputs(this);
  }
}

export class SetDisputeKitsCall__Inputs {
  _call: SetDisputeKitsCall;

  constructor(call: SetDisputeKitsCall) {
    this._call = call;
  }

  get _subcourtID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _disputeKitIDs(): Array<i32> {
    return this._call.inputValues[1].value.toI32Array();
  }

  get _enable(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class SetDisputeKitsCall__Outputs {
  _call: SetDisputeKitsCall;

  constructor(call: SetDisputeKitsCall) {
    this._call = call;
  }
}

export class SetStakeCall extends ethereum.Call {
  get inputs(): SetStakeCall__Inputs {
    return new SetStakeCall__Inputs(this);
  }

  get outputs(): SetStakeCall__Outputs {
    return new SetStakeCall__Outputs(this);
  }
}

export class SetStakeCall__Inputs {
  _call: SetStakeCall;

  constructor(call: SetStakeCall) {
    this._call = call;
  }

  get _subcourtID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _stake(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetStakeCall__Outputs {
  _call: SetStakeCall;

  constructor(call: SetStakeCall) {
    this._call = call;
  }
}
