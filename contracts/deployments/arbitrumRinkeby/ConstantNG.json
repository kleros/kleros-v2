{
  "address": "0x87142b7E9C7D026776499120D902AF8896C07894",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_block",
          "type": "uint256"
        }
      ],
      "name": "contribute",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_block",
          "type": "uint256"
        }
      ],
      "name": "getRN",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "RN",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_block",
          "type": "uint256"
        }
      ],
      "name": "getUncorrelatedRN",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "RN",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "number",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_block",
          "type": "uint256"
        }
      ],
      "name": "requestRN",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x994e342622469b1e19becdf52b4614d4f57bac87185e7d7496d4815cdadd276c",
  "receipt": {
    "to": null,
    "from": "0xF50E77f2A2B6138D16c6c7511562E5C33c4B15A3",
    "contractAddress": "0x87142b7E9C7D026776499120D902AF8896C07894",
    "transactionIndex": 0,
    "gasUsed": "2027143",
    "logsBloom": "0x
    "blockHash": "0xf208ce071e86e58470ebbbd798aad9d927f53482ae74e57a209e827c46484265",
    "transactionHash": "0x994e342622469b1e19becdf52b4614d4f57bac87185e7d7496d4815cdadd276c",
    "logs": [],
    "blockNumber": 9358156,
    "cumulativeGasUsed": "762143",
    "status": 1,
    "byzantium": true
  },
  "args": [
    42
  ],
  "numDeployments": 1,
  "solcInputHash": "9627b78546d73cee66a2022d221ca6c9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"contribute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"getRN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"RN\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"getUncorrelatedRN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"RN\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"requestRN\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Constructor.\",\"params\":{\"_number\":\"The number to always return.\"}},\"contribute(uint256)\":{\"details\":\"Contribute to the reward of a random number. All the ETH will be lost forever.\",\"params\":{\"_block\":\"Block the random number is linked to.\"}},\"getRN(uint256)\":{\"details\":\"Get the \\\"random number\\\" (which is always the same).\",\"params\":{\"_block\":\"Block the random number is linked to.\"},\"returns\":{\"RN\":\"Random Number. If the number is not ready or has not been required 0 instead.\"}},\"getUncorrelatedRN(uint256)\":{\"details\":\"Get a uncorrelated random number. Act like getRN but give a different number for each sender.      This is to prevent users from getting correlated numbers.\",\"params\":{\"_block\":\"Block the random number is linked to.\"},\"returns\":{\"RN\":\"Random Number. If the number is not ready or has not been required 0 instead.\"}},\"requestRN(uint256)\":{\"details\":\"Request a random number.\",\"params\":{\"_block\":\"Block linked to the request.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/rng/ConstantNG.sol\":\"ConstantNG\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/rng/ConstantNG.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * @title Constant Number Generator\\n * @author Cl\\u00e9ment Lesaege - <clement@lesaege.com>\\n * @dev A Random Number Generator which always return the same number. Usefull in order to make tests.\\n */\\n\\npragma solidity ^0.8;\\nimport \\\"./RNG.sol\\\";\\n\\ncontract ConstantNG is RNG {\\n    uint256 public immutable number;\\n\\n    /**\\n     * @dev Constructor.\\n     * @param _number The number to always return.\\n     */\\n    constructor(uint256 _number) {\\n        number = _number;\\n    }\\n\\n    /**\\n     * @dev Contribute to the reward of a random number. All the ETH will be lost forever.\\n     * @param _block Block the random number is linked to.\\n     */\\n    function contribute(uint256 _block) public payable override {}\\n\\n    /**\\n     * @dev Get the \\\"random number\\\" (which is always the same).\\n     * @param _block Block the random number is linked to.\\n     * @return RN Random Number. If the number is not ready or has not been required 0 instead.\\n     */\\n    function getRN(uint256 _block) public view override returns (uint256 RN) {\\n        return number;\\n    }\\n}\\n\",\"keccak256\":\"0xa36e4dbc69128b01a005e4a9ce79a4c0f555be0963497e7cabdb76028f00e44c\",\"license\":\"MIT\"},\"src/rng/RNG.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * @authors: [@clesaege]\\n * @reviewers: [@remedcu]\\n * @auditors: []\\n * @bounties: []\\n * @deployments: []\\n */\\n\\npragma solidity ^0.8;\\n\\n/**\\n * @title Random Number Generator Standard\\n * @author Cl\\u00e9ment Lesaege - <clement@lesaege.com>\\n * @dev This is an abstract contract\\n */\\nabstract contract RNG {\\n    /**\\n     * @dev Contribute to the reward of a random number.\\n     * @param _block Block the random number is linked to.\\n     */\\n    function contribute(uint256 _block) public payable virtual;\\n\\n    /**\\n     * @dev Request a random number.\\n     * @param _block Block linked to the request.\\n     */\\n    function requestRN(uint256 _block) public payable {\\n        contribute(_block);\\n    }\\n\\n    /**\\n     * @dev Get the random number.\\n     * @param _block Block the random number is linked to.\\n     * @return RN Random Number. If the number is not ready or has not been required 0 instead.\\n     */\\n    function getRN(uint256 _block) public virtual returns (uint256 RN);\\n\\n    /**\\n     * @dev Get a uncorrelated random number. Act like getRN but give a different number for each sender.\\n     *      This is to prevent users from getting correlated numbers.\\n     * @param _block Block the random number is linked to.\\n     * @return RN Random Number. If the number is not ready or has not been required 0 instead.\\n     */\\n    function getUncorrelatedRN(uint256 _block) public returns (uint256 RN) {\\n        uint256 baseRN = getRN(_block);\\n        if (baseRN == 0) return 0;\\n        else return uint256(keccak256(abi.encode(msg.sender, baseRN)));\\n    }\\n}\\n\",\"keccak256\":\"0x854bcb147fe44383cba7a5fdbcb69b3c0a9a71435c80eb73c172222da472a855\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161024438038061024483398101604081905261002f91610037565b608052610050565b60006020828403121561004957600080fd5b5051919050565b6080516101cd6100776000396000818160a80152818160f9015261011f01526101cd6000f3fe60806040526004361061004a5760003560e01c80631c73601e1461004f5780637b9c34e0146100815780638381f58a14610096578063c1cbbca7146100ca578063ca4742f1146100db575b600080fd5b34801561005b57600080fd5b5061006f61006a36600461017e565b61011b565b60405190815260200160405180910390f35b61009461008f36600461017e565b6100d8565b005b3480156100a257600080fd5b5061006f7f000000000000000000000000000000000000000000000000000000000000000081565b6100946100d836600461017e565b50565b3480156100e757600080fd5b5061006f6100f636600461017e565b507f000000000000000000000000000000000000000000000000000000000000000090565b60007f00000000000000000000000000000000000000000000000000000000000000008061014c5750600092915050565b6040805133602082015290810182905260600160408051601f1981840301815291905280516020909101209392505050565b60006020828403121561019057600080fd5b503591905056fea2646970667358221220693d5cc66e09ccd6a6d6637ad435b22e4b44841e2e761be701bf91040945c1fc64736f6c634300080a0033",
  "deployedBytecode": "0x60806040526004361061004a5760003560e01c80631c73601e1461004f5780637b9c34e0146100815780638381f58a14610096578063c1cbbca7146100ca578063ca4742f1146100db575b600080fd5b34801561005b57600080fd5b5061006f61006a36600461017e565b61011b565b60405190815260200160405180910390f35b61009461008f36600461017e565b6100d8565b005b3480156100a257600080fd5b5061006f7f000000000000000000000000000000000000000000000000000000000000000081565b6100946100d836600461017e565b50565b3480156100e757600080fd5b5061006f6100f636600461017e565b507f000000000000000000000000000000000000000000000000000000000000000090565b60007f00000000000000000000000000000000000000000000000000000000000000008061014c5750600092915050565b6040805133602082015290810182905260600160408051601f1981840301815291905280516020909101209392505050565b60006020828403121561019057600080fd5b503591905056fea2646970667358221220693d5cc66e09ccd6a6d6637ad435b22e4b44841e2e761be701bf91040945c1fc64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Constructor.",
        "params": {
          "_number": "The number to always return."
        }
      },
      "contribute(uint256)": {
        "details": "Contribute to the reward of a random number. All the ETH will be lost forever.",
        "params": {
          "_block": "Block the random number is linked to."
        }
      },
      "getRN(uint256)": {
        "details": "Get the \"random number\" (which is always the same).",
        "params": {
          "_block": "Block the random number is linked to."
        },
        "returns": {
          "RN": "Random Number. If the number is not ready or has not been required 0 instead."
        }
      },
      "getUncorrelatedRN(uint256)": {
        "details": "Get a uncorrelated random number. Act like getRN but give a different number for each sender.      This is to prevent users from getting correlated numbers.",
        "params": {
          "_block": "Block the random number is linked to."
        },
        "returns": {
          "RN": "Random Number. If the number is not ready or has not been required 0 instead."
        }
      },
      "requestRN(uint256)": {
        "details": "Request a random number.",
        "params": {
          "_block": "Block linked to the request."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
