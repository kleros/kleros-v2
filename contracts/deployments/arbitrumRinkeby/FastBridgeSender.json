{
  "address": "0x0b9e03455Fed83f209Fa7ce596c93ba6aBAd1f46",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ISafeBridge",
          "name": "_safebridge",
          "type": "address"
        },
        {
          "internalType": "contract IFastBridgeReceiver",
          "name": "_fastBridgeReceiver",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "messageHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "OutgoingMessage",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "fastBridgeReceiver",
      "outputs": [
        {
          "internalType": "contract IFastBridgeReceiver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fastSender",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safebridge",
      "outputs": [
        {
          "internalType": "contract ISafeBridge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "sendFast",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "sendSafe",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fastSender",
          "type": "address"
        }
      ],
      "name": "setFastSender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8be78ae0b525d0fa74956c8fa9dfd82e73b37e0c742ebee0a8452cfa2e4d0bc8",
  "receipt": {
    "to": null,
    "from": "0xF50E77f2A2B6138D16c6c7511562E5C33c4B15A3",
    "contractAddress": "0x0b9e03455Fed83f209Fa7ce596c93ba6aBAd1f46",
    "transactionIndex": 0,
    "gasUsed": "3163802",
    "logsBloom": "0x
    "blockHash": "0x1429a648bb019eca3b938c71d358c90d9eec53ce40e277623848fbcbd69fcad7",
    "transactionHash": "0x8be78ae0b525d0fa74956c8fa9dfd82e73b37e0c742ebee0a8452cfa2e4d0bc8",
    "logs": [],
    "blockNumber": 9610369,
    "cumulativeGasUsed": "122282",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1406bC99873d16Cde3491F809f1Af9442cb5A338",
    "0xD78DCddE2C5a2Bd4BB246Bc7dB6994b95f7c442C"
  ],
  "numDeployments": 1,
  "solcInputHash": "0a1ec2a631b00a23a4a92b2eaceb36a5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ISafeBridge\",\"name\":\"_safebridge\",\"type\":\"address\"},{\"internalType\":\"contract IFastBridgeReceiver\",\"name\":\"_fastBridgeReceiver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"OutgoingMessage\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"fastBridgeReceiver\",\"outputs\":[{\"internalType\":\"contract IFastBridgeReceiver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fastSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safebridge\",\"outputs\":[{\"internalType\":\"contract ISafeBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"sendFast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"sendSafe\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fastSender\",\"type\":\"address\"}],\"name\":\"setFastSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"sendFast(address,bytes)\":{\"params\":{\"_calldata\":\"The receiving domain encoded message data.\",\"_receiver\":\"The L1 contract address who will receive the calldata\"}},\"sendSafe(address,bytes)\":{\"params\":{\"_calldata\":\"The receiving domain encoded message data.\",\"_receiver\":\"The L1 contract address who will receive the calldata\"}}},\"version\":1},\"userdoc\":{\"events\":{\"OutgoingMessage(address,bytes32,bytes)\":{\"notice\":\"The bridgers need to watch for these events and relay the messageHash on the FastBridgeReceiver.\"}},\"kind\":\"user\",\"methods\":{\"sendFast(address,bytes)\":{\"notice\":\"Sends an arbitrary message from one domain to another via the fast bridge mechanism\"},\"sendSafe(address,bytes)\":{\"notice\":\"Sends an arbitrary message from one domain to another via the safe bridge mechanism, which relies on the chain's native bridge. It is unnecessary during normal operations but essential only in case of challenge. It may require some ETH (or whichever native token) to pay for the bridging cost, depending on the underlying safe bridge.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/bridge/FastBridgeSender.sol\":\"FastBridgeSender\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/bridge/FastBridgeSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n *  @authors: [@shalzz]\\n *  @reviewers: []\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/ISafeBridge.sol\\\";\\nimport \\\"./interfaces/IFastBridgeSender.sol\\\";\\nimport \\\"./interfaces/IFastBridgeReceiver.sol\\\";\\n\\ncontract FastBridgeSender is IFastBridgeSender {\\n    ISafeBridge public safebridge;\\n    IFastBridgeReceiver public fastBridgeReceiver;\\n    address public fastSender;\\n\\n    /**\\n     * The bridgers need to watch for these events and\\n     * relay the messageHash on the FastBridgeReceiver.\\n     */\\n    event OutgoingMessage(address target, bytes32 messageHash, bytes message);\\n\\n    constructor(ISafeBridge _safebridge, IFastBridgeReceiver _fastBridgeReceiver) {\\n        safebridge = _safebridge;\\n        fastBridgeReceiver = _fastBridgeReceiver;\\n    }\\n\\n    function setFastSender(address _fastSender) external {\\n        require(fastSender == address(0));\\n        fastSender = _fastSender;\\n    }\\n\\n    /**\\n     * Sends an arbitrary message from one domain to another\\n     * via the fast bridge mechanism\\n     *\\n     * @param _receiver The L1 contract address who will receive the calldata\\n     * @param _calldata The receiving domain encoded message data.\\n     */\\n    function sendFast(address _receiver, bytes memory _calldata) external {\\n        require(msg.sender == fastSender, \\\"Access not allowed: Fast Sender only.\\\");\\n\\n        // Encode the receiver address with the function signature + arguments i.e calldata\\n        bytes memory encodedData = abi.encode(_receiver, _calldata);\\n\\n        emit OutgoingMessage(_receiver, keccak256(encodedData), encodedData);\\n    }\\n\\n    /**\\n     * Sends an arbitrary message from one domain to another\\n     * via the safe bridge mechanism, which relies on the chain's native bridge.\\n     *\\n     * It is unnecessary during normal operations but essential only in case of challenge.\\n     *\\n     * It may require some ETH (or whichever native token) to pay for the bridging cost,\\n     * depending on the underlying safe bridge.\\n     *\\n     * @param _receiver The L1 contract address who will receive the calldata\\n     * @param _calldata The receiving domain encoded message data.\\n     */\\n    function sendSafe(address _receiver, bytes memory _calldata) external payable {\\n        // The safe bridge sends the encoded data to the FastBridgeReceiver\\n        // in order for the FastBridgeReceiver to resolve any potential\\n        // challenges and then forwards the message to the actual\\n        // intended recipient encoded in `data`\\n        // TODO: For this encodedData needs to be wrapped into an\\n        // IFastBridgeReceiver function.\\n        // TODO: add access checks for this on the FastBridgeReceiver.\\n        // TODO: how much ETH should be provided for bridging? add an ISafeBridge.bridgingCost()\\n        bytes memory encodedData = abi.encode(_receiver, _calldata);\\n        safebridge.sendSafe{value: msg.value}(address(fastBridgeReceiver), encodedData);\\n    }\\n}\\n\",\"keccak256\":\"0x38b58a84e65e83b015c2ff77333129656a759b803118870db9e2bc0a0453c3eb\",\"license\":\"MIT\"},\"src/bridge/interfaces/IFastBridgeReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IFastBridgeReceiver {\\n    function claim(bytes32 _messageHash) external payable;\\n\\n    function verifyAndRelay(bytes32 _messageHash, bytes memory _calldata) external;\\n\\n    function withdrawClaimDeposit(bytes32 _messageHash) external;\\n\\n    function claimDeposit() external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x1d7f6a6ed2c2b88f51833cba6091c57a43af2915a265395ad11aad08b1f7285d\",\"license\":\"MIT\"},\"src/bridge/interfaces/IFastBridgeSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IFastBridgeSender {\\n    /**\\n     * Sends an arbitrary message from one domain to another\\n     * via the fast bridge mechanism\\n     *\\n     * TODO: probably needs some access control either on the sender side\\n     * or the receiver side\\n     *\\n     * @param _receiver The L1 contract address who will receive the calldata\\n     * @param _calldata The receiving domain encoded message data.\\n     */\\n    function sendFast(address _receiver, bytes memory _calldata) external;\\n}\\n\",\"keccak256\":\"0xcbf3e9b5e153940b73ab5f09469eaf2fb24a1effac83c3786b27f785c325ff2e\",\"license\":\"MIT\"},\"src/bridge/interfaces/ISafeBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ISafeBridge {\\n    /**\\n     * Sends an arbitrary message from one domain to another.\\n     *\\n     * @param _receiver The L1 contract address who will receive the calldata\\n     * @param _calldata The L2 encoded message data.\\n     * @return Unique id to track the message request/transaction.\\n     */\\n    function sendSafe(address _receiver, bytes memory _calldata) external payable returns (uint256);\\n}\\n\",\"keccak256\":\"0x2e7ab23dc7721f51f3d115ea3a06c590869e8671ed824987756ab4bb224845d1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516105b23803806105b283398101604081905261002f91610078565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100b2565b6001600160a01b038116811461007557600080fd5b50565b6000806040838503121561008b57600080fd5b825161009681610060565b60208401519092506100a781610060565b809150509250929050565b6104f1806100c16000396000f3fe6080604052600436106100555760003560e01c80630d85ec7e1461005a57806346c2cfee146100965780638f516b0d146100b857806398ec20ec146100d8578063be44ae1c146100f8578063d96a36ca1461010b575b600080fd5b34801561006657600080fd5b5060005461007a906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b3480156100a257600080fd5b506100b66100b13660046102ff565b61012b565b005b3480156100c457600080fd5b5060025461007a906001600160a01b031681565b3480156100e457600080fd5b506100b66100f3366004610337565b610163565b6100b6610106366004610337565b61023c565b34801561011757600080fd5b5060015461007a906001600160a01b031681565b6002546001600160a01b03161561014157600080fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b031633146101cf5760405162461bcd60e51b815260206004820152602560248201527f416363657373206e6f7420616c6c6f7765643a20466173742053656e6465722060448201526437b7363c9760d91b606482015260840160405180910390fd5b600082826040516020016101e4929190610446565b60405160208183030381529060405290507f885ffc934437efa035b94d89742209ddef30dac81f0aadbb92d520cd54dc2d398382805190602001208360405161022f93929190610472565b60405180910390a1505050565b60008282604051602001610251929190610446565b60408051601f1981840301815290829052600054600154632f912b8760e21b84529193506001600160a01b039081169263be44ae1c92349261029a929116908690600401610446565b60206040518083038185885af11580156102b8573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906102dd91906104a2565b50505050565b80356001600160a01b03811681146102fa57600080fd5b919050565b60006020828403121561031157600080fd5b61031a826102e3565b9392505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561034a57600080fd5b610353836102e3565b9150602083013567ffffffffffffffff8082111561037057600080fd5b818501915085601f83011261038457600080fd5b81358181111561039657610396610321565b604051601f8201601f19908116603f011681019083821181831017156103be576103be610321565b816040528281528860208487010111156103d757600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000815180845260005b8181101561041f57602081850181015186830182015201610403565b81811115610431576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b038316815260406020820181905260009061046a908301846103f9565b949350505050565b60018060a01b038416815282602082015260606040820152600061049960608301846103f9565b95945050505050565b6000602082840312156104b457600080fd5b505191905056fea264697066735822122027798849f47017ea415e2d49b22f4ac53ed207353ed98ef0272d1f23362730d864736f6c634300080a0033",
  "deployedBytecode": "0x6080604052600436106100555760003560e01c80630d85ec7e1461005a57806346c2cfee146100965780638f516b0d146100b857806398ec20ec146100d8578063be44ae1c146100f8578063d96a36ca1461010b575b600080fd5b34801561006657600080fd5b5060005461007a906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b3480156100a257600080fd5b506100b66100b13660046102ff565b61012b565b005b3480156100c457600080fd5b5060025461007a906001600160a01b031681565b3480156100e457600080fd5b506100b66100f3366004610337565b610163565b6100b6610106366004610337565b61023c565b34801561011757600080fd5b5060015461007a906001600160a01b031681565b6002546001600160a01b03161561014157600080fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b031633146101cf5760405162461bcd60e51b815260206004820152602560248201527f416363657373206e6f7420616c6c6f7765643a20466173742053656e6465722060448201526437b7363c9760d91b606482015260840160405180910390fd5b600082826040516020016101e4929190610446565b60405160208183030381529060405290507f885ffc934437efa035b94d89742209ddef30dac81f0aadbb92d520cd54dc2d398382805190602001208360405161022f93929190610472565b60405180910390a1505050565b60008282604051602001610251929190610446565b60408051601f1981840301815290829052600054600154632f912b8760e21b84529193506001600160a01b039081169263be44ae1c92349261029a929116908690600401610446565b60206040518083038185885af11580156102b8573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906102dd91906104a2565b50505050565b80356001600160a01b03811681146102fa57600080fd5b919050565b60006020828403121561031157600080fd5b61031a826102e3565b9392505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561034a57600080fd5b610353836102e3565b9150602083013567ffffffffffffffff8082111561037057600080fd5b818501915085601f83011261038457600080fd5b81358181111561039657610396610321565b604051601f8201601f19908116603f011681019083821181831017156103be576103be610321565b816040528281528860208487010111156103d757600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000815180845260005b8181101561041f57602081850181015186830182015201610403565b81811115610431576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b038316815260406020820181905260009061046a908301846103f9565b949350505050565b60018060a01b038416815282602082015260606040820152600061049960608301846103f9565b95945050505050565b6000602082840312156104b457600080fd5b505191905056fea264697066735822122027798849f47017ea415e2d49b22f4ac53ed207353ed98ef0272d1f23362730d864736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "sendFast(address,bytes)": {
        "params": {
          "_calldata": "The receiving domain encoded message data.",
          "_receiver": "The L1 contract address who will receive the calldata"
        }
      },
      "sendSafe(address,bytes)": {
        "params": {
          "_calldata": "The receiving domain encoded message data.",
          "_receiver": "The L1 contract address who will receive the calldata"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "OutgoingMessage(address,bytes32,bytes)": {
        "notice": "The bridgers need to watch for these events and relay the messageHash on the FastBridgeReceiver."
      }
    },
    "kind": "user",
    "methods": {
      "sendFast(address,bytes)": {
        "notice": "Sends an arbitrary message from one domain to another via the fast bridge mechanism"
      },
      "sendSafe(address,bytes)": {
        "notice": "Sends an arbitrary message from one domain to another via the safe bridge mechanism, which relies on the chain's native bridge. It is unnecessary during normal operations but essential only in case of challenge. It may require some ETH (or whichever native token) to pay for the bridging cost, depending on the underlying safe bridge."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8249,
        "contract": "src/bridge/FastBridgeSender.sol:FastBridgeSender",
        "label": "safebridge",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ISafeBridge)8507"
      },
      {
        "astId": 8252,
        "contract": "src/bridge/FastBridgeSender.sol:FastBridgeSender",
        "label": "fastBridgeReceiver",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IFastBridgeReceiver)8483"
      },
      {
        "astId": 8254,
        "contract": "src/bridge/FastBridgeSender.sol:FastBridgeSender",
        "label": "fastSender",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IFastBridgeReceiver)8483": {
        "encoding": "inplace",
        "label": "contract IFastBridgeReceiver",
        "numberOfBytes": "20"
      },
      "t_contract(ISafeBridge)8507": {
        "encoding": "inplace",
        "label": "contract ISafeBridge",
        "numberOfBytes": "20"
      }
    }
  }
}
