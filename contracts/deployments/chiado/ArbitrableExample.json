{
  "address": "0xc0fcc96BFd78e36550FCaB434A9EE1210B57225b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IArbitrator",
          "name": "_arbitrator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_metaEvidenceID",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_metaEvidence",
          "type": "string"
        },
        {
          "internalType": "contract ERC20",
          "name": "_weth",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IArbitrator",
          "name": "_arbitrator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_metaEvidenceID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_evidenceGroupID",
          "type": "uint256"
        }
      ],
      "name": "Dispute",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_metaEvidenceID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_evidence",
          "type": "string"
        }
      ],
      "name": "MetaEvidence",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IArbitrator",
          "name": "_arbitrator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_ruling",
          "type": "uint256"
        }
      ],
      "name": "Ruling",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "arbitrator",
      "outputs": [
        {
          "internalType": "contract IArbitrator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IArbitrator",
          "name": "_arbitrator",
          "type": "address"
        }
      ],
      "name": "changeArbitrator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_metaEvidenceID",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_metaEvidence",
          "type": "string"
        }
      ],
      "name": "changeMetaEvidence",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_numberOfRulingOptions",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_arbitratorExtraData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_metaEvidenceID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_evidenceGroupID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_feeInWeth",
          "type": "uint256"
        }
      ],
      "name": "createDispute",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "disputeID",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "disputes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isRuled",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "ruling",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numberOfRulingOptions",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "externalIDtoLocalID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_externalDisputeID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ruling",
          "type": "uint256"
        }
      ],
      "name": "rule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf2d0c797180c8a2d584c028d976b74ce173ce7ad0d596cad759b4a056424696b",
  "receipt": {
    "to": null,
    "from": "0xF50E77f2A2B6138D16c6c7511562E5C33c4B15A3",
    "contractAddress": "0xc0fcc96BFd78e36550FCaB434A9EE1210B57225b",
    "transactionIndex": 0,
    "gasUsed": "720021",
    "logsBloom": "0x
    "blockHash": "0x02e428fc734e5034ff6abf8133f61f6ab116750329a695cd2da8b49a43be841f",
    "transactionHash": "0xf2d0c797180c8a2d584c028d976b74ce173ce7ad0d596cad759b4a056424696b",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2322269,
        "transactionHash": "0xf2d0c797180c8a2d584c028d976b74ce173ce7ad0d596cad759b4a056424696b",
        "address": "0xc0fcc96BFd78e36550FCaB434A9EE1210B57225b",
        "topics": [
          "0x61606860eb6c87306811e2695215385101daab53bd6ab4e9f9049aead9363c7d",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000412f697066732f6261666b7265696674656d65367475736e6a77797a616a6b37356679767a646d747979637863746637796866696a6236726669677a336e346c767100000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 0,
        "blockHash": "0x02e428fc734e5034ff6abf8133f61f6ab116750329a695cd2da8b49a43be841f"
      }
    ],
    "blockNumber": 2322269,
    "cumulativeGasUsed": "720021",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x34E520dc1d2Db660113b64724e14CEdCD01Ee879",
    0,
    "/ipfs/bafkreifteme6tusnjwyzajk75fyvzdmtyycxctf7yhfijb6rfigz3n4lvq",
    "0x014A442480DbAD767b7615E55E271799889FA1a7"
  ],
  "numDeployments": 1,
  "solcInputHash": "4b623c26d5aed7e40200b7f423c318df",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IArbitrator\",\"name\":\"_arbitrator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_metaEvidenceID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_metaEvidence\",\"type\":\"string\"},{\"internalType\":\"contract ERC20\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IArbitrator\",\"name\":\"_arbitrator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_metaEvidenceID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_evidenceGroupID\",\"type\":\"uint256\"}],\"name\":\"Dispute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_metaEvidenceID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_evidence\",\"type\":\"string\"}],\"name\":\"MetaEvidence\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IArbitrator\",\"name\":\"_arbitrator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ruling\",\"type\":\"uint256\"}],\"name\":\"Ruling\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"arbitrator\",\"outputs\":[{\"internalType\":\"contract IArbitrator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IArbitrator\",\"name\":\"_arbitrator\",\"type\":\"address\"}],\"name\":\"changeArbitrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_metaEvidenceID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_metaEvidence\",\"type\":\"string\"}],\"name\":\"changeMetaEvidence\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numberOfRulingOptions\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_arbitratorExtraData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_metaEvidenceID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_evidenceGroupID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeInWeth\",\"type\":\"uint256\"}],\"name\":\"createDispute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeID\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"disputes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isRuled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"ruling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfRulingOptions\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"externalIDtoLocalID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_externalDisputeID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ruling\",\"type\":\"uint256\"}],\"name\":\"rule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Constructor\",\"params\":{\"_arbitrator\":\"The arbitrator to rule on created disputes.\",\"_metaEvidence\":\"The URI of the meta evidence object for evidence submissions requests.\",\"_metaEvidenceID\":\"Unique identifier of meta-evidence.\"}},\"createDispute(uint256,bytes,uint256,uint256,uint256)\":{\"details\":\"TRUSTED. Calls createDispute function of the specified arbitrator to create a dispute. Note that we don\\u2019t need to check that msg.value is enough to pay arbitration fees as it\\u2019s the responsibility of the arbitrator contract.\",\"params\":{\"_arbitratorExtraData\":\"Extra data for the arbitrator.\",\"_evidenceGroupID\":\"Unique identifier of the evidence group that is linked to this dispute.\",\"_feeInWeth\":\"Amount of fees in WETH for the arbitrator.\",\"_metaEvidenceID\":\"Unique identifier of meta-evidence.\",\"_numberOfRulingOptions\":\"Number of ruling options. Must be greater than 1, otherwise there is nothing to choose from.\"},\"returns\":{\"disputeID\":\"Dispute id (on arbitrator side) of the dispute created.\"}},\"rule(uint256,uint256)\":{\"details\":\"To be called by the arbitrator of the dispute, to declare the winning ruling.\",\"params\":{\"_externalDisputeID\":\"ID of the dispute in arbitrator contract.\",\"_ruling\":\"The ruling choice of the arbitration.\"}}},\"title\":\"ArbitrableExample  An example of an arbitrable contract which connects to the arbitator that implements the updated interface.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/arbitration/arbitrables/ArbitrableExample.sol\":\"ArbitrableExample\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src/arbitration/IArbitrable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8;\\n\\nimport \\\"./IArbitrator.sol\\\";\\n\\n/**\\n * @title IArbitrable\\n * Arbitrable interface. Note that this interface follows the ERC-792 standard.\\n * When developing arbitrable contracts, we need to:\\n * - Define the action taken when a ruling is received by the contract.\\n * - Allow dispute creation. For this a function must call arbitrator.createDispute{value: _fee}(_choices,_extraData);\\n */\\ninterface IArbitrable {\\n    /**\\n     * @dev To be raised when a ruling is given.\\n     * @param _arbitrator The arbitrator giving the ruling.\\n     * @param _disputeID ID of the dispute in the Arbitrator contract.\\n     * @param _ruling The ruling which was given.\\n     */\\n    event Ruling(IArbitrator indexed _arbitrator, uint256 indexed _disputeID, uint256 _ruling);\\n\\n    /**\\n     * @dev Give a ruling for a dispute. Must be called by the arbitrator.\\n     * The purpose of this function is to ensure that the address calling it has the right to rule on the contract.\\n     * @param _disputeID ID of the dispute in the Arbitrator contract.\\n     * @param _ruling Ruling given by the arbitrator. Note that 0 is reserved for \\\"Not able/wanting to make a decision\\\".\\n     */\\n    function rule(uint256 _disputeID, uint256 _ruling) external;\\n}\\n\",\"keccak256\":\"0x8f1c36f6206566f0790448a654190e68a43a1dd2e039c2b77e7455d3fcd599a4\",\"license\":\"MIT\"},\"src/arbitration/IArbitrator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8;\\n\\nimport \\\"./IArbitrable.sol\\\";\\n\\n/**\\n * @title Arbitrator\\n * Arbitrator interface that implements the new arbitration standard.\\n * Unlike the ERC-792 this standard doesn't have anything related to appeals, so each arbitrator can implement an appeal system that suits it the most.\\n * When developing arbitrator contracts we need to:\\n * - Define the functions for dispute creation (createDispute). Don't forget to store the arbitrated contract and the disputeID (which should be unique, may nbDisputes).\\n * - Define the functions for cost display (arbitrationCost).\\n * - Allow giving rulings. For this a function must call arbitrable.rule(disputeID, ruling).\\n */\\ninterface IArbitrator {\\n    /**\\n     * @dev To be emitted when a dispute is created.\\n     * @param _disputeID ID of the dispute.\\n     * @param _arbitrable The contract which created the dispute.\\n     */\\n    event DisputeCreation(uint256 indexed _disputeID, IArbitrable indexed _arbitrable);\\n\\n    /**\\n     * @dev To be raised when a ruling is given.\\n     * @param _arbitrable The arbitrable receiving the ruling.\\n     * @param _disputeID ID of the dispute in the Arbitrator contract.\\n     * @param _ruling The ruling which was given.\\n     */\\n    event Ruling(IArbitrable indexed _arbitrable, uint256 indexed _disputeID, uint256 _ruling);\\n\\n    /**\\n     * @dev Create a dispute. Must be called by the arbitrable contract.\\n     * Must pay at least arbitrationCost(_extraData).\\n     * @param _choices Amount of choices the arbitrator can make in this dispute.\\n     * @param _extraData Can be used to give additional info on the dispute to be created.\\n     * @return disputeID ID of the dispute created.\\n     */\\n    function createDispute(uint256 _choices, bytes calldata _extraData) external payable returns (uint256 disputeID);\\n\\n    /**\\n     * @dev Compute the cost of arbitration. It is recommended not to increase it often, as it can be highly time and gas consuming for the arbitrated contracts to cope with fee augmentation.\\n     * @param _extraData Can be used to give additional info on the dispute to be created.\\n     * @return cost Required cost of arbitration.\\n     */\\n    function arbitrationCost(bytes calldata _extraData) external view returns (uint256 cost);\\n}\\n\",\"keccak256\":\"0x2264bc7cb975d89776b9bf3e35cecd4dec7d601604601ca4822d8bfc0886c379\",\"license\":\"MIT\"},\"src/arbitration/arbitrables/ArbitrableExample.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../IArbitrable.sol\\\";\\nimport \\\"../../evidence/IMetaEvidence.sol\\\";\\n\\n/**\\n *  @title ArbitrableExample\\n *  An example of an arbitrable contract which connects to the arbitator that implements the updated interface.\\n */\\ncontract ArbitrableExample is IArbitrable, IMetaEvidence {\\n    struct DisputeStruct {\\n        bool isRuled; // Whether the dispute has been ruled or not.\\n        uint256 ruling; // Ruling given by the arbitrator.\\n        uint256 numberOfRulingOptions; // The number of choices the arbitrator can give.\\n    }\\n\\n    address public immutable governor;\\n    IArbitrator public arbitrator; // Arbitrator is set in constructor and never changed.\\n    ERC20 public immutable weth; // The WETH token.\\n    mapping(uint256 => uint256) public externalIDtoLocalID; // Maps external (arbitrator side) dispute IDs to local dispute IDs.\\n    DisputeStruct[] public disputes; // Stores the disputes' info. disputes[disputeID].\\n\\n    /** @dev Constructor\\n     *  @param _arbitrator The arbitrator to rule on created disputes.\\n     *  @param _metaEvidenceID Unique identifier of meta-evidence.\\n     *  @param _metaEvidence The URI of the meta evidence object for evidence submissions requests.\\n     */\\n    constructor(IArbitrator _arbitrator, uint256 _metaEvidenceID,string memory _metaEvidence, ERC20 _weth) {\\n        governor = msg.sender;\\n        arbitrator = _arbitrator;\\n        weth = _weth;\\n        emit MetaEvidence(_metaEvidenceID, _metaEvidence);\\n    }\\n\\n    /** @dev TRUSTED. Calls createDispute function of the specified arbitrator to create a dispute.\\n        Note that we don\\u2019t need to check that msg.value is enough to pay arbitration fees as it\\u2019s the responsibility of the arbitrator contract.\\n     *  @param _numberOfRulingOptions Number of ruling options. Must be greater than 1, otherwise there is nothing to choose from.\\n     *  @param _arbitratorExtraData Extra data for the arbitrator.\\n     *  @param _metaEvidenceID Unique identifier of meta-evidence.\\n     *  @param _evidenceGroupID Unique identifier of the evidence group that is linked to this dispute.\\n     *  @param _feeInWeth Amount of fees in WETH for the arbitrator.\\n     *  @return disputeID Dispute id (on arbitrator side) of the dispute created.\\n     */\\n    function createDispute(\\n        uint256 _numberOfRulingOptions,\\n        bytes calldata _arbitratorExtraData,\\n        uint256 _metaEvidenceID,\\n        uint256 _evidenceGroupID,\\n        uint256 _feeInWeth\\n    ) external payable returns (uint256 disputeID) {\\n        require(_numberOfRulingOptions > 1, \\\"Incorrect number of choices\\\");\\n\\n        uint256 localDisputeID = disputes.length;\\n        disputes.push(DisputeStruct({isRuled: false, ruling: 0, numberOfRulingOptions: _numberOfRulingOptions}));\\n\\n        require(weth.transferFrom(msg.sender, address(this), _feeInWeth), \\\"Not enough WETH for arbitration\\\");\\n        weth.increaseAllowance(address(arbitrator), _feeInWeth);\\n        disputeID = arbitrator.createDispute(_numberOfRulingOptions, _arbitratorExtraData);\\n        externalIDtoLocalID[disputeID] = localDisputeID;\\n\\n        emit Dispute(arbitrator, disputeID, _metaEvidenceID, _evidenceGroupID);\\n    }\\n\\n    /** @dev To be called by the arbitrator of the dispute, to declare the winning ruling.\\n     *  @param _externalDisputeID ID of the dispute in arbitrator contract.\\n     *  @param _ruling The ruling choice of the arbitration.\\n     */\\n    function rule(uint256 _externalDisputeID, uint256 _ruling) external override {\\n        uint256 localDisputeID = externalIDtoLocalID[_externalDisputeID];\\n        DisputeStruct storage dispute = disputes[localDisputeID];\\n        require(msg.sender == address(arbitrator), \\\"Only the arbitrator can execute this.\\\");\\n        require(_ruling <= dispute.numberOfRulingOptions, \\\"Invalid ruling.\\\");\\n        require(dispute.isRuled == false, \\\"This dispute has been ruled already.\\\");\\n\\n        dispute.isRuled = true;\\n        dispute.ruling = _ruling;\\n\\n        emit Ruling(IArbitrator(msg.sender), _externalDisputeID, dispute.ruling);\\n    }\\n\\n    function changeMetaEvidence(uint256 _metaEvidenceID, string memory _metaEvidence) external {\\n        require(msg.sender == governor, \\\"Not authorized: governor only.\\\");\\n        emit MetaEvidence(_metaEvidenceID, _metaEvidence);\\n    }\\n\\n    function changeArbitrator(IArbitrator _arbitrator) external {\\n        require(msg.sender == governor, \\\"Not authorized: governor only.\\\");\\n        arbitrator = _arbitrator;\\n    }\\n}\\n\",\"keccak256\":\"0x4959a805fe137ef2bf74e49c343d4ecfd89129d7437e90e1b02f28461bed385c\",\"license\":\"MIT\"},\"src/evidence/IMetaEvidence.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../arbitration/IArbitrator.sol\\\";\\n\\n/** @title IMetaEvidence\\n *  ERC-1497: Evidence Standard excluding evidence emission as it will be handled by the arbitrator.\\n */\\ninterface IMetaEvidence {\\n    /**\\n     * @dev To be emitted when meta-evidence is submitted.\\n     * @param _metaEvidenceID Unique identifier of meta-evidence.\\n     * @param _evidence IPFS path to metaevidence, example: '/ipfs/Qmarwkf7C9RuzDEJNnarT3WZ7kem5bk8DZAzx78acJjMFH/metaevidence.json'\\n     */\\n    event MetaEvidence(uint256 indexed _metaEvidenceID, string _evidence);\\n\\n    /**\\n     * @dev To be emitted when a dispute is created to link the correct meta-evidence to the disputeID.\\n     * @param _arbitrator The arbitrator of the contract.\\n     * @param _disputeID ID of the dispute in the Arbitrator contract.\\n     * @param _metaEvidenceID Unique identifier of meta-evidence.\\n     * @param _evidenceGroupID Unique identifier of the evidence group that is linked to this dispute.\\n     */\\n    event Dispute(\\n        IArbitrator indexed _arbitrator,\\n        uint256 indexed _disputeID,\\n        uint256 _metaEvidenceID,\\n        uint256 _evidenceGroupID\\n    );\\n}\\n\",\"keccak256\":\"0xb87dec548b7c41bb2e2bd25ef3b2159d014c14cdd1e47ca4bec7894817cb8998\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162000de738038062000de7833981016040819052620000349162000117565b33608052600080546001600160a01b0319166001600160a01b0386811691909117909155811660a05260405183907f61606860eb6c87306811e2695215385101daab53bd6ab4e9f9049aead9363c7d906200009190859062000203565b60405180910390a25050505062000238565b6001600160a01b0381168114620000b957600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620000ef578181015183820152602001620000d5565b83811115620000ff576000848401525b50505050565b80516200011281620000a3565b919050565b600080600080608085870312156200012e57600080fd5b84516200013b81620000a3565b6020860151604087015191955093506001600160401b03808211156200016057600080fd5b818701915087601f8301126200017557600080fd5b8151818111156200018a576200018a620000bc565b604051601f8201601f19908116603f01168101908382118183101715620001b557620001b5620000bc565b816040528281528a6020848701011115620001cf57600080fd5b620001e2836020830160208801620000d2565b8096505050505050620001f86060860162000105565b905092959194509250565b602081526000825180602084015262000224816040850160208701620000d2565b601f01601f19169190910160400192915050565b60805160a051610b6e62000279600039600081816101000152818161050401526105fd015260008181608d0152818161077301526107f70152610b6e6000f3fe6080604052600436106100765760003560e01c80630c340a241461007b578063311a6c56146100cc5780633fc8cef3146100ee578063564a565d146101225780635b13a8a01461015f5780636cc6cde114610180578063c21ae061146101a0578063e98e3a64146101cd578063fc548f08146101ed575b600080fd5b34801561008757600080fd5b506100af7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156100d857600080fd5b506100ec6100e7366004610856565b61020d565b005b3480156100fa57600080fd5b506100af7f000000000000000000000000000000000000000000000000000000000000000081565b34801561012e57600080fd5b5061014261013d366004610878565b6103a6565b6040805193151584526020840192909252908201526060016100c3565b61017261016d366004610891565b6103dd565b6040519081526020016100c3565b34801561018c57600080fd5b506000546100af906001600160a01b031681565b3480156101ac57600080fd5b506101726101bb366004610878565b60016020526000908152604090205481565b3480156101d957600080fd5b506100ec6101e836600461093a565b610768565b3480156101f957600080fd5b506100ec6102083660046109f5565b6107ec565b600082815260016020526040812054600280549192918390811061023357610233610a25565b600091825260208220915460039190910290910191506001600160a01b031633146102b35760405162461bcd60e51b815260206004820152602560248201527f4f6e6c79207468652061726269747261746f722063616e2065786563757465206044820152643a3434b99760d91b60648201526084015b60405180910390fd5b80600201548311156102f95760405162461bcd60e51b815260206004820152600f60248201526e24b73b30b634b210393ab634b7339760891b60448201526064016102aa565b805460ff16156103575760405162461bcd60e51b8152602060048201526024808201527f54686973206469737075746520686173206265656e2072756c656420616c726560448201526330b23c9760e11b60648201526084016102aa565b805460ff1916600190811782558101839055604051838152849033907f394027a5fa6e098a1191094d1719d6929b9abc535fcc0c8f448d6a4e756222769060200160405180910390a350505050565b600281815481106103b657600080fd5b600091825260209091206003909102018054600182015460029092015460ff909116925083565b60006001871161042f5760405162461bcd60e51b815260206004820152601b60248201527f496e636f7272656374206e756d626572206f662063686f69636573000000000060448201526064016102aa565b60028054604080516060810182526000808252602082018181528284018d81526001860187559590915290517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace60038502908101805460ff19169215159290921790915590517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf82015592517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad09093019290925590516323b872dd60e01b8152336004820152306024820152604481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd90606401602060405180830381600087803b15801561055057600080fd5b505af1158015610564573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105889190610a3b565b6105d45760405162461bcd60e51b815260206004820152601f60248201527f4e6f7420656e6f756768205745544820666f72206172626974726174696f6e0060448201526064016102aa565b600054604051633950935160e01b81526001600160a01b039182166004820152602481018590527f000000000000000000000000000000000000000000000000000000000000000090911690633950935190604401602060405180830381600087803b15801561064357600080fd5b505af1158015610657573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067b9190610a3b565b5060005460405163c13517e160e01b81526001600160a01b039091169063c13517e1906106b0908b908b908b90600401610a5d565b602060405180830381600087803b1580156106ca57600080fd5b505af11580156106de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107029190610a93565b60008181526001602090815260408083208590559154825189815291820188905292945084926001600160a01b0316917f74baab670a4015ab2f1b467c5252a96141a2573f2908e58a92081e80d3cfde3d910160405180910390a3509695505050505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107b05760405162461bcd60e51b81526004016102aa90610aac565b817f61606860eb6c87306811e2695215385101daab53bd6ab4e9f9049aead9363c7d826040516107e09190610ae3565b60405180910390a25050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108345760405162461bcd60e51b81526004016102aa90610aac565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000806040838503121561086957600080fd5b50508035926020909101359150565b60006020828403121561088a57600080fd5b5035919050565b60008060008060008060a087890312156108aa57600080fd5b86359550602087013567ffffffffffffffff808211156108c957600080fd5b818901915089601f8301126108dd57600080fd5b8135818111156108ec57600080fd5b8a60208285010111156108fe57600080fd5b979a60209290920199509697604081013597506060810135965060800135945092505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561094d57600080fd5b82359150602083013567ffffffffffffffff8082111561096c57600080fd5b818501915085601f83011261098057600080fd5b81358181111561099257610992610924565b604051601f8201601f19908116603f011681019083821181831017156109ba576109ba610924565b816040528281528860208487010111156109d357600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b600060208284031215610a0757600080fd5b81356001600160a01b0381168114610a1e57600080fd5b9392505050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610a4d57600080fd5b81518015158114610a1e57600080fd5b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b600060208284031215610aa557600080fd5b5051919050565b6020808252601e908201527f4e6f7420617574686f72697a65643a20676f7665726e6f72206f6e6c792e0000604082015260600190565b600060208083528351808285015260005b81811015610b1057858101830151858201604001528201610af4565b81811115610b22576000604083870101525b50601f01601f191692909201604001939250505056fea2646970667358221220ce8d35b0c825ffb680b17cdb56af41b1d0187ceb066d7adeca526f2f5682e8dd64736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100765760003560e01c80630c340a241461007b578063311a6c56146100cc5780633fc8cef3146100ee578063564a565d146101225780635b13a8a01461015f5780636cc6cde114610180578063c21ae061146101a0578063e98e3a64146101cd578063fc548f08146101ed575b600080fd5b34801561008757600080fd5b506100af7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156100d857600080fd5b506100ec6100e7366004610856565b61020d565b005b3480156100fa57600080fd5b506100af7f000000000000000000000000000000000000000000000000000000000000000081565b34801561012e57600080fd5b5061014261013d366004610878565b6103a6565b6040805193151584526020840192909252908201526060016100c3565b61017261016d366004610891565b6103dd565b6040519081526020016100c3565b34801561018c57600080fd5b506000546100af906001600160a01b031681565b3480156101ac57600080fd5b506101726101bb366004610878565b60016020526000908152604090205481565b3480156101d957600080fd5b506100ec6101e836600461093a565b610768565b3480156101f957600080fd5b506100ec6102083660046109f5565b6107ec565b600082815260016020526040812054600280549192918390811061023357610233610a25565b600091825260208220915460039190910290910191506001600160a01b031633146102b35760405162461bcd60e51b815260206004820152602560248201527f4f6e6c79207468652061726269747261746f722063616e2065786563757465206044820152643a3434b99760d91b60648201526084015b60405180910390fd5b80600201548311156102f95760405162461bcd60e51b815260206004820152600f60248201526e24b73b30b634b210393ab634b7339760891b60448201526064016102aa565b805460ff16156103575760405162461bcd60e51b8152602060048201526024808201527f54686973206469737075746520686173206265656e2072756c656420616c726560448201526330b23c9760e11b60648201526084016102aa565b805460ff1916600190811782558101839055604051838152849033907f394027a5fa6e098a1191094d1719d6929b9abc535fcc0c8f448d6a4e756222769060200160405180910390a350505050565b600281815481106103b657600080fd5b600091825260209091206003909102018054600182015460029092015460ff909116925083565b60006001871161042f5760405162461bcd60e51b815260206004820152601b60248201527f496e636f7272656374206e756d626572206f662063686f69636573000000000060448201526064016102aa565b60028054604080516060810182526000808252602082018181528284018d81526001860187559590915290517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace60038502908101805460ff19169215159290921790915590517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf82015592517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad09093019290925590516323b872dd60e01b8152336004820152306024820152604481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd90606401602060405180830381600087803b15801561055057600080fd5b505af1158015610564573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105889190610a3b565b6105d45760405162461bcd60e51b815260206004820152601f60248201527f4e6f7420656e6f756768205745544820666f72206172626974726174696f6e0060448201526064016102aa565b600054604051633950935160e01b81526001600160a01b039182166004820152602481018590527f000000000000000000000000000000000000000000000000000000000000000090911690633950935190604401602060405180830381600087803b15801561064357600080fd5b505af1158015610657573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067b9190610a3b565b5060005460405163c13517e160e01b81526001600160a01b039091169063c13517e1906106b0908b908b908b90600401610a5d565b602060405180830381600087803b1580156106ca57600080fd5b505af11580156106de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107029190610a93565b60008181526001602090815260408083208590559154825189815291820188905292945084926001600160a01b0316917f74baab670a4015ab2f1b467c5252a96141a2573f2908e58a92081e80d3cfde3d910160405180910390a3509695505050505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107b05760405162461bcd60e51b81526004016102aa90610aac565b817f61606860eb6c87306811e2695215385101daab53bd6ab4e9f9049aead9363c7d826040516107e09190610ae3565b60405180910390a25050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108345760405162461bcd60e51b81526004016102aa90610aac565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000806040838503121561086957600080fd5b50508035926020909101359150565b60006020828403121561088a57600080fd5b5035919050565b60008060008060008060a087890312156108aa57600080fd5b86359550602087013567ffffffffffffffff808211156108c957600080fd5b818901915089601f8301126108dd57600080fd5b8135818111156108ec57600080fd5b8a60208285010111156108fe57600080fd5b979a60209290920199509697604081013597506060810135965060800135945092505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561094d57600080fd5b82359150602083013567ffffffffffffffff8082111561096c57600080fd5b818501915085601f83011261098057600080fd5b81358181111561099257610992610924565b604051601f8201601f19908116603f011681019083821181831017156109ba576109ba610924565b816040528281528860208487010111156109d357600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b600060208284031215610a0757600080fd5b81356001600160a01b0381168114610a1e57600080fd5b9392505050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610a4d57600080fd5b81518015158114610a1e57600080fd5b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b600060208284031215610aa557600080fd5b5051919050565b6020808252601e908201527f4e6f7420617574686f72697a65643a20676f7665726e6f72206f6e6c792e0000604082015260600190565b600060208083528351808285015260005b81811015610b1057858101830151858201604001528201610af4565b81811115610b22576000604083870101525b50601f01601f191692909201604001939250505056fea2646970667358221220ce8d35b0c825ffb680b17cdb56af41b1d0187ceb066d7adeca526f2f5682e8dd64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Constructor",
        "params": {
          "_arbitrator": "The arbitrator to rule on created disputes.",
          "_metaEvidence": "The URI of the meta evidence object for evidence submissions requests.",
          "_metaEvidenceID": "Unique identifier of meta-evidence."
        }
      },
      "createDispute(uint256,bytes,uint256,uint256,uint256)": {
        "details": "TRUSTED. Calls createDispute function of the specified arbitrator to create a dispute. Note that we don’t need to check that msg.value is enough to pay arbitration fees as it’s the responsibility of the arbitrator contract.",
        "params": {
          "_arbitratorExtraData": "Extra data for the arbitrator.",
          "_evidenceGroupID": "Unique identifier of the evidence group that is linked to this dispute.",
          "_feeInWeth": "Amount of fees in WETH for the arbitrator.",
          "_metaEvidenceID": "Unique identifier of meta-evidence.",
          "_numberOfRulingOptions": "Number of ruling options. Must be greater than 1, otherwise there is nothing to choose from."
        },
        "returns": {
          "disputeID": "Dispute id (on arbitrator side) of the dispute created."
        }
      },
      "rule(uint256,uint256)": {
        "details": "To be called by the arbitrator of the dispute, to declare the winning ruling.",
        "params": {
          "_externalDisputeID": "ID of the dispute in arbitrator contract.",
          "_ruling": "The ruling choice of the arbitration."
        }
      }
    },
    "title": "ArbitrableExample  An example of an arbitrable contract which connects to the arbitator that implements the updated interface.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 797,
        "contract": "src/arbitration/arbitrables/ArbitrableExample.sol:ArbitrableExample",
        "label": "arbitrator",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IArbitrator)775"
      },
      {
        "astId": 804,
        "contract": "src/arbitration/arbitrables/ArbitrableExample.sol:ArbitrableExample",
        "label": "externalIDtoLocalID",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 808,
        "contract": "src/arbitration/arbitrables/ArbitrableExample.sol:ArbitrableExample",
        "label": "disputes",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(DisputeStruct)792_storage)dyn_storage"
      }
    ],
    "types": {
      "t_array(t_struct(DisputeStruct)792_storage)dyn_storage": {
        "base": "t_struct(DisputeStruct)792_storage",
        "encoding": "dynamic_array",
        "label": "struct ArbitrableExample.DisputeStruct[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IArbitrator)775": {
        "encoding": "inplace",
        "label": "contract IArbitrator",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(DisputeStruct)792_storage": {
        "encoding": "inplace",
        "label": "struct ArbitrableExample.DisputeStruct",
        "members": [
          {
            "astId": 787,
            "contract": "src/arbitration/arbitrables/ArbitrableExample.sol:ArbitrableExample",
            "label": "isRuled",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 789,
            "contract": "src/arbitration/arbitrables/ArbitrableExample.sol:ArbitrableExample",
            "label": "ruling",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 791,
            "contract": "src/arbitration/arbitrables/ArbitrableExample.sol:ArbitrableExample",
            "label": "numberOfRulingOptions",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
