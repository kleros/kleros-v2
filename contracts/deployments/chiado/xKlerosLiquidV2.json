{
  "address": "0x34E520dc1d2Db660113b64724e14CEdCD01Ee879",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IArbitrable",
          "name": "_arbitrable",
          "type": "address"
        }
      ],
      "name": "DisputeCreation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_appeal",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_voteID",
          "type": "uint256"
        }
      ],
      "name": "Draw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum xKlerosLiquidV2.Period",
          "name": "_period",
          "type": "uint8"
        }
      ],
      "name": "NewPeriod",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum xKlerosLiquidV2.Phase",
          "name": "_phase",
          "type": "uint8"
        }
      ],
      "name": "NewPhase",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IArbitrable",
          "name": "_arbitrable",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_ruling",
          "type": "uint256"
        }
      ],
      "name": "Ruling",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_subcourtID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "_stake",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newTotalStake",
          "type": "uint256"
        }
      ],
      "name": "StakeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "_tokenAmount",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "_ETHAmount",
          "type": "int256"
        }
      ],
      "name": "TokenAndETHShift",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ALPHA_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_STAKE_PATHS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_JURORS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NON_PAYABLE_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RN",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RNBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RNGenerator",
      "outputs": [
        {
          "internalType": "contract IRandomAuRa",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_extraData",
          "type": "bytes"
        }
      ],
      "name": "arbitrationCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "cost",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IForeignGateway",
          "name": "_foreignGateway",
          "type": "address"
        }
      ],
      "name": "changeForeignGateway",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        }
      ],
      "name": "changeGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxDrawingTime",
          "type": "uint256"
        }
      ],
      "name": "changeMaxDrawingTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minStakingTime",
          "type": "uint256"
        }
      ],
      "name": "changeMinStakingTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract WrappedPinakion",
          "name": "_pinakion",
          "type": "address"
        }
      ],
      "name": "changePinakion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRandomAuRa",
          "name": "_RNGenerator",
          "type": "address"
        }
      ],
      "name": "changeRNGenerator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "_subcourtID",
          "type": "uint96"
        },
        {
          "internalType": "uint256",
          "name": "_alpha",
          "type": "uint256"
        }
      ],
      "name": "changeSubcourtAlpha",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "_subcourtID",
          "type": "uint96"
        },
        {
          "internalType": "uint256",
          "name": "_feeForJuror",
          "type": "uint256"
        }
      ],
      "name": "changeSubcourtJurorFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "_subcourtID",
          "type": "uint96"
        },
        {
          "internalType": "uint256",
          "name": "_jurorsForCourtJump",
          "type": "uint256"
        }
      ],
      "name": "changeSubcourtJurorsForJump",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "_subcourtID",
          "type": "uint96"
        },
        {
          "internalType": "uint256",
          "name": "_minStake",
          "type": "uint256"
        }
      ],
      "name": "changeSubcourtMinStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "_subcourtID",
          "type": "uint96"
        },
        {
          "internalType": "uint256[4]",
          "name": "_timesPerPeriod",
          "type": "uint256[4]"
        }
      ],
      "name": "changeSubcourtTimesPerPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_weth",
          "type": "address"
        }
      ],
      "name": "changeWethAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "courts",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "parent",
          "type": "uint96"
        },
        {
          "internalType": "bool",
          "name": "hiddenVotes",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "minStake",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "alpha",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "feeForJuror",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "jurorsForCourtJump",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_numberOfChoices",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_extraData",
          "type": "bytes"
        }
      ],
      "name": "createDispute",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "disputeID",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "_parent",
          "type": "uint96"
        },
        {
          "internalType": "bool",
          "name": "_hiddenVotes",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_minStake",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_alpha",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_feeForJuror",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_jurorsForCourtJump",
          "type": "uint256"
        },
        {
          "internalType": "uint256[4]",
          "name": "_timesPerPeriod",
          "type": "uint256[4]"
        },
        {
          "internalType": "uint256",
          "name": "_sortitionSumTreeK",
          "type": "uint256"
        }
      ],
      "name": "createSubcourt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        }
      ],
      "name": "currentRuling",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ruling",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "delayedSetStakes",
      "outputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "subcourtID",
          "type": "uint96"
        },
        {
          "internalType": "uint128",
          "name": "stake",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "disputes",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "subcourtID",
          "type": "uint96"
        },
        {
          "internalType": "contract IArbitrable",
          "name": "arbitrated",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "numberOfChoices",
          "type": "uint256"
        },
        {
          "internalType": "enum xKlerosLiquidV2.Period",
          "name": "period",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "lastPeriodChange",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "drawsInRound",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "commitsInRound",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "ruled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "disputesRuling",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disputesWithoutJurors",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_iterations",
          "type": "uint256"
        }
      ],
      "name": "executeDelayedSetStakes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_destination",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "executeGovernorProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "foreignGateway",
      "outputs": [
        {
          "internalType": "contract IForeignGateway",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        }
      ],
      "name": "getDispute",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "votesLengths",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokensAtStakePerJuror",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "totalFeesForJurors",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "votesInEachRound",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "repartitionsInEachRound",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "penaltiesInEachRound",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getJuror",
      "outputs": [
        {
          "internalType": "uint96[]",
          "name": "subcourtIDs",
          "type": "uint96[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "_subcourtID",
          "type": "uint96"
        }
      ],
      "name": "getSubcourt",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "children",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[4]",
          "name": "timesPerPeriod",
          "type": "uint256[4]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_appeal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_voteID",
          "type": "uint256"
        }
      ],
      "name": "getVote",
      "outputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "commit",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "choice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "voted",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_appeal",
          "type": "uint256"
        }
      ],
      "name": "getVoteCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "winningChoice",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "counts",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "tied",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        },
        {
          "internalType": "contract WrappedPinakion",
          "name": "_pinakion",
          "type": "address"
        },
        {
          "internalType": "contract IRandomAuRa",
          "name": "_RNGenerator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minStakingTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxDrawingTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_hiddenVotes",
          "type": "bool"
        },
        {
          "internalType": "uint256[4]",
          "name": "_courtParameters",
          "type": "uint256[4]"
        },
        {
          "internalType": "uint256[4]",
          "name": "_timesPerPeriod",
          "type": "uint256[4]"
        },
        {
          "internalType": "uint256",
          "name": "_sortitionSumTreeK",
          "type": "uint256"
        },
        {
          "internalType": "contract IForeignGateway",
          "name": "_foreignGateway",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_weth",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "jurors",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "stakedTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockedTokens",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastDelayedSetStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastPhaseChange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockInsolventTransfers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxDrawingTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minStakingTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextDelayedSetStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "onApprove",
      "outputs": [
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "onTransfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "phase",
      "outputs": [
        {
          "internalType": "enum xKlerosLiquidV2.Phase",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pinakion",
      "outputs": [
        {
          "internalType": "contract WrappedPinakion",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "proxyPayment",
      "outputs": [
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ruling",
          "type": "uint256"
        }
      ],
      "name": "rule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "_subcourtID",
          "type": "uint96"
        },
        {
          "internalType": "uint128",
          "name": "_stake",
          "type": "uint128"
        }
      ],
      "name": "setStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_subcourtID",
          "type": "uint96"
        }
      ],
      "name": "stakeOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDisputes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xdb6a244e5101865541ff6d716ed335268c82aa88e3ff47dc219cda97d50b40ef",
  "receipt": {
    "to": null,
    "from": "0xF50E77f2A2B6138D16c6c7511562E5C33c4B15A3",
    "contractAddress": "0x34E520dc1d2Db660113b64724e14CEdCD01Ee879",
    "transactionIndex": 1,
    "gasUsed": "3055546",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x8523df3c3be71b598f308dcb14f0c03e80382deb0f53120672a7a06f437a4335",
    "transactionHash": "0xdb6a244e5101865541ff6d716ed335268c82aa88e3ff47dc219cda97d50b40ef",
    "logs": [],
    "blockNumber": 2309689,
    "cumulativeGasUsed": "6902252",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "554a0755634b519652537ffa5fcb4ec8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IArbitrable\",\"name\":\"_arbitrable\",\"type\":\"address\"}],\"name\":\"DisputeCreation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_appeal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_voteID\",\"type\":\"uint256\"}],\"name\":\"Draw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum xKlerosLiquidV2.Period\",\"name\":\"_period\",\"type\":\"uint8\"}],\"name\":\"NewPeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum xKlerosLiquidV2.Phase\",\"name\":\"_phase\",\"type\":\"uint8\"}],\"name\":\"NewPhase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IArbitrable\",\"name\":\"_arbitrable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ruling\",\"type\":\"uint256\"}],\"name\":\"Ruling\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_subcourtID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"_stake\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newTotalStake\",\"type\":\"uint256\"}],\"name\":\"StakeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"_tokenAmount\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"_ETHAmount\",\"type\":\"int256\"}],\"name\":\"TokenAndETHShift\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ALPHA_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_STAKE_PATHS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_JURORS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NON_PAYABLE_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RNBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RNGenerator\",\"outputs\":[{\"internalType\":\"contract IRandomAuRa\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"arbitrationCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IForeignGateway\",\"name\":\"_foreignGateway\",\"type\":\"address\"}],\"name\":\"changeForeignGateway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"name\":\"changeGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxDrawingTime\",\"type\":\"uint256\"}],\"name\":\"changeMaxDrawingTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minStakingTime\",\"type\":\"uint256\"}],\"name\":\"changeMinStakingTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract WrappedPinakion\",\"name\":\"_pinakion\",\"type\":\"address\"}],\"name\":\"changePinakion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRandomAuRa\",\"name\":\"_RNGenerator\",\"type\":\"address\"}],\"name\":\"changeRNGenerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_subcourtID\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"_alpha\",\"type\":\"uint256\"}],\"name\":\"changeSubcourtAlpha\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_subcourtID\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"_feeForJuror\",\"type\":\"uint256\"}],\"name\":\"changeSubcourtJurorFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_subcourtID\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"_jurorsForCourtJump\",\"type\":\"uint256\"}],\"name\":\"changeSubcourtJurorsForJump\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_subcourtID\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"_minStake\",\"type\":\"uint256\"}],\"name\":\"changeSubcourtMinStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_subcourtID\",\"type\":\"uint96\"},{\"internalType\":\"uint256[4]\",\"name\":\"_timesPerPeriod\",\"type\":\"uint256[4]\"}],\"name\":\"changeSubcourtTimesPerPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_weth\",\"type\":\"address\"}],\"name\":\"changeWethAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"courts\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"parent\",\"type\":\"uint96\"},{\"internalType\":\"bool\",\"name\":\"hiddenVotes\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"alpha\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeForJuror\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jurorsForCourtJump\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numberOfChoices\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"createDispute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeID\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_parent\",\"type\":\"uint96\"},{\"internalType\":\"bool\",\"name\":\"_hiddenVotes\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_minStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_alpha\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeForJuror\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_jurorsForCourtJump\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"_timesPerPeriod\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256\",\"name\":\"_sortitionSumTreeK\",\"type\":\"uint256\"}],\"name\":\"createSubcourt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"}],\"name\":\"currentRuling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ruling\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"delayedSetStakes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"subcourtID\",\"type\":\"uint96\"},{\"internalType\":\"uint128\",\"name\":\"stake\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"disputes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"subcourtID\",\"type\":\"uint96\"},{\"internalType\":\"contract IArbitrable\",\"name\":\"arbitrated\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numberOfChoices\",\"type\":\"uint256\"},{\"internalType\":\"enum xKlerosLiquidV2.Period\",\"name\":\"period\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"lastPeriodChange\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"drawsInRound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commitsInRound\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"ruled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"disputesRuling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disputesWithoutJurors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_iterations\",\"type\":\"uint256\"}],\"name\":\"executeDelayedSetStakes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"executeGovernorProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"foreignGateway\",\"outputs\":[{\"internalType\":\"contract IForeignGateway\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"}],\"name\":\"getDispute\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"votesLengths\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokensAtStakePerJuror\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"totalFeesForJurors\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"votesInEachRound\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"repartitionsInEachRound\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"penaltiesInEachRound\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getJuror\",\"outputs\":[{\"internalType\":\"uint96[]\",\"name\":\"subcourtIDs\",\"type\":\"uint96[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_subcourtID\",\"type\":\"uint96\"}],\"name\":\"getSubcourt\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"children\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[4]\",\"name\":\"timesPerPeriod\",\"type\":\"uint256[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_appeal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_voteID\",\"type\":\"uint256\"}],\"name\":\"getVote\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"commit\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"choice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"voted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_appeal\",\"type\":\"uint256\"}],\"name\":\"getVoteCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"winningChoice\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"counts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"tied\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"},{\"internalType\":\"contract WrappedPinakion\",\"name\":\"_pinakion\",\"type\":\"address\"},{\"internalType\":\"contract IRandomAuRa\",\"name\":\"_RNGenerator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minStakingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxDrawingTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_hiddenVotes\",\"type\":\"bool\"},{\"internalType\":\"uint256[4]\",\"name\":\"_courtParameters\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[4]\",\"name\":\"_timesPerPeriod\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256\",\"name\":\"_sortitionSumTreeK\",\"type\":\"uint256\"},{\"internalType\":\"contract IForeignGateway\",\"name\":\"_foreignGateway\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_weth\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"jurors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastDelayedSetStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPhaseChange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockInsolventTransfers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDrawingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStakingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextDelayedSetStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"onApprove\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"onTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phase\",\"outputs\":[{\"internalType\":\"enum xKlerosLiquidV2.Phase\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pinakion\",\"outputs\":[{\"internalType\":\"contract WrappedPinakion\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"proxyPayment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ruling\",\"type\":\"uint256\"}],\"name\":\"rule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_subcourtID\",\"type\":\"uint96\"},{\"internalType\":\"uint128\",\"name\":\"_stake\",\"type\":\"uint128\"}],\"name\":\"setStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_subcourtID\",\"type\":\"uint96\"}],\"name\":\"stakeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDisputes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is an adaption of Mainnet's KlerosLiquid (https://github.com/kleros/kleros/blob/69cfbfb2128c29f1625b3a99a3183540772fda08/contracts/kleros/KlerosLiquid.sol)  for xDai chain. Notice that variables referring to ETH values in this contract, will hold the native token values of the chain on which xKlerosLiquid is deployed.  When this contract gets deployed on xDai chain, ETH variables will hold xDai values.\",\"events\":{\"Draw(address,uint256,uint256,uint256)\":{\"details\":\"Emitted when a juror is drawn.\",\"params\":{\"_address\":\"The drawn address.\",\"_appeal\":\"The appeal the draw is for. 0 is for the first round.\",\"_disputeID\":\"The ID of the dispute.\",\"_voteID\":\"The vote ID.\"}},\"NewPeriod(uint256,uint8)\":{\"details\":\"Emitted when a dispute passes to a new period.\",\"params\":{\"_disputeID\":\"The ID of the dispute.\",\"_period\":\"The new period.\"}},\"NewPhase(uint8)\":{\"details\":\"Emitted when we pass to a new phase.\",\"params\":{\"_phase\":\"The new phase.\"}},\"StakeSet(address,uint256,uint128,uint256)\":{\"details\":\"Emitted when a juror's stake is set.\",\"params\":{\"_address\":\"The address of the juror.\",\"_newTotalStake\":\"The new total stake.\",\"_stake\":\"The new stake.\",\"_subcourtID\":\"The ID of the subcourt at the end of the stake path.\"}},\"TokenAndETHShift(address,uint256,int256,int256)\":{\"details\":\"Emitted when a juror wins or loses tokens and ETH from a dispute.\",\"params\":{\"_ETHAmount\":\"The amount of ETH won or lost.\",\"_address\":\"The juror affected.\",\"_disputeID\":\"The ID of the dispute.\",\"_tokenAmount\":\"The amount of tokens won or lost.\"}}},\"kind\":\"dev\",\"methods\":{\"arbitrationCost(bytes)\":{\"details\":\"Gets the cost of arbitration in a specified subcourt.\",\"params\":{\"_extraData\":\"Additional info about the dispute. We use it to pass the ID of the subcourt to create the dispute in (first 32 bytes) and the minimum number of jurors required (next 32 bytes).\"},\"returns\":{\"cost\":\"The cost.\"}},\"changeForeignGateway(address)\":{\"details\":\"Changes the `foreignGateway` storage variable.\",\"params\":{\"_foreignGateway\":\"The new value for the `foreignGateway` storage variable.\"}},\"changeGovernor(address)\":{\"details\":\"Changes the `governor` storage variable.\",\"params\":{\"_governor\":\"The new value for the `governor` storage variable.\"}},\"changeMaxDrawingTime(uint256)\":{\"details\":\"Changes the `maxDrawingTime` storage variable.\",\"params\":{\"_maxDrawingTime\":\"The new value for the `maxDrawingTime` storage variable.\"}},\"changeMinStakingTime(uint256)\":{\"details\":\"Changes the `minStakingTime` storage variable.\",\"params\":{\"_minStakingTime\":\"The new value for the `minStakingTime` storage variable.\"}},\"changePinakion(address)\":{\"details\":\"Changes the `pinakion` storage variable.\",\"params\":{\"_pinakion\":\"The new value for the `pinakion` storage variable.\"}},\"changeRNGenerator(address)\":{\"details\":\"Changes the `RNGenerator` storage variable.\",\"params\":{\"_RNGenerator\":\"The new value for the `RNGenerator` storage variable.\"}},\"changeSubcourtAlpha(uint96,uint256)\":{\"details\":\"Changes the `alpha` property value of a specified subcourt.\",\"params\":{\"_alpha\":\"The new value for the `alpha` property value.\",\"_subcourtID\":\"The ID of the subcourt.\"}},\"changeSubcourtJurorFee(uint96,uint256)\":{\"details\":\"Changes the `feeForJuror` property value of a specified subcourt.\",\"params\":{\"_feeForJuror\":\"The new value for the `feeForJuror` property value.\",\"_subcourtID\":\"The ID of the subcourt.\"}},\"changeSubcourtJurorsForJump(uint96,uint256)\":{\"details\":\"Changes the `jurorsForCourtJump` property value of a specified subcourt.\",\"params\":{\"_jurorsForCourtJump\":\"The new value for the `jurorsForCourtJump` property value.\",\"_subcourtID\":\"The ID of the subcourt.\"}},\"changeSubcourtMinStake(uint96,uint256)\":{\"details\":\"Changes the `minStake` property value of a specified subcourt. Don't set to a value lower than its parent's `minStake` property value.\",\"params\":{\"_minStake\":\"The new value for the `minStake` property value.\",\"_subcourtID\":\"The ID of the subcourt.\"}},\"changeSubcourtTimesPerPeriod(uint96,uint256[4])\":{\"details\":\"Changes the `timesPerPeriod` property value of a specified subcourt.\",\"params\":{\"_subcourtID\":\"The ID of the subcourt.\",\"_timesPerPeriod\":\"The new value for the `timesPerPeriod` property value.\"}},\"changeWethAddress(address)\":{\"details\":\"Changes the `weth` storage variable.\",\"params\":{\"_weth\":\"The new value for the `weth` storage variable.\"}},\"createDispute(uint256,bytes)\":{\"details\":\"Creates a dispute. Must be called by the arbitrable contract.\",\"params\":{\"_extraData\":\"Additional info about the dispute to be created. We use it to pass the ID of the subcourt to create the dispute in (first 32 bytes) and the minimum number of jurors required (next 32 bytes).\",\"_numberOfChoices\":\"Number of choices to choose from in the dispute to be created.\"},\"returns\":{\"disputeID\":\"The ID of the created dispute.\"}},\"createSubcourt(uint96,bool,uint256,uint256,uint256,uint256,uint256[4],uint256)\":{\"details\":\"Creates a subcourt under a specified parent court.\",\"params\":{\"_alpha\":\"The `alpha` property value of the subcourt.\",\"_feeForJuror\":\"The `feeForJuror` property value of the subcourt.\",\"_hiddenVotes\":\"The `hiddenVotes` property value of the subcourt.\",\"_jurorsForCourtJump\":\"The `jurorsForCourtJump` property value of the subcourt.\",\"_minStake\":\"The `minStake` property value of the subcourt.\",\"_parent\":\"The `parent` property value of the subcourt.\",\"_sortitionSumTreeK\":\"The number of children per node of the subcourt's sortition sum tree.\",\"_timesPerPeriod\":\"The `timesPerPeriod` property value of the subcourt.\"}},\"currentRuling(uint256)\":{\"details\":\"Gets the current ruling of a specified dispute.\",\"params\":{\"_disputeID\":\"The ID of the dispute.\"},\"returns\":{\"ruling\":\"The current ruling.\"}},\"executeDelayedSetStakes(uint256)\":{\"details\":\"Executes the next delayed set stakes.  `O(n)` where `n` is the number of iterations to run.\",\"params\":{\"_iterations\":\"The number of delayed set stakes to execute.\"}},\"executeGovernorProposal(address,uint256,bytes)\":{\"details\":\"Lets the governor call anything on behalf of the contract.\",\"params\":{\"_amount\":\"The value sent with the call.\",\"_data\":\"The data sent with the call.\",\"_destination\":\"The destination of the call.\"}},\"getDispute(uint256)\":{\"details\":\"Gets a specified dispute's non primitive properties.\",\"params\":{\"_disputeID\":\"The ID of the dispute.\"},\"returns\":{\"penaltiesInEachRound\":\"The dispute's amount of tokens collected from penalties in each round.  `O(a)` where  `a` is the number of appeals of the dispute.\",\"repartitionsInEachRound\":\"The dispute's counter of vote reward repartitions made in each round.\",\"tokensAtStakePerJuror\":\"The dispute's required tokens at stake per Juror.\",\"totalFeesForJurors\":\"The dispute's total fees for Jurors.\",\"votesInEachRound\":\"The dispute's counter of votes made in each round.\",\"votesLengths\":\"The dispute's vote length.\"}},\"getJuror(address)\":{\"details\":\"Gets a specified juror's non primitive properties.\",\"params\":{\"_account\":\"The address of the juror.\"},\"returns\":{\"subcourtIDs\":\"The juror's IDs of subcourts where the juror has stake path.\"}},\"getSubcourt(uint96)\":{\"details\":\"Gets a specified subcourt's non primitive properties.\",\"params\":{\"_subcourtID\":\"The ID of the subcourt.\"},\"returns\":{\"children\":\"The subcourt's child court list.\",\"timesPerPeriod\":\"The subcourt's time per period.\"}},\"getVote(uint256,uint256,uint256)\":{\"details\":\"Gets a specified vote for a specified appeal in a specified dispute.\",\"params\":{\"_appeal\":\"The appeal.\",\"_disputeID\":\"The ID of the dispute.\",\"_voteID\":\"The ID of the vote.\"},\"returns\":{\"account\":\"The account for vote.\",\"choice\":\" The choice for vote.\",\"commit\":\" The commit for vote.\",\"voted\":\"True if the account voted, False otherwise.\"}},\"getVoteCounter(uint256,uint256)\":{\"details\":\"Gets the vote counter for a specified appeal in a specified dispute.  Note: This function is only to be used by the interface and it won't work if the number of choices is too high.\",\"params\":{\"_appeal\":\"The appeal.\",\"_disputeID\":\"The ID of the dispute.\"},\"returns\":{\"counts\":\"The count.\",\"tied\":\"Whether the vote tied.  `O(n)` where  `n` is the number of choices of the dispute.\",\"winningChoice\":\"The winning choice.\"}},\"initialize(address,address,address,uint256,uint256,bool,uint256[4],uint256[4],uint256,address,address)\":{\"details\":\"Constructs the KlerosLiquid contract.\",\"params\":{\"_RNGenerator\":\"The address of the random number generator contract.\",\"_courtParameters\":\"MinStake, alpha, feeForJuror and jurorsForCourtJump respectively.\",\"_foreignGateway\":\"Foreign gateway on xDai.\",\"_governor\":\"The governor's address.\",\"_hiddenVotes\":\"The `hiddenVotes` property value of the general court.\",\"_maxDrawingTime\":\"The maximum time that the drawing phase should last.\",\"_minStakingTime\":\"The minimum time that the staking phase should last.\",\"_pinakion\":\"The address of the token contract.\",\"_sortitionSumTreeK\":\"The number of children per node of the general court's sortition sum tree.\",\"_timesPerPeriod\":\"The `timesPerPeriod` property value of the general court.\",\"_weth\":\"Weth contract.\"}},\"onApprove(address,address,uint256)\":{\"details\":\"Notifies the controller about an approval allowing the controller to react if desired.\",\"params\":{\"_amount\":\"The amount in the `approve()` call.\",\"_owner\":\"The address that calls `approve()`.\",\"_spender\":\"The spender in the `approve()` call.\"},\"returns\":{\"allowed\":\"Whether the operation should be allowed or not.\"}},\"onTransfer(address,address,uint256)\":{\"details\":\"Notifies the controller about a token transfer allowing the controller to react if desired.\",\"params\":{\"_amount\":\"The amount of the transfer.\",\"_from\":\"The origin of the transfer.\",\"_to\":\"The destination of the transfer.\"},\"returns\":{\"allowed\":\"Whether the operation should be allowed or not.\"}},\"proxyPayment(address)\":{\"details\":\"DEPRECATED. Called when `_owner` sends ETH to the Wrapped Token contract.\",\"params\":{\"_owner\":\"The address that sent the ETH to create tokens.\"},\"returns\":{\"allowed\":\"Whether the operation should be allowed or not.\"}},\"rule(uint256,uint256)\":{\"details\":\"Receive the ruling from foreign gateway which technically is an arbitrator of this contract.\",\"params\":{\"_disputeID\":\"ID of the dispute.\",\"_ruling\":\"Ruling given by V2 court and relayed by foreign gateway.\"}},\"setStake(uint96,uint128)\":{\"details\":\"Sets the caller's stake in a subcourt.\",\"params\":{\"_stake\":\"The new stake.\",\"_subcourtID\":\"The ID of the subcourt.\"}},\"stakeOf(address,uint96)\":{\"details\":\"Gets the stake of a specified juror in a specified subcourt.\",\"params\":{\"_account\":\"The address of the juror.\",\"_subcourtID\":\"The ID of the subcourt.\"},\"returns\":{\"stake\":\"The stake.\"}}},\"title\":\"xKlerosLiquidV2\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol\":\"xKlerosLiquidV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@kleros/vea-contracts/interfaces/IFastBridgeReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n *  @authors: [@jaybuidl, @shotaronowhere, @hrishibhat]\\n *  @reviewers: []\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\npragma solidity ^0.8.0;\\n\\ninterface IFastBridgeReceiver {\\n    // ************************************* //\\n    // *              Events               * //\\n    // ************************************* //\\n\\n    /**\\n     * @dev The Fast Bridge participants watch for these events to decide if a challenge should be submitted.\\n     * @param _epoch The epoch for which the the claim was made.\\n     * @param _batchMerkleRoot The timestamp of the claim creation.\\n     */\\n    event ClaimReceived(uint256 indexed _epoch, bytes32 indexed _batchMerkleRoot);\\n\\n    /**\\n     * @dev This event indicates that `sendSafeFallback()` should be called on the sending side.\\n     * @param _epoch The epoch associated with the challenged claim.\\n     */\\n    event ClaimChallenged(uint256 indexed _epoch);\\n\\n    /**\\n     * @dev This events indicates that optimistic verification has succeeded. The messages are ready to be relayed.\\n     * @param _epoch The epoch associated with the batch.\\n     * @param _success The success of the optimistic verification.\\n     */\\n    event BatchVerified(uint256 indexed _epoch, bool _success);\\n\\n    /**\\n     * @dev This event indicates that the batch has been received via the Safe Bridge.\\n     * @param _epoch The epoch associated with the batch.\\n     * @param _isBridgerHonest Whether the bridger made an honest claim.\\n     * @param _isChallengerHonest Whether the bridger made an honest challenge.\\n     */\\n    event BatchSafeVerified(uint256 indexed _epoch, bool _isBridgerHonest, bool _isChallengerHonest);\\n\\n    /**\\n     * @dev This event indicates that the claim deposit has been withdrawn.\\n     * @param _epoch The epoch associated with the batch.\\n     * @param _bridger The recipient of the claim deposit.\\n     */\\n    event ClaimDepositWithdrawn(uint256 indexed _epoch, address indexed _bridger);\\n\\n    /**\\n     * @dev This event indicates that the challenge deposit has been withdrawn.\\n     * @param _epoch The epoch associated with the batch.\\n     * @param _challenger The recipient of the challenge deposit.\\n     */\\n    event ChallengeDepositWithdrawn(uint256 indexed _epoch, address indexed _challenger);\\n\\n    /**\\n     * @dev This event indicates that a message has been relayed for the batch in this `_epoch`.\\n     * @param _epoch The epoch associated with the batch.\\n     * @param _nonce The nonce of the message that was relayed.\\n     */\\n    event MessageRelayed(uint256 indexed _epoch, uint256 indexed _nonce);\\n\\n    // ************************************* //\\n    // *        Function Modifiers         * //\\n    // ************************************* //\\n\\n    /**\\n     * @dev Submit a claim about the `_batchMerkleRoot` for the latests completed Fast bridge epoch and submit a deposit. The `_batchMerkleRoot` should match the one on the sending side otherwise the sender will lose his deposit.\\n     * @param _epoch The epoch of the claim to claim.\\n     * @param _batchMerkleRoot The hash claimed for the ticket.\\n     */\\n    function claim(uint256 _epoch, bytes32 _batchMerkleRoot) external payable;\\n\\n    /**\\n     * @dev Submit a challenge for the claim of the current epoch's Fast Bridge batch merkleroot state and submit a deposit. The `batchMerkleRoot` in the claim already made for the last finalized epoch should be different from the one on the sending side, otherwise the sender will lose his deposit.\\n     * @param _epoch The epoch of the claim to challenge.\\n     */\\n    function challenge(uint256 _epoch) external payable;\\n\\n    /**\\n     * @dev Resolves the optimistic claim for '_epoch'.\\n     * @param _epoch The epoch of the optimistic claim.\\n     */\\n    function verifyBatch(uint256 _epoch) external;\\n\\n    /**\\n     * @dev Verifies merkle proof for the given message and associated nonce for the most recent possible epoch and relays the message.\\n     * @param _epoch The epoch in which the message was batched by the bridge.\\n     * @param _proof The merkle proof to prove the membership of the message and nonce in the merkle tree for the epoch.\\n     * @param _message The data on the cross-domain chain for the message.\\n     */\\n    function verifyAndRelayMessage(\\n        uint256 _epoch,\\n        bytes32[] calldata _proof,\\n        bytes calldata _message\\n    ) external;\\n\\n    /**\\n     * @dev Sends the deposit back to the Bridger if their claim is not successfully challenged. Includes a portion of the Challenger's deposit if unsuccessfully challenged.\\n     * @param _epoch The epoch associated with the claim deposit to withraw.\\n     */\\n    function withdrawClaimDeposit(uint256 _epoch) external;\\n\\n    /**\\n     * @dev Sends the deposit back to the Challenger if his challenge is successful. Includes a portion of the Bridger's deposit.\\n     * @param _epoch The epoch associated with the challenge deposit to withraw.\\n     */\\n    function withdrawChallengeDeposit(uint256 _epoch) external;\\n\\n    // ************************************* //\\n    // *           Public Views            * //\\n    // ************************************* //\\n\\n    /**\\n     * @dev Returns the `start` and `end` time of challenge period for this `epoch`.\\n     * @param _epoch The epoch of the claim to request the challenge period.\\n     * @return start The start time of the challenge period.\\n     * @return end The end time of the challenge period.\\n     */\\n    function claimChallengePeriod(uint256 _epoch) external view returns (uint256 start, uint256 end);\\n\\n    /**\\n     * @dev Returns the epoch period.\\n     */\\n    function epochPeriod() external view returns (uint256 epochPeriod);\\n\\n    /**\\n     * @dev Returns the challenge period.\\n     */\\n    function challengePeriod() external view returns (uint256 challengePeriod);\\n}\\n\",\"keccak256\":\"0xff909a62e9a08540dafcd08c779a64917ed1e44be52d5a225ff9149ff95909e8\",\"license\":\"MIT\"},\"@kleros/vea-contracts/interfaces/IReceiverGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n *  @authors: [@jaybuidl, @shotaronowhere]\\n *  @reviewers: []\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IFastBridgeReceiver.sol\\\";\\n\\ninterface IReceiverGateway {\\n    function fastBridgeReceiver() external view returns (IFastBridgeReceiver);\\n\\n    function senderChainID() external view returns (uint256);\\n\\n    function senderGateway() external view returns (address);\\n}\\n\",\"keccak256\":\"0xfa82fbd575c462ad6dffa18c67eb097a4c5088715ae956a836726aafa4be0f90\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x3798da9e212cd00a7cda94ddb5a9721171a718e89c500d8901f810e0e37fa74e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"src/arbitration/IArbitrable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8;\\n\\nimport \\\"./IArbitrator.sol\\\";\\n\\n/**\\n * @title IArbitrable\\n * Arbitrable interface. Note that this interface follows the ERC-792 standard.\\n * When developing arbitrable contracts, we need to:\\n * - Define the action taken when a ruling is received by the contract.\\n * - Allow dispute creation. For this a function must call arbitrator.createDispute{value: _fee}(_choices,_extraData);\\n */\\ninterface IArbitrable {\\n    /**\\n     * @dev To be raised when a ruling is given.\\n     * @param _arbitrator The arbitrator giving the ruling.\\n     * @param _disputeID ID of the dispute in the Arbitrator contract.\\n     * @param _ruling The ruling which was given.\\n     */\\n    event Ruling(IArbitrator indexed _arbitrator, uint256 indexed _disputeID, uint256 _ruling);\\n\\n    /**\\n     * @dev Give a ruling for a dispute. Must be called by the arbitrator.\\n     * The purpose of this function is to ensure that the address calling it has the right to rule on the contract.\\n     * @param _disputeID ID of the dispute in the Arbitrator contract.\\n     * @param _ruling Ruling given by the arbitrator. Note that 0 is reserved for \\\"Not able/wanting to make a decision\\\".\\n     */\\n    function rule(uint256 _disputeID, uint256 _ruling) external;\\n}\\n\",\"keccak256\":\"0x8f1c36f6206566f0790448a654190e68a43a1dd2e039c2b77e7455d3fcd599a4\",\"license\":\"MIT\"},\"src/arbitration/IArbitrator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8;\\n\\nimport \\\"./IArbitrable.sol\\\";\\n\\n/**\\n * @title Arbitrator\\n * Arbitrator interface that implements the new arbitration standard.\\n * Unlike the ERC-792 this standard doesn't have anything related to appeals, so each arbitrator can implement an appeal system that suits it the most.\\n * When developing arbitrator contracts we need to:\\n * - Define the functions for dispute creation (createDispute). Don't forget to store the arbitrated contract and the disputeID (which should be unique, may nbDisputes).\\n * - Define the functions for cost display (arbitrationCost).\\n * - Allow giving rulings. For this a function must call arbitrable.rule(disputeID, ruling).\\n */\\ninterface IArbitrator {\\n    /**\\n     * @dev To be emitted when a dispute is created.\\n     * @param _disputeID ID of the dispute.\\n     * @param _arbitrable The contract which created the dispute.\\n     */\\n    event DisputeCreation(uint256 indexed _disputeID, IArbitrable indexed _arbitrable);\\n\\n    /**\\n     * @dev To be raised when a ruling is given.\\n     * @param _arbitrable The arbitrable receiving the ruling.\\n     * @param _disputeID ID of the dispute in the Arbitrator contract.\\n     * @param _ruling The ruling which was given.\\n     */\\n    event Ruling(IArbitrable indexed _arbitrable, uint256 indexed _disputeID, uint256 _ruling);\\n\\n    /**\\n     * @dev Create a dispute. Must be called by the arbitrable contract.\\n     * Must pay at least arbitrationCost(_extraData).\\n     * @param _choices Amount of choices the arbitrator can make in this dispute.\\n     * @param _extraData Can be used to give additional info on the dispute to be created.\\n     * @return disputeID ID of the dispute created.\\n     */\\n    function createDispute(uint256 _choices, bytes calldata _extraData) external payable returns (uint256 disputeID);\\n\\n    /**\\n     * @dev Compute the cost of arbitration. It is recommended not to increase it often, as it can be highly time and gas consuming for the arbitrated contracts to cope with fee augmentation.\\n     * @param _extraData Can be used to give additional info on the dispute to be created.\\n     * @return cost Required cost of arbitration.\\n     */\\n    function arbitrationCost(bytes calldata _extraData) external view returns (uint256 cost);\\n}\\n\",\"keccak256\":\"0x2264bc7cb975d89776b9bf3e35cecd4dec7d601604601ca4822d8bfc0886c379\",\"license\":\"MIT\"},\"src/gateway/interfaces/IForeignGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n *  @authors: [@jaybuidl, @shotaronowhere, @shalzz]\\n *  @reviewers: []\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../arbitration/IArbitrator.sol\\\";\\nimport \\\"@kleros/vea-contracts/interfaces/IReceiverGateway.sol\\\";\\n\\ninterface IForeignGateway is IArbitrator, IReceiverGateway {\\n    /**\\n     * Relay the rule call from the home gateway to the arbitrable.\\n     */\\n    function relayRule(address _messageSender, bytes32 _disputeHash, uint256 _ruling, address _forwarder) external;\\n\\n    function withdrawFees(bytes32 _disputeHash) external;\\n\\n    // For cross-chain Evidence standard\\n    function disputeHashToForeignID(bytes32 _disputeHash) external view returns (uint256);\\n\\n    function createDisputeERC20(\\n        uint256 _choices,\\n        bytes calldata _extraData,\\n        uint256 _amount\\n    ) external returns (uint256 disputeID);\\n}\\n\",\"keccak256\":\"0x4cfc88d2d7cf211ce9a1f3c991f093baefa026784185da2319d566051d0c8c43\",\"license\":\"MIT\"},\"src/kleros-v1/interfaces/ITokenController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8;\\n\\n/**\\n * @dev The token controller contract must implement these functions. See https://github.com/Giveth/minime/blob/master/contracts/TokenController.sol\\n */\\ninterface ITokenController {\\n    /**\\n     * @notice Called when `_owner` sends ether to the MiniMe Token contract\\n     * @param _owner The address that sent the ether to create tokens\\n     * @return True if the ether is accepted, false if it throws\\n     */\\n    function proxyPayment(address _owner) external payable returns (bool);\\n\\n    /**\\n     * @notice Notifies the controller about a token transfer allowing the controller to react if desired\\n     * @param _from The origin of the transfer\\n     * @param _to The destination of the transfer\\n     * @param _amount The amount of the transfer\\n     * @return False if the controller does not authorize the transfer\\n     */\\n    function onTransfer(address _from, address _to, uint256 _amount) external returns (bool);\\n\\n    /**\\n     * @notice Notifies the controller about an approval allowing the controller to react if desired\\n     * @param _owner The address that calls `approve()`\\n     * @param _spender The spender in the `approve()` call\\n     * @param _amount The amount in the `approve()` call\\n     * @return False if the controller does not authorize the approval\\n     */\\n    function onApprove(address _owner, address _spender, uint256 _amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x872b17903608262164b43c7304e9fe1d6ae631070ffd2c911e7508d7f7cf7c91\",\"license\":\"MIT\"},\"src/kleros-v1/kleros-liquid-xdai/WrappedPinakion.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"../interfaces/ITokenController.sol\\\";\\nimport \\\"./interfaces/ITokenBridge.sol\\\";\\nimport \\\"./interfaces/IERC677.sol\\\";\\n\\ncontract WrappedPinakion is Initializable {\\n    using SafeMath for uint256;\\n\\n    /* Events */\\n\\n    /**\\n     * @notice Emitted when `value` tokens are moved from one account (`from`) to another (`to`).\\n     * @dev Notice that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @notice Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /* Storage */\\n\\n    mapping(address => uint256) private balances;\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /// @notice Total supply of the token. Equals the total xPinakion deposit into the contract.\\n    uint256 public totalSupply;\\n\\n    /// @notice Name of the token.\\n    string public name;\\n\\n    /// @notice Symbol of the token.\\n    string public symbol;\\n\\n    /// @notice Number of decimals of the token.\\n    uint8 public decimals;\\n\\n    /// @notice The token's controller.\\n    address public controller;\\n\\n    /// @notice Bridged PNK on xDai to be wrapped. This token is upgradeable.\\n    IERC677 public xPinakion;\\n\\n    /// @notice xDai Token Bridge. The Token Bridge is upgradeable.\\n    ITokenBridge public tokenBridge;\\n\\n    /* Modifiers */\\n\\n    /// @dev Verifies that the sender has ability to modify controlled parameters.\\n    modifier onlyController() {\\n        require(controller == msg.sender, \\\"The caller is not the controller.\\\");\\n        _;\\n    }\\n\\n    /* Initializer */\\n\\n    /**\\n     * @dev Constructor.\\n     * @param _name for the wrapped PNK on the home chain.\\n     * @param _symbol for wrapped PNK ticker on the home chain.\\n     * @param _xPinakion the home PNK contract which is already bridged to the foreign PNK contract.\\n     * @param _tokenBridge the TokenBridge contract.\\n     */\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        IERC677 _xPinakion,\\n        ITokenBridge _tokenBridge\\n    ) public initializer {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = 18;\\n        xPinakion = _xPinakion;\\n        tokenBridge = _tokenBridge;\\n        controller = msg.sender;\\n    }\\n\\n    /* External */\\n\\n    /**\\n     * @notice Changes `controller` to `_controller`.\\n     * @param _controller The new controller of the contract\\n     */\\n    function changeController(address _controller) external onlyController {\\n        controller = _controller;\\n    }\\n\\n    /**\\n     * @notice Converts bridged PNK (xPinakion) into wrapped PNK which can be staked in KlerosLiquid.\\n     * @param _amount The amount of wrapped pinakions to mint.\\n     */\\n    function deposit(uint256 _amount) external {\\n        _mint(msg.sender, _amount);\\n        require(\\n            xPinakion.transferFrom(msg.sender, address(this), _amount),\\n            \\\"Sender does not have enough approved funds.\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice IERC20 Receiver functionality.\\n     * @dev Converts bridged PNK (xPinakion) into wrapped PNK which can be staked in KlerosLiquid.\\n     * If the tokenBridge is calling this function, then this contract has already received\\n     * the xPinakion tokens. Notice that the Home bridge calls onTokenBridge as a result of\\n     * someone invoking `relayTokensAndCall()` on the Foreign bridge contract.\\n     * @param _token The token address the _amount belongs to.\\n     * @param _amount The amount of wrapped PNK to mint.\\n     * @param _data Calldata containing the address of the recipient.\\n     * Notice that the address has to be padded to the right 32 bytes.\\n     */\\n    function onTokenBridged(address _token, uint256 _amount, bytes calldata _data) external {\\n        require(msg.sender == address(tokenBridge), \\\"Sender not authorized.\\\");\\n        require(_token == address(xPinakion), \\\"Token bridged is not xPinakion.\\\");\\n\\n        address recipient;\\n        assembly {\\n            recipient := calldataload(0x84)\\n        }\\n        _mint(recipient, _amount);\\n    }\\n\\n    /**\\n     * @notice Converts wrapped PNK back into bridged PNK (xPinakion).\\n     * @param _amount The amount of bridged PNK to withdraw.\\n     */\\n    function withdraw(uint256 _amount) external {\\n        _burn(_amount);\\n        require(xPinakion.transfer(msg.sender, _amount), \\\"The `transfer` function must not fail.\\\");\\n    }\\n\\n    /**\\n     * @notice Converts wrapped PNK back into PNK using the Token Bridge.\\n     * @dev This function is not strictly needed, but it provides a good UX to users who want to get their Mainnet's PNK back.\\n     * What normally takes 3 transactions, here is done in one go.\\n     * Notice that the PNK have to be claimed on Mainnet's TokenBridge by the receiver.\\n     * @param _amount The amount of PNK to withdraw.\\n     * @param _receiver The address which will receive the PNK back in the foreign chain.\\n     */\\n    function withdrawAndConvertToPNK(uint256 _amount, address _receiver) external {\\n        _burn(_amount);\\n        // Using approve is safe here, because this contract approves the bridge to spend the tokens and triggers the relay immediately.\\n        xPinakion.approve(address(tokenBridge), _amount);\\n        tokenBridge.relayTokens(xPinakion, _receiver, _amount);\\n    }\\n\\n    /**\\n     * @notice Moves `_amount` tokens from the caller's account to `_recipient`.\\n     * @param _recipient The entity receiving the funds.\\n     * @param _amount The amount to tranfer in base units.\\n     * @return True on success.\\n     */\\n    function transfer(address _recipient, uint256 _amount) public returns (bool) {\\n        if (isContract(controller)) {\\n            require(\\n                ITokenController(controller).onTransfer(msg.sender, _recipient, _amount),\\n                \\\"Token controller rejects transfer.\\\"\\n            );\\n        }\\n        balances[msg.sender] = balances[msg.sender].sub(_amount); // ERC20: transfer amount exceeds balance\\n        balances[_recipient] = balances[_recipient].add(_amount);\\n        emit Transfer(msg.sender, _recipient, _amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Moves `_amount` tokens from `_sender` to `_recipient` using the\\n     * allowance mechanism. `_amount` is then deducted from the caller's allowance.\\n     * @param _sender The entity to take the funds from.\\n     * @param _recipient The entity receiving the funds.\\n     * @param _amount The amount to tranfer in base units.\\n     * @return True on success.\\n     */\\n    function transferFrom(address _sender, address _recipient, uint256 _amount) public returns (bool) {\\n        if (isContract(controller)) {\\n            require(\\n                ITokenController(controller).onTransfer(_sender, _recipient, _amount),\\n                \\\"Token controller rejects transfer.\\\"\\n            );\\n        }\\n\\n        /** The controller of this contract can move tokens around at will,\\n         *  this is important to recognize! Confirm that you trust the\\n         *  controller of this contract, which in most situations should be\\n         *  another open source smart contract or 0x0.\\n         */\\n        if (msg.sender != controller) {\\n            allowance[_sender][msg.sender] = allowance[_sender][msg.sender].sub(_amount); // ERC20: transfer amount exceeds allowance.\\n        }\\n\\n        balances[_sender] = balances[_sender].sub(_amount); // ERC20: transfer amount exceeds balance\\n        balances[_recipient] = balances[_recipient].add(_amount);\\n        emit Transfer(_sender, _recipient, _amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Approves `_spender` to spend `_amount`.\\n     * @param _spender The entity allowed to spend funds.\\n     * @param _amount The amount of base units the entity will be allowed to spend.\\n     * @return True on success.\\n     */\\n    function approve(address _spender, uint256 _amount) public returns (bool) {\\n        // Alerts the token controller of the approve function call\\n        if (isContract(controller)) {\\n            require(\\n                ITokenController(controller).onApprove(msg.sender, _spender, _amount),\\n                \\\"Token controller does not approve.\\\"\\n            );\\n        }\\n\\n        allowance[msg.sender][_spender] = _amount;\\n        emit Approval(msg.sender, _spender, _amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Increases the `_spender` allowance by `_addedValue`.\\n     * @param _spender The entity allowed to spend funds.\\n     * @param _addedValue The amount of extra base units the entity will be allowed to spend.\\n     * @return True on success.\\n     */\\n    function increaseAllowance(address _spender, uint256 _addedValue) public returns (bool) {\\n        uint256 newAllowance = allowance[msg.sender][_spender].add(_addedValue);\\n        // Alerts the token controller of the approve function call\\n        if (isContract(controller)) {\\n            require(\\n                ITokenController(controller).onApprove(msg.sender, _spender, newAllowance),\\n                \\\"Token controller does not approve.\\\"\\n            );\\n        }\\n\\n        allowance[msg.sender][_spender] = newAllowance;\\n        emit Approval(msg.sender, _spender, newAllowance);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Decreases the `_spender` allowance by `_subtractedValue`.\\n     * @param _spender The entity whose spending allocation will be reduced.\\n     * @param _subtractedValue The reduction of spending allocation in base units.\\n     * @return True on success.\\n     */\\n    function decreaseAllowance(address _spender, uint256 _subtractedValue) public returns (bool) {\\n        uint256 newAllowance = allowance[msg.sender][_spender].sub(_subtractedValue); // ERC20: decreased allowance below zero\\n        // Alerts the token controller of the approve function call\\n        if (isContract(controller)) {\\n            require(\\n                ITokenController(controller).onApprove(msg.sender, _spender, newAllowance),\\n                \\\"Token controller does not approve.\\\"\\n            );\\n        }\\n\\n        allowance[msg.sender][_spender] = newAllowance;\\n        emit Approval(msg.sender, _spender, newAllowance);\\n        return true;\\n    }\\n\\n    /* Internal */\\n\\n    /**\\n     * @dev Internal function that mints an amount of the token and assigns it to\\n     * an account. This encapsulates the modification of balances such that the\\n     * proper events are emitted.\\n     * @param _recipient The address which will receive the minted tokens.\\n     * @param _amount The amount that will be created.\\n     */\\n    function _mint(address _recipient, uint256 _amount) internal {\\n        totalSupply = totalSupply.add(_amount);\\n        balances[_recipient] = balances[_recipient].add(_amount);\\n        emit Transfer(address(0x0), _recipient, _amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `_amount` tokens from the caller. Cannot burn locked tokens.\\n     * @param _amount The quantity of tokens to burn in base units.\\n     */\\n    function _burn(uint256 _amount) internal {\\n        if (isContract(controller)) {\\n            require(\\n                ITokenController(controller).onTransfer(msg.sender, address(0x0), _amount),\\n                \\\"Token controller rejects transfer.\\\"\\n            );\\n        }\\n        balances[msg.sender] = balances[msg.sender].sub(_amount); // ERC20: burn amount exceeds balance\\n        totalSupply = totalSupply.sub(_amount);\\n        emit Transfer(msg.sender, address(0x0), _amount);\\n    }\\n\\n    /**\\n     * @dev Internal function to determine if an address is a contract.\\n     * @param _addr The address being queried.\\n     * @return True if `_addr` is a contract.\\n     */\\n    function isContract(address _addr) internal view returns (bool) {\\n        uint256 size;\\n        if (_addr == address(0)) return false;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return size > 0;\\n    }\\n\\n    /* Getters */\\n\\n    /**\\n     * @dev Gets the balance of the specified address.\\n     * @param _owner The address to query the balance of.\\n     * @return uint256 value representing the amount owned by the passed address.\\n     */\\n    function balanceOf(address _owner) public view returns (uint256) {\\n        return balances[_owner];\\n    }\\n}\\n\",\"keccak256\":\"0x1cdaf0dd439866cb5029d3299bd3bb7412c4d55aeafebdd168a60914da741606\",\"license\":\"MIT\"},\"src/kleros-v1/kleros-liquid-xdai/interfaces/IERC677.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8;\\n\\ninterface IERC677 {\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\\n\\n    function approve(address _spender, uint256 _value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x901e298088578c3333807574c52d2d288a1a1036531bd85168f9505cb85168e7\",\"license\":\"MIT\"},\"src/kleros-v1/kleros-liquid-xdai/interfaces/IRandomAuRa.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8;\\n\\ninterface IRandomAuRa {\\n    function currentSeed() external view returns (uint256);\\n\\n    function isCommitPhase() external view returns (bool);\\n\\n    function nextCommitPhaseStartBlock() external view returns (uint256);\\n\\n    function collectRoundLength() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x0fcb472d7f826d65845caa8683bb25159ae0ce4bbc03fe1569af7a65dca7398d\",\"license\":\"MIT\"},\"src/kleros-v1/kleros-liquid-xdai/interfaces/ITokenBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8;\\n\\nimport \\\"./IERC677.sol\\\";\\n\\ninterface ITokenBridge {\\n    function relayTokens(IERC677 token, address _receiver, uint256 _value) external;\\n}\\n\",\"keccak256\":\"0x8054fe008a2a2473ab24168068e9207b54bc0ac9a6de31899f5da62ef1a85805\",\"license\":\"MIT\"},\"src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IArbitrator, IArbitrable} from \\\"../../arbitration/IArbitrator.sol\\\";\\nimport {ITokenController} from \\\"../interfaces/ITokenController.sol\\\";\\nimport {WrappedPinakion} from \\\"./WrappedPinakion.sol\\\";\\nimport {IRandomAuRa} from \\\"./interfaces/IRandomAuRa.sol\\\";\\n\\nimport {SortitionSumTreeFactory} from \\\"../../libraries/SortitionSumTreeFactory.sol\\\";\\nimport \\\"../../gateway/interfaces/IForeignGateway.sol\\\";\\n\\n/**\\n *  @title xKlerosLiquidV2\\n *  @dev This contract is an adaption of Mainnet's KlerosLiquid (https://github.com/kleros/kleros/blob/69cfbfb2128c29f1625b3a99a3183540772fda08/contracts/kleros/KlerosLiquid.sol)\\n *  for xDai chain. Notice that variables referring to ETH values in this contract, will hold the native token values of the chain on which xKlerosLiquid is deployed.\\n *  When this contract gets deployed on xDai chain, ETH variables will hold xDai values.\\n */\\ncontract xKlerosLiquidV2 is Initializable, ITokenController, IArbitrator {\\n    /* Enums */\\n\\n    // General\\n    enum Phase {\\n        staking, // Stake sum trees can be updated. Pass after `minStakingTime` passes and there is at least one dispute without jurors.\\n        generating, // Waiting for a random number. Pass as soon as it is ready.\\n        drawing // Jurors can be drawn. Pass after all disputes have jurors or `maxDrawingTime` passes.\\n    }\\n\\n    // Dispute\\n    enum Period {\\n        evidence, // Evidence can be submitted. This is also when drawing has to take place.\\n        commit, // Jurors commit a hashed vote. This is skipped for courts without hidden votes.\\n        vote, // Jurors reveal/cast their vote depending on whether the court has hidden votes or not.\\n        appeal, // The dispute can be appealed.\\n        execution // Tokens are redistributed and the ruling is executed.\\n    }\\n\\n    /* Structs */\\n\\n    // General\\n    struct Court {\\n        uint96 parent; // The parent court.\\n        uint256[] children; // List of child courts.\\n        bool hiddenVotes; // Whether to use commit and reveal or not.\\n        uint256 minStake; // Minimum tokens needed to stake in the court.\\n        uint256 alpha; // Basis point of tokens that are lost when incoherent.\\n        uint256 feeForJuror; // Arbitration fee paid per juror.\\n        // The appeal after the one that reaches this number of jurors will go to the parent court if any, otherwise, no more appeals are possible.\\n        uint256 jurorsForCourtJump;\\n        uint256[4] timesPerPeriod; // The time allotted to each dispute period in the form `timesPerPeriod[period]`.\\n    }\\n    struct DelayedSetStake {\\n        address account; // The address of the juror.\\n        uint96 subcourtID; // The ID of the subcourt.\\n        uint128 stake; // The new stake.\\n    }\\n\\n    // Dispute\\n    struct Vote {\\n        address account; // The address of the juror.\\n        bytes32 commit; // The commit of the juror. For courts with hidden votes.\\n        uint256 choice; // The choice of the juror.\\n        bool voted; // True if the vote has been cast or revealed, false otherwise.\\n    }\\n    struct VoteCounter {\\n        // The choice with the most votes. Note that in the case of a tie, it is the choice that reached the tied number of votes first.\\n        uint256 winningChoice;\\n        mapping(uint256 => uint256) counts; // The sum of votes for each choice in the form `counts[choice]`.\\n        bool tied; // True if there is a tie, false otherwise.\\n    }\\n    struct Dispute {\\n        // Note that appeal `0` is equivalent to the first round of the dispute.\\n        uint96 subcourtID; // The ID of the subcourt the dispute is in.\\n        IArbitrable arbitrated; // The arbitrated arbitrable contract.\\n        // The number of choices jurors have when voting. This does not include choice `0` which is reserved for \\\"refuse to arbitrate\\\"/\\\"no ruling\\\".\\n        uint256 numberOfChoices;\\n        Period period; // The current period of the dispute.\\n        uint256 lastPeriodChange; // The last time the period was changed.\\n        // The votes in the form `votes[appeal][voteID]`. On each round, a new list is pushed and packed with as many empty votes as there are draws. We use `dispute.votes.length` to get the number of appeals plus 1 for the first round.\\n        Vote[][] votes;\\n        VoteCounter[] voteCounters; // The vote counters in the form `voteCounters[appeal]`.\\n        uint256[] tokensAtStakePerJuror; // The amount of tokens at stake for each juror in the form `tokensAtStakePerJuror[appeal]`.\\n        uint256[] totalFeesForJurors; // The total juror fees paid in the form `totalFeesForJurors[appeal]`.\\n        uint256 drawsInRound; // A counter of draws made in the current round.\\n        uint256 commitsInRound; // A counter of commits made in the current round.\\n        uint256[] votesInEachRound; // A counter of votes made in each round in the form `votesInEachRound[appeal]`.\\n        // A counter of vote reward repartitions made in each round in the form `repartitionsInEachRound[appeal]`.\\n        uint256[] repartitionsInEachRound;\\n        uint256[] penaltiesInEachRound; // The amount of tokens collected from penalties in each round in the form `penaltiesInEachRound[appeal]`.\\n        bool ruled; // True if the ruling has been executed, false otherwise.\\n    }\\n\\n    // Juror\\n    struct Juror {\\n        // The IDs of subcourts where the juror has stake path ends. A stake path is a path from the general court to a court the juror directly staked in using `_setStake`.\\n        uint96[] subcourtIDs;\\n        uint256 stakedTokens; // The juror's total amount of tokens staked in subcourts.\\n        uint256 lockedTokens; // The juror's total amount of tokens locked in disputes.\\n    }\\n\\n    /* Events */\\n\\n    /** @dev Emitted when we pass to a new phase.\\n     *  @param _phase The new phase.\\n     */\\n    event NewPhase(Phase _phase);\\n\\n    /** @dev Emitted when a dispute passes to a new period.\\n     *  @param _disputeID The ID of the dispute.\\n     *  @param _period The new period.\\n     */\\n    event NewPeriod(uint256 indexed _disputeID, Period _period);\\n\\n    /** @dev Emitted when a juror's stake is set.\\n     *  @param _address The address of the juror.\\n     *  @param _subcourtID The ID of the subcourt at the end of the stake path.\\n     *  @param _stake The new stake.\\n     *  @param _newTotalStake The new total stake.\\n     */\\n    event StakeSet(address indexed _address, uint256 _subcourtID, uint128 _stake, uint256 _newTotalStake);\\n\\n    /** @dev Emitted when a juror is drawn.\\n     *  @param _address The drawn address.\\n     *  @param _disputeID The ID of the dispute.\\n     *  @param _appeal The appeal the draw is for. 0 is for the first round.\\n     *  @param _voteID The vote ID.\\n     */\\n    event Draw(address indexed _address, uint256 indexed _disputeID, uint256 _appeal, uint256 _voteID);\\n\\n    /** @dev Emitted when a juror wins or loses tokens and ETH from a dispute.\\n     *  @param _address The juror affected.\\n     *  @param _disputeID The ID of the dispute.\\n     *  @param _tokenAmount The amount of tokens won or lost.\\n     *  @param _ETHAmount The amount of ETH won or lost.\\n     */\\n    event TokenAndETHShift(address indexed _address, uint256 indexed _disputeID, int _tokenAmount, int _ETHAmount);\\n\\n    /* Storage */\\n\\n    // General Constants\\n    uint256 public constant MAX_STAKE_PATHS = 4; // The maximum number of stake paths a juror can have.\\n    uint256 public constant MIN_JURORS = 3; // The global default minimum number of jurors in a dispute.\\n    uint256 public constant NON_PAYABLE_AMOUNT = (2 ** 256 - 2) / 2; // An amount higher than the supply of ETH.\\n    uint256 public constant ALPHA_DIVISOR = 1e4; // The number to divide `Court.alpha` by.\\n    // General Contracts\\n    address public governor; // The governor of the contract.\\n    WrappedPinakion public pinakion; // The Pinakion token contract.\\n    IRandomAuRa public RNGenerator; // The random number generator contract.\\n    // General Dynamic\\n    Phase public phase; // The current phase.\\n    uint256 public lastPhaseChange; // The last time the phase was changed.\\n    uint256 public disputesWithoutJurors; // The number of disputes that have not finished drawing jurors.\\n    // The block number to get the next random number from. Used so there is at least a 1 block difference from the staking phase.\\n    uint256 public RNBlock;\\n    uint256 public RN; // The current random number.\\n    uint256 public minStakingTime; // The minimum staking time.\\n    uint256 public maxDrawingTime; // The maximum drawing time.\\n    // True if insolvent (`balance < stakedTokens || balance < lockedTokens`) token transfers should be blocked. Used to avoid blocking penalties.\\n    bool public lockInsolventTransfers;\\n    // General Storage\\n    Court[] public courts; // The subcourts.\\n    using SortitionSumTreeFactory for SortitionSumTreeFactory.SortitionSumTrees; // Use library functions for sortition sum trees.\\n    SortitionSumTreeFactory.SortitionSumTrees internal sortitionSumTrees; // The sortition sum trees.\\n    // The delayed calls to `_setStake`. Used to schedule `_setStake`s when not in the staking phase.\\n    mapping(uint256 => DelayedSetStake) public delayedSetStakes;\\n    // The index of the next `delayedSetStakes` item to execute. Starts at 1 because `lastDelayedSetStake` starts at 0.\\n    uint256 public nextDelayedSetStake;\\n    uint256 public lastDelayedSetStake; // The index of the last `delayedSetStakes` item. 0 is skipped because it is the initial value.\\n\\n    // Dispute\\n    // Use a mapping instead of an array so that upgrading (appending variables to) the Dispute struct is possible without big layout changes.\\n    mapping(uint256 => Dispute) public disputes; // The disputes.\\n    uint256 public totalDisputes;\\n\\n    // Juror\\n    mapping(address => Juror) public jurors; // The jurors.\\n\\n    IForeignGateway public foreignGateway; // Foreign gateway contract.\\n    IERC20 public weth; // WETH token address.\\n\\n    mapping(uint256 => uint256) public disputesRuling;\\n\\n    /* Modifiers */\\n\\n    /** @dev Requires a specific phase.\\n     *  @param _phase The required phase.\\n     */\\n    modifier onlyDuringPhase(Phase _phase) {\\n        require(phase == _phase);\\n        _;\\n    }\\n\\n    /** @dev Requires a specific period in a dispute.\\n     *  @param _disputeID The ID of the dispute.\\n     *  @param _period The required period.\\n     */\\n    modifier onlyDuringPeriod(uint256 _disputeID, Period _period) {\\n        require(disputes[_disputeID].period == _period);\\n        _;\\n    }\\n\\n    /** @dev Requires that the sender is the governor. Note that the governor is expected to not be malicious. */\\n    modifier onlyByGovernor() {\\n        require(governor == msg.sender);\\n        _;\\n    }\\n\\n    /* Constructor */\\n\\n    /** @dev Constructs the KlerosLiquid contract.\\n     *  @param _governor The governor's address.\\n     *  @param _pinakion The address of the token contract.\\n     *  @param _RNGenerator The address of the random number generator contract.\\n     *  @param _minStakingTime The minimum time that the staking phase should last.\\n     *  @param _maxDrawingTime The maximum time that the drawing phase should last.\\n     *  @param _hiddenVotes The `hiddenVotes` property value of the general court.\\n     *  @param _courtParameters MinStake, alpha, feeForJuror and jurorsForCourtJump respectively.\\n     *  @param _timesPerPeriod The `timesPerPeriod` property value of the general court.\\n     *  @param _sortitionSumTreeK The number of children per node of the general court's sortition sum tree.\\n     *  @param _foreignGateway Foreign gateway on xDai.\\n     *  @param _weth Weth contract.\\n     */\\n    function initialize(\\n        address _governor,\\n        WrappedPinakion _pinakion,\\n        IRandomAuRa _RNGenerator,\\n        uint256 _minStakingTime,\\n        uint256 _maxDrawingTime,\\n        bool _hiddenVotes,\\n        uint256[4] memory _courtParameters,\\n        uint256[4] memory _timesPerPeriod,\\n        uint256 _sortitionSumTreeK,\\n        IForeignGateway _foreignGateway,\\n        IERC20 _weth\\n    ) public initializer {\\n        // Initialize contract.\\n        governor = _governor;\\n        pinakion = _pinakion;\\n        RNGenerator = _RNGenerator;\\n        minStakingTime = _minStakingTime;\\n        maxDrawingTime = _maxDrawingTime;\\n        phase = Phase.staking;\\n        lastPhaseChange = block.timestamp;\\n        lockInsolventTransfers = true;\\n        if (nextDelayedSetStake == 0) nextDelayedSetStake = 1;\\n        foreignGateway = _foreignGateway;\\n        weth = _weth;\\n\\n        // Create the general court.\\n        if (courts.length == 0) {\\n            courts.push(\\n                Court({\\n                    parent: 0,\\n                    children: new uint256[](0),\\n                    hiddenVotes: _hiddenVotes,\\n                    minStake: _courtParameters[0],\\n                    alpha: _courtParameters[1],\\n                    feeForJuror: _courtParameters[2],\\n                    jurorsForCourtJump: _courtParameters[3],\\n                    timesPerPeriod: _timesPerPeriod\\n                })\\n            );\\n            sortitionSumTrees.createTree(bytes32(0), _sortitionSumTreeK);\\n        }\\n    }\\n\\n    /* External */\\n\\n    /** @dev Lets the governor call anything on behalf of the contract.\\n     *  @param _destination The destination of the call.\\n     *  @param _amount The value sent with the call.\\n     *  @param _data The data sent with the call.\\n     */\\n    function executeGovernorProposal(\\n        address _destination,\\n        uint256 _amount,\\n        bytes memory _data\\n    ) external onlyByGovernor {\\n        (bool success, ) = _destination.call{value: _amount}(_data);\\n        require(success, \\\"Unsuccessful call\\\");\\n    }\\n\\n    /** @dev Changes the `governor` storage variable.\\n     *  @param _governor The new value for the `governor` storage variable.\\n     */\\n    function changeGovernor(address _governor) external onlyByGovernor {\\n        governor = _governor;\\n    }\\n\\n    /** @dev Changes the `pinakion` storage variable.\\n     *  @param _pinakion The new value for the `pinakion` storage variable.\\n     */\\n    function changePinakion(WrappedPinakion _pinakion) external onlyByGovernor {\\n        pinakion = _pinakion;\\n    }\\n\\n    /** @dev Changes the `RNGenerator` storage variable.\\n     *  @param _RNGenerator The new value for the `RNGenerator` storage variable.\\n     */\\n    function changeRNGenerator(IRandomAuRa _RNGenerator) external onlyByGovernor {\\n        RNGenerator = _RNGenerator;\\n        if (phase == Phase.generating) {\\n            RNBlock = RNGenerator.nextCommitPhaseStartBlock() + RNGenerator.collectRoundLength();\\n        }\\n    }\\n\\n    /** @dev Changes the `minStakingTime` storage variable.\\n     *  @param _minStakingTime The new value for the `minStakingTime` storage variable.\\n     */\\n    function changeMinStakingTime(uint256 _minStakingTime) external onlyByGovernor {\\n        minStakingTime = _minStakingTime;\\n    }\\n\\n    /** @dev Changes the `maxDrawingTime` storage variable.\\n     *  @param _maxDrawingTime The new value for the `maxDrawingTime` storage variable.\\n     */\\n    function changeMaxDrawingTime(uint256 _maxDrawingTime) external onlyByGovernor {\\n        maxDrawingTime = _maxDrawingTime;\\n    }\\n\\n    /** @dev Changes the `foreignGateway` storage variable.\\n     *  @param _foreignGateway The new value for the `foreignGateway` storage variable.\\n     */\\n    function changeForeignGateway(IForeignGateway _foreignGateway) external onlyByGovernor {\\n        foreignGateway = _foreignGateway;\\n    }\\n\\n    /** @dev Changes the `weth` storage variable.\\n     *  @param _weth The new value for the `weth` storage variable.\\n     */\\n    function changeWethAddress(IERC20 _weth) external onlyByGovernor {\\n        weth = _weth;\\n    }\\n\\n    /** @dev Creates a subcourt under a specified parent court.\\n     *  @param _parent The `parent` property value of the subcourt.\\n     *  @param _hiddenVotes The `hiddenVotes` property value of the subcourt.\\n     *  @param _minStake The `minStake` property value of the subcourt.\\n     *  @param _alpha The `alpha` property value of the subcourt.\\n     *  @param _feeForJuror The `feeForJuror` property value of the subcourt.\\n     *  @param _jurorsForCourtJump The `jurorsForCourtJump` property value of the subcourt.\\n     *  @param _timesPerPeriod The `timesPerPeriod` property value of the subcourt.\\n     *  @param _sortitionSumTreeK The number of children per node of the subcourt's sortition sum tree.\\n     */\\n    function createSubcourt(\\n        uint96 _parent,\\n        bool _hiddenVotes,\\n        uint256 _minStake,\\n        uint256 _alpha,\\n        uint256 _feeForJuror,\\n        uint256 _jurorsForCourtJump,\\n        uint256[4] memory _timesPerPeriod,\\n        uint256 _sortitionSumTreeK\\n    ) external onlyByGovernor {\\n        require(\\n            courts[_parent].minStake <= _minStake,\\n            \\\"A subcourt cannot be a child of a subcourt with a higher minimum stake.\\\"\\n        );\\n\\n        // Create the subcourt.\\n        uint256 subcourtID = courts.length;\\n        Court storage subcourt = courts.push();\\n        subcourt.parent = _parent;\\n        subcourt.children = new uint256[](0);\\n        subcourt.hiddenVotes = _hiddenVotes;\\n        subcourt.minStake = _minStake;\\n        subcourt.alpha = _alpha;\\n        subcourt.feeForJuror = _feeForJuror;\\n        subcourt.jurorsForCourtJump = _jurorsForCourtJump;\\n        subcourt.timesPerPeriod = _timesPerPeriod;\\n        sortitionSumTrees.createTree(bytes32(subcourtID), _sortitionSumTreeK);\\n\\n        // Update the parent.\\n        courts[_parent].children.push(subcourtID);\\n    }\\n\\n    /** @dev Changes the `minStake` property value of a specified subcourt. Don't set to a value lower than its parent's `minStake` property value.\\n     *  @param _subcourtID The ID of the subcourt.\\n     *  @param _minStake The new value for the `minStake` property value.\\n     */\\n    function changeSubcourtMinStake(uint96 _subcourtID, uint256 _minStake) external onlyByGovernor {\\n        require(_subcourtID == 0 || courts[courts[_subcourtID].parent].minStake <= _minStake);\\n        for (uint256 i = 0; i < courts[_subcourtID].children.length; i++) {\\n            require(\\n                courts[courts[_subcourtID].children[i]].minStake >= _minStake,\\n                \\\"A subcourt cannot be the parent of a subcourt with a lower minimum stake.\\\"\\n            );\\n        }\\n\\n        courts[_subcourtID].minStake = _minStake;\\n    }\\n\\n    /** @dev Changes the `alpha` property value of a specified subcourt.\\n     *  @param _subcourtID The ID of the subcourt.\\n     *  @param _alpha The new value for the `alpha` property value.\\n     */\\n    function changeSubcourtAlpha(uint96 _subcourtID, uint256 _alpha) external onlyByGovernor {\\n        courts[_subcourtID].alpha = _alpha;\\n    }\\n\\n    /** @dev Changes the `feeForJuror` property value of a specified subcourt.\\n     *  @param _subcourtID The ID of the subcourt.\\n     *  @param _feeForJuror The new value for the `feeForJuror` property value.\\n     */\\n    function changeSubcourtJurorFee(uint96 _subcourtID, uint256 _feeForJuror) external onlyByGovernor {\\n        courts[_subcourtID].feeForJuror = _feeForJuror;\\n    }\\n\\n    /** @dev Changes the `jurorsForCourtJump` property value of a specified subcourt.\\n     *  @param _subcourtID The ID of the subcourt.\\n     *  @param _jurorsForCourtJump The new value for the `jurorsForCourtJump` property value.\\n     */\\n    function changeSubcourtJurorsForJump(uint96 _subcourtID, uint256 _jurorsForCourtJump) external onlyByGovernor {\\n        courts[_subcourtID].jurorsForCourtJump = _jurorsForCourtJump;\\n    }\\n\\n    /** @dev Changes the `timesPerPeriod` property value of a specified subcourt.\\n     *  @param _subcourtID The ID of the subcourt.\\n     *  @param _timesPerPeriod The new value for the `timesPerPeriod` property value.\\n     */\\n    function changeSubcourtTimesPerPeriod(\\n        uint96 _subcourtID,\\n        uint256[4] memory _timesPerPeriod\\n    ) external onlyByGovernor {\\n        courts[_subcourtID].timesPerPeriod = _timesPerPeriod;\\n    }\\n\\n    /** @dev Sets the caller's stake in a subcourt.\\n     *  @param _subcourtID The ID of the subcourt.\\n     *  @param _stake The new stake.\\n     */\\n    function setStake(uint96 _subcourtID, uint128 _stake) external {\\n        require(_setStake(msg.sender, _subcourtID, _stake));\\n    }\\n\\n    /** @dev Executes the next delayed set stakes.\\n     *  `O(n)` where `n` is the number of iterations to run.\\n     *  @param _iterations The number of delayed set stakes to execute.\\n     */\\n    function executeDelayedSetStakes(uint256 _iterations) external onlyDuringPhase(Phase.staking) {\\n        uint256 actualIterations = (nextDelayedSetStake + _iterations) - 1 > lastDelayedSetStake\\n            ? (lastDelayedSetStake - nextDelayedSetStake) + 1\\n            : _iterations;\\n        uint256 newNextDelayedSetStake = nextDelayedSetStake + actualIterations;\\n        require(newNextDelayedSetStake >= nextDelayedSetStake);\\n        for (uint256 i = nextDelayedSetStake; i < newNextDelayedSetStake; i++) {\\n            DelayedSetStake storage delayedSetStake = delayedSetStakes[i];\\n            _setStake(delayedSetStake.account, delayedSetStake.subcourtID, delayedSetStake.stake);\\n            delete delayedSetStakes[i];\\n        }\\n        nextDelayedSetStake = newNextDelayedSetStake;\\n    }\\n\\n    /** @dev Receive the ruling from foreign gateway which technically is an arbitrator of this contract.\\n     *  @param _disputeID ID of the dispute.\\n     *  @param _ruling Ruling given by V2 court and relayed by foreign gateway.\\n     */\\n    function rule(uint256 _disputeID, uint256 _ruling) external {\\n        require(_disputeID < totalDisputes, \\\"Dispute ID does not exist.\\\");\\n        require(msg.sender == address(foreignGateway), \\\"Can only be called by gateway\\\");\\n\\n        Dispute storage dispute = disputes[_disputeID];\\n        require(!dispute.ruled, \\\"Ruling already executed.\\\");\\n        dispute.ruled = true;\\n        disputesRuling[_disputeID] = _ruling;\\n\\n        // Send the relayed ruling to the arbitrable while fully bypassing the dispute flow.\\n        dispute.arbitrated.rule(_disputeID, _ruling);\\n\\n        emit Ruling(dispute.arbitrated, _disputeID, _ruling);\\n    }\\n\\n    /* Public */\\n\\n    /** @dev Creates a dispute. Must be called by the arbitrable contract.\\n     *  @param _numberOfChoices Number of choices to choose from in the dispute to be created.\\n     *  @param _extraData Additional info about the dispute to be created. We use it to pass the ID of the subcourt to create the dispute in (first 32 bytes) and the minimum number of jurors required (next 32 bytes).\\n     *  @return disputeID The ID of the created dispute.\\n     */\\n    function createDispute(\\n        uint256 _numberOfChoices,\\n        bytes memory _extraData\\n    ) public payable override returns (uint256 disputeID) {\\n        require(msg.value == 0, \\\"Fees should be paid in WETH\\\");\\n        uint256 fee = arbitrationCost(_extraData);\\n        require(weth.transferFrom(msg.sender, address(this), fee), \\\"Not enough WETH for arbitration\\\");\\n\\n        disputeID = totalDisputes++;\\n        Dispute storage dispute = disputes[disputeID];\\n        dispute.arbitrated = IArbitrable(msg.sender);\\n\\n        // The V2 subcourtID is off by one\\n        (uint96 subcourtID, uint256 minJurors) = extraDataToSubcourtIDAndMinJurors(_extraData);\\n        bytes memory extraDataV2 = abi.encode(uint256(subcourtID + 1), minJurors);\\n\\n        require(weth.transfer(address(foreignGateway), fee), \\\"Fee transfer to gateway failed\\\");\\n        foreignGateway.createDisputeERC20(_numberOfChoices, extraDataV2, fee);\\n\\n        emit DisputeCreation(disputeID, IArbitrable(msg.sender));\\n    }\\n\\n    /** @dev DEPRECATED. Called when `_owner` sends ETH to the Wrapped Token contract.\\n     *  @param _owner The address that sent the ETH to create tokens.\\n     *  @return allowed Whether the operation should be allowed or not.\\n     */\\n    function proxyPayment(address _owner) public payable override returns (bool allowed) {\\n        allowed = false;\\n    }\\n\\n    /** @dev Notifies the controller about a token transfer allowing the controller to react if desired.\\n     *  @param _from The origin of the transfer.\\n     *  @param _to The destination of the transfer.\\n     *  @param _amount The amount of the transfer.\\n     *  @return allowed Whether the operation should be allowed or not.\\n     */\\n    function onTransfer(address _from, address _to, uint256 _amount) public override returns (bool allowed) {\\n        if (lockInsolventTransfers) {\\n            // Never block penalties or rewards.\\n            uint256 newBalance = pinakion.balanceOf(_from) - _amount;\\n            if (newBalance < jurors[_from].stakedTokens || newBalance < jurors[_from].lockedTokens) return false;\\n        }\\n        allowed = true;\\n    }\\n\\n    /** @dev Notifies the controller about an approval allowing the controller to react if desired.\\n     *  @param _owner The address that calls `approve()`.\\n     *  @param _spender The spender in the `approve()` call.\\n     *  @param _amount The amount in the `approve()` call.\\n     *  @return allowed Whether the operation should be allowed or not.\\n     */\\n    function onApprove(address _owner, address _spender, uint256 _amount) public override returns (bool allowed) {\\n        allowed = true;\\n    }\\n\\n    /* Public Views */\\n\\n    /** @dev Gets the cost of arbitration in a specified subcourt.\\n     *  @param _extraData Additional info about the dispute. We use it to pass the ID of the subcourt to create the dispute in (first 32 bytes) and the minimum number of jurors required (next 32 bytes).\\n     *  @return cost The cost.\\n     */\\n    function arbitrationCost(bytes memory _extraData) public view override returns (uint256 cost) {\\n        cost = foreignGateway.arbitrationCost(_extraData);\\n    }\\n\\n    /** @dev Gets the current ruling of a specified dispute.\\n     *  @param _disputeID The ID of the dispute.\\n     *  @return ruling The current ruling.\\n     */\\n    function currentRuling(uint256 _disputeID) public view returns (uint256 ruling) {\\n        Dispute storage dispute = disputes[_disputeID];\\n        if (dispute.voteCounters.length == 0) {\\n            ruling = disputesRuling[_disputeID];\\n        } else {\\n            ruling = dispute.voteCounters[dispute.voteCounters.length - 1].tied\\n                ? 0\\n                : dispute.voteCounters[dispute.voteCounters.length - 1].winningChoice;\\n        }\\n    }\\n\\n    /* Internal */\\n\\n    /** @dev Sets the specified juror's stake in a subcourt.\\n     *  `O(n + p * log_k(j))` where\\n     *  `n` is the number of subcourts the juror has staked in,\\n     *  `p` is the depth of the subcourt tree,\\n     *  `k` is the minimum number of children per node of one of these subcourts' sortition sum tree,\\n     *  and `j` is the maximum number of jurors that ever staked in one of these subcourts simultaneously.\\n     *  @param _account The address of the juror.\\n     *  @param _subcourtID The ID of the subcourt.\\n     *  @param _stake The new stake.\\n     *  @return succeeded True if the call succeeded, false otherwise.\\n     */\\n    function _setStake(address _account, uint96 _subcourtID, uint128 _stake) internal returns (bool succeeded) {\\n        if (!(_subcourtID < courts.length)) return false;\\n\\n        if (!(_stake == 0 || courts[_subcourtID].minStake <= _stake)) return false; // The juror's stake cannot be lower than the minimum stake for the subcourt.\\n        Juror storage juror = jurors[_account];\\n        bytes32 stakePathID = accountAndSubcourtIDToStakePathID(_account, _subcourtID);\\n        uint256 currentStake = sortitionSumTrees.stakeOf(bytes32(uint256(_subcourtID)), stakePathID);\\n        if (!(_stake == 0 || currentStake > 0 || juror.subcourtIDs.length < MAX_STAKE_PATHS)) return false; // Maximum stake paths reached.\\n        uint256 newTotalStake = juror.stakedTokens - currentStake + _stake; // Can't overflow because _stake is a uint128.\\n        if (!(_stake == 0 || pinakion.balanceOf(_account) >= newTotalStake)) return false; // The juror's total amount of staked tokens cannot be higher than the juror's balance.\\n\\n        // Update juror's records.\\n        juror.stakedTokens = newTotalStake;\\n        if (_stake == 0) {\\n            for (uint256 i = 0; i < juror.subcourtIDs.length; i++)\\n                if (juror.subcourtIDs[i] == _subcourtID) {\\n                    juror.subcourtIDs[i] = juror.subcourtIDs[juror.subcourtIDs.length - 1];\\n                    juror.subcourtIDs.pop();\\n                    break;\\n                }\\n        } else if (currentStake == 0) juror.subcourtIDs.push(_subcourtID);\\n\\n        // Update subcourt parents.\\n        bool finished = false;\\n        uint256 currentSubcourtID = _subcourtID;\\n        while (!finished) {\\n            sortitionSumTrees.set(bytes32(currentSubcourtID), _stake, stakePathID);\\n            if (currentSubcourtID == 0) finished = true;\\n            else currentSubcourtID = courts[currentSubcourtID].parent;\\n        }\\n        emit StakeSet(_account, _subcourtID, _stake, newTotalStake);\\n        return true;\\n    }\\n\\n    /** @dev Gets a subcourt ID and the minimum number of jurors required from a specified extra data bytes array.\\n     *  @param _extraData The extra data bytes array. The first 32 bytes are the subcourt ID and the next 32 bytes are the minimum number of jurors.\\n     *  @return subcourtID The subcourt ID.\\n     *  @return minJurors The minimum number of jurors required.\\n     */\\n    function extraDataToSubcourtIDAndMinJurors(\\n        bytes memory _extraData\\n    ) internal view returns (uint96 subcourtID, uint256 minJurors) {\\n        if (_extraData.length >= 64) {\\n            assembly {\\n                // solium-disable-line security/no-inline-assembly\\n                subcourtID := mload(add(_extraData, 0x20))\\n                minJurors := mload(add(_extraData, 0x40))\\n            }\\n            if (subcourtID >= courts.length) subcourtID = 0;\\n            if (minJurors == 0) minJurors = MIN_JURORS;\\n        } else {\\n            subcourtID = 0;\\n            minJurors = MIN_JURORS;\\n        }\\n    }\\n\\n    /** @dev Packs an account and a subcourt ID into a stake path ID.\\n     *  @param _account The account to pack.\\n     *  @param _subcourtID The subcourt ID to pack.\\n     *  @return stakePathID The stake path ID.\\n     */\\n    function accountAndSubcourtIDToStakePathID(\\n        address _account,\\n        uint96 _subcourtID\\n    ) internal pure returns (bytes32 stakePathID) {\\n        assembly {\\n            // solium-disable-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            for {\\n                let i := 0x00\\n            } lt(i, 0x14) {\\n                i := add(i, 0x01)\\n            } {\\n                mstore8(add(ptr, i), byte(add(0x0c, i), _account))\\n            }\\n            for {\\n                let i := 0x14\\n            } lt(i, 0x20) {\\n                i := add(i, 0x01)\\n            } {\\n                mstore8(add(ptr, i), byte(i, _subcourtID))\\n            }\\n            stakePathID := mload(ptr)\\n        }\\n    }\\n\\n    /* Interface Views */\\n\\n    /** @dev Gets a specified subcourt's non primitive properties.\\n     *  @param _subcourtID The ID of the subcourt.\\n     *  @return children The subcourt's child court list.\\n     *  @return timesPerPeriod The subcourt's time per period.\\n     */\\n    function getSubcourt(\\n        uint96 _subcourtID\\n    ) external view returns (uint256[] memory children, uint256[4] memory timesPerPeriod) {\\n        Court storage subcourt = courts[_subcourtID];\\n        children = subcourt.children;\\n        timesPerPeriod = subcourt.timesPerPeriod;\\n    }\\n\\n    /** @dev Gets a specified vote for a specified appeal in a specified dispute.\\n     *  @param _disputeID The ID of the dispute.\\n     *  @param _appeal The appeal.\\n     *  @param _voteID The ID of the vote.\\n     *  @return account The account for vote.\\n     *  @return commit  The commit for vote.\\n     *  @return choice  The choice for vote.\\n     *  @return voted True if the account voted, False otherwise.\\n     */\\n    function getVote(\\n        uint256 _disputeID,\\n        uint256 _appeal,\\n        uint256 _voteID\\n    ) external view returns (address account, bytes32 commit, uint256 choice, bool voted) {\\n        Vote storage vote = disputes[_disputeID].votes[_appeal][_voteID];\\n        account = vote.account;\\n        commit = vote.commit;\\n        choice = vote.choice;\\n        voted = vote.voted;\\n    }\\n\\n    /** @dev Gets the vote counter for a specified appeal in a specified dispute.\\n     *  Note: This function is only to be used by the interface and it won't work if the number of choices is too high.\\n     *  @param _disputeID The ID of the dispute.\\n     *  @param _appeal The appeal.\\n     *  @return winningChoice The winning choice.\\n     *  @return counts The count.\\n     *  @return tied Whether the vote tied.\\n     *  `O(n)` where\\n     *  `n` is the number of choices of the dispute.\\n     */\\n    function getVoteCounter(\\n        uint256 _disputeID,\\n        uint256 _appeal\\n    ) external view returns (uint256 winningChoice, uint256[] memory counts, bool tied) {\\n        Dispute storage dispute = disputes[_disputeID];\\n        VoteCounter storage voteCounter = dispute.voteCounters[_appeal];\\n        winningChoice = voteCounter.winningChoice;\\n        counts = new uint256[](dispute.numberOfChoices + 1);\\n        for (uint256 i = 0; i <= dispute.numberOfChoices; i++) counts[i] = voteCounter.counts[i];\\n        tied = voteCounter.tied;\\n    }\\n\\n    /** @dev Gets a specified dispute's non primitive properties.\\n     *  @param _disputeID The ID of the dispute.\\n     *  @return votesLengths The dispute's vote length.\\n     *  @return tokensAtStakePerJuror The dispute's required tokens at stake per Juror.\\n     *  @return totalFeesForJurors The dispute's total fees for Jurors.\\n     *  @return votesInEachRound The dispute's counter of votes made in each round.\\n     *  @return repartitionsInEachRound The dispute's counter of vote reward repartitions made in each round.\\n     *  @return penaltiesInEachRound The dispute's amount of tokens collected from penalties in each round.\\n     *  `O(a)` where\\n     *  `a` is the number of appeals of the dispute.\\n     */\\n    function getDispute(\\n        uint256 _disputeID\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory votesLengths,\\n            uint256[] memory tokensAtStakePerJuror,\\n            uint256[] memory totalFeesForJurors,\\n            uint256[] memory votesInEachRound,\\n            uint256[] memory repartitionsInEachRound,\\n            uint256[] memory penaltiesInEachRound\\n        )\\n    {\\n        Dispute storage dispute = disputes[_disputeID];\\n        votesLengths = new uint256[](dispute.votes.length);\\n        for (uint256 i = 0; i < dispute.votes.length; i++) votesLengths[i] = dispute.votes[i].length;\\n        tokensAtStakePerJuror = dispute.tokensAtStakePerJuror;\\n        totalFeesForJurors = dispute.totalFeesForJurors;\\n        votesInEachRound = dispute.votesInEachRound;\\n        repartitionsInEachRound = dispute.repartitionsInEachRound;\\n        penaltiesInEachRound = dispute.penaltiesInEachRound;\\n    }\\n\\n    /** @dev Gets a specified juror's non primitive properties.\\n     *  @param _account The address of the juror.\\n     *  @return subcourtIDs The juror's IDs of subcourts where the juror has stake path.\\n     */\\n    function getJuror(address _account) external view returns (uint96[] memory subcourtIDs) {\\n        Juror storage juror = jurors[_account];\\n        subcourtIDs = juror.subcourtIDs;\\n    }\\n\\n    /** @dev Gets the stake of a specified juror in a specified subcourt.\\n     *  @param _account The address of the juror.\\n     *  @param _subcourtID The ID of the subcourt.\\n     *  @return stake The stake.\\n     */\\n    function stakeOf(address _account, uint96 _subcourtID) external view returns (uint256 stake) {\\n        return\\n            sortitionSumTrees.stakeOf(\\n                bytes32(uint256(_subcourtID)),\\n                accountAndSubcourtIDToStakePathID(_account, _subcourtID)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x3dcdb8741f6ef181e21ecfe20c91af0eba52f300d4f3b534b6ae9e2210e33138\",\"license\":\"MIT\"},\"src/libraries/SortitionSumTreeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n *  @authors: [@epiqueras, @unknownunknown1]\\n *  @reviewers: []\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\npragma solidity ^0.8;\\n\\n/**\\n *  @title SortitionSumTreeFactory\\n *  @author Enrique Piqueras - <epiquerass@gmail.com>\\n *  @dev A factory of trees that keep track of staked values for sortition.\\n */\\nlibrary SortitionSumTreeFactory {\\n    /* Structs */\\n\\n    struct SortitionSumTree {\\n        uint K; // The maximum number of childs per node.\\n        // We use this to keep track of vacant positions in the tree after removing a leaf. This is for keeping the tree as balanced as possible without spending gas on moving nodes around.\\n        uint[] stack;\\n        uint[] nodes;\\n        // Two-way mapping of IDs to node indexes. Note that node index 0 is reserved for the root node, and means the ID does not have a node.\\n        mapping(bytes32 => uint) IDsToNodeIndexes;\\n        mapping(uint => bytes32) nodeIndexesToIDs;\\n    }\\n\\n    /* Storage */\\n\\n    struct SortitionSumTrees {\\n        mapping(bytes32 => SortitionSumTree) sortitionSumTrees;\\n    }\\n\\n    /* Public */\\n\\n    /**\\n     *  @dev Create a sortition sum tree at the specified key.\\n     *  @param _key The key of the new tree.\\n     *  @param _K The number of children each node in the tree should have.\\n     */\\n    function createTree(SortitionSumTrees storage self, bytes32 _key, uint _K) public {\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\n        require(tree.K == 0, \\\"Tree already exists.\\\");\\n        require(_K > 1, \\\"K must be greater than one.\\\");\\n        tree.K = _K;\\n        tree.nodes.push(0);\\n    }\\n\\n    /**\\n     *  @dev Set a value of a tree.\\n     *  @param _key The key of the tree.\\n     *  @param _value The new value.\\n     *  @param _ID The ID of the value.\\n     *  `O(log_k(n))` where\\n     *  `k` is the maximum number of childs per node in the tree,\\n     *   and `n` is the maximum number of nodes ever appended.\\n     */\\n    function set(SortitionSumTrees storage self, bytes32 _key, uint _value, bytes32 _ID) public {\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\n        uint treeIndex = tree.IDsToNodeIndexes[_ID];\\n\\n        if (treeIndex == 0) {\\n            // No existing node.\\n            if (_value != 0) {\\n                // Non zero value.\\n                // Append.\\n                // Add node.\\n                if (tree.stack.length == 0) {\\n                    // No vacant spots.\\n                    // Get the index and append the value.\\n                    treeIndex = tree.nodes.length;\\n                    tree.nodes.push(_value);\\n\\n                    // Potentially append a new node and make the parent a sum node.\\n                    if (treeIndex != 1 && (treeIndex - 1) % tree.K == 0) {\\n                        // Is first child.\\n                        uint parentIndex = treeIndex / tree.K;\\n                        bytes32 parentID = tree.nodeIndexesToIDs[parentIndex];\\n                        uint newIndex = treeIndex + 1;\\n                        tree.nodes.push(tree.nodes[parentIndex]);\\n                        delete tree.nodeIndexesToIDs[parentIndex];\\n                        tree.IDsToNodeIndexes[parentID] = newIndex;\\n                        tree.nodeIndexesToIDs[newIndex] = parentID;\\n                    }\\n                } else {\\n                    // Some vacant spot.\\n                    // Pop the stack and append the value.\\n                    treeIndex = tree.stack[tree.stack.length - 1];\\n                    tree.stack.pop();\\n                    tree.nodes[treeIndex] = _value;\\n                }\\n\\n                // Add label.\\n                tree.IDsToNodeIndexes[_ID] = treeIndex;\\n                tree.nodeIndexesToIDs[treeIndex] = _ID;\\n\\n                updateParents(self, _key, treeIndex, true, _value);\\n            }\\n        } else {\\n            // Existing node.\\n            if (_value == 0) {\\n                // Zero value.\\n                // Remove.\\n                // Remember value and set to 0.\\n                uint value = tree.nodes[treeIndex];\\n                tree.nodes[treeIndex] = 0;\\n\\n                // Push to stack.\\n                tree.stack.push(treeIndex);\\n\\n                // Clear label.\\n                delete tree.IDsToNodeIndexes[_ID];\\n                delete tree.nodeIndexesToIDs[treeIndex];\\n\\n                updateParents(self, _key, treeIndex, false, value);\\n            } else if (_value != tree.nodes[treeIndex]) {\\n                // New, non zero value.\\n                // Set.\\n                bool plusOrMinus = tree.nodes[treeIndex] <= _value;\\n                uint plusOrMinusValue = plusOrMinus ? _value - tree.nodes[treeIndex] : tree.nodes[treeIndex] - _value;\\n                tree.nodes[treeIndex] = _value;\\n\\n                updateParents(self, _key, treeIndex, plusOrMinus, plusOrMinusValue);\\n            }\\n        }\\n    }\\n\\n    /* Public Views */\\n\\n    /**\\n     *  @dev Query the leaves of a tree. Note that if `startIndex == 0`, the tree is empty and the root node will be returned.\\n     *  @param _key The key of the tree to get the leaves from.\\n     *  @param _cursor The pagination cursor.\\n     *  @param _count The number of items to return.\\n     *  @return startIndex The index at which leaves start.\\n     *  @return values The values of the returned leaves.\\n     *  @return hasMore Whether there are more for pagination.\\n     *  `O(n)` where\\n     *  `n` is the maximum number of nodes ever appended.\\n     */\\n    function queryLeafs(\\n        SortitionSumTrees storage self,\\n        bytes32 _key,\\n        uint _cursor,\\n        uint _count\\n    ) public view returns (uint startIndex, uint[] memory values, bool hasMore) {\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\n\\n        // Find the start index.\\n        for (uint i = 0; i < tree.nodes.length; i++) {\\n            if ((tree.K * i) + 1 >= tree.nodes.length) {\\n                startIndex = i;\\n                break;\\n            }\\n        }\\n\\n        // Get the values.\\n        uint loopStartIndex = startIndex + _cursor;\\n        values = new uint[](loopStartIndex + _count > tree.nodes.length ? tree.nodes.length - loopStartIndex : _count);\\n        uint valuesIndex = 0;\\n        for (uint j = loopStartIndex; j < tree.nodes.length; j++) {\\n            if (valuesIndex < _count) {\\n                values[valuesIndex] = tree.nodes[j];\\n                valuesIndex++;\\n            } else {\\n                hasMore = true;\\n                break;\\n            }\\n        }\\n    }\\n\\n    /**\\n     *  @dev Draw an ID from a tree using a number. Note that this function reverts if the sum of all values in the tree is 0.\\n     *  @param _key The key of the tree.\\n     *  @param _drawnNumber The drawn number.\\n     *  @return ID The drawn ID.\\n     *  `O(k * log_k(n))` where\\n     *  `k` is the maximum number of childs per node in the tree,\\n     *   and `n` is the maximum number of nodes ever appended.\\n     */\\n    function draw(SortitionSumTrees storage self, bytes32 _key, uint _drawnNumber) public view returns (bytes32 ID) {\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\n        uint treeIndex = 0;\\n        uint currentDrawnNumber = _drawnNumber % tree.nodes[0];\\n\\n        while (\\n            (tree.K * treeIndex) + 1 < tree.nodes.length // While it still has children.\\n        )\\n            for (uint i = 1; i <= tree.K; i++) {\\n                // Loop over children.\\n                uint nodeIndex = (tree.K * treeIndex) + i;\\n                uint nodeValue = tree.nodes[nodeIndex];\\n\\n                if (currentDrawnNumber >= nodeValue)\\n                    currentDrawnNumber -= nodeValue; // Go to the next child.\\n                else {\\n                    // Pick this child.\\n                    treeIndex = nodeIndex;\\n                    break;\\n                }\\n            }\\n\\n        ID = tree.nodeIndexesToIDs[treeIndex];\\n    }\\n\\n    /** @dev Gets a specified ID's associated value.\\n     *  @param _key The key of the tree.\\n     *  @param _ID The ID of the value.\\n     *  @return value The associated value.\\n     */\\n    function stakeOf(SortitionSumTrees storage self, bytes32 _key, bytes32 _ID) public view returns (uint value) {\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\n        uint treeIndex = tree.IDsToNodeIndexes[_ID];\\n\\n        if (treeIndex == 0) value = 0;\\n        else value = tree.nodes[treeIndex];\\n    }\\n\\n    /* Private */\\n\\n    /**\\n     *  @dev Update all the parents of a node.\\n     *  @param _key The key of the tree to update.\\n     *  @param _treeIndex The index of the node to start from.\\n     *  @param _plusOrMinus Wether to add (true) or substract (false).\\n     *  @param _value The value to add or substract.\\n     *  `O(log_k(n))` where\\n     *  `k` is the maximum number of childs per node in the tree,\\n     *   and `n` is the maximum number of nodes ever appended.\\n     */\\n    function updateParents(\\n        SortitionSumTrees storage self,\\n        bytes32 _key,\\n        uint _treeIndex,\\n        bool _plusOrMinus,\\n        uint _value\\n    ) private {\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\n\\n        uint parentIndex = _treeIndex;\\n        while (parentIndex != 0) {\\n            parentIndex = (parentIndex - 1) / tree.K;\\n            tree.nodes[parentIndex] = _plusOrMinus\\n                ? tree.nodes[parentIndex] + _value\\n                : tree.nodes[parentIndex] - _value;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x053af9495cb8382dfc1e1503d8f3dab3d356d664efdbdf534f146ab8f3834e95\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "$9b1aa2a5defb7a13dc220b13d2e6a83a6b$__9150639075789e9060640160006040518083038186803b15801561142a57600080fd5b505af415801561143e573d6000803e3d6000fd5b505050505b8015611489576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050505050565b60095460009060ff161561158b576001546040516370a0823160e01b815260009184916001600160a01b03909116906370a08231906114da908990600401612d97565b60206040518083038186803b1580156114f257600080fd5b505afa158015611506573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152a91906134e1565b6115349190613499565b6001600160a01b03861660009081526011602052604090206001015490915081108061157a57506001600160a01b03851660009081526011602052604090206002015481105b1561158957600091505061158f565b505b5060015b9392505050565b6000546201000090046001600160a01b031633146115b357600080fd5b80600a836001600160601b0316815481106115d0576115d06134b0565b90600052602060002090600b02016007019060046115ef929190612d0a565b505050565b6000546201000090046001600160a01b0316331461161157600080fd5b80600a836001600160601b03168154811061162e5761162e6134b0565b90600052602060002090600b0201600501819055505050565b6000546201000090046001600160a01b0316331461166457600080fd5b80600a836001600160601b031681548110611681576116816134b0565b90600052602060002090600b0201600401819055505050565b6000546201000090046001600160a01b031633146116b757600080fd5b6000836001600160a01b031683836040516116d29190613526565b60006040518083038185875af1925050503d806000811461170f576040519150601f19603f3d011682016040523d82523d6000602084013e611714565b606091505b50509050806117595760405162461bcd60e51b8152602060048201526011602482015270155b9cdd58d8d95cdcd99d5b0818d85b1b607a1b6044820152606401610cad565b50505050565b6000546201000090046001600160a01b0316331461177c57600080fd5b601380546001600160a01b0319166001600160a01b0392909216919091179055565b6000546201000090046001600160a01b031633146117bb57600080fd5b600755565b6117cb3383836126ee565b6117d457600080fd5b5050565b6000806000806000600f60008981526020019081526020016000206004018781548110611807576118076134b0565b906000526020600020018681548110611822576118226134b0565b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b039092169b909a5091985060ff169650945050505050565b6000546201000090046001600160a01b0316331461188057600080fd5b600280546001600160a01b0319166001600160a01b038316179055600160028054600160a01b900460ff16908111156118bb576118bb613049565b14156119db57600260009054906101000a90046001600160a01b03166001600160a01b0316631c77c58c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561190f57600080fd5b505afa158015611923573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194791906134e1565b600260009054906101000a90046001600160a01b03166001600160a01b03166378ab865d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561199557600080fd5b505afa1580156119a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119cd91906134e1565b6119d79190613542565b6005555b50565b60008060028054600160a01b900460ff16908111156119ff576119ff613049565b14611a0957600080fd5b6000600e54600184600d54611a1e9190613542565b611a289190613499565b11611a335782611a4e565b600d54600e54611a439190613499565b611a4e906001613542565b9050600081600d54611a609190613542565b9050600d54811015611a7157600080fd5b600d545b81811015611af7576000818152600c6020526040902080546001820154611ac1916001600160a01b03811691600160a01b9091046001600160601b0316906001600160801b03166126ee565b50506000818152600c6020526040812090815560010180546001600160801b031916905580611aef816134c6565b915050611a75565b50600d55505050565b6000546201000090046001600160a01b03163314611b1d57600080fd5b601280546001600160a01b0319166001600160a01b0392909216919091179055565b600073__$9b1aa2a5defb7a13dc220b13d2e6a83a6b$__637521ccb1600b6001600160601b038516611b718787612c10565b6040516001600160e01b031960e086901b16815260048101939093526024830191909152604482015260640160206040518083038186803b158015611bb557600080fd5b505af4158015611bc9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158f91906134e1565b6000546201000090046001600160a01b03163314611c0a57600080fd5b80600a836001600160601b031681548110611c2757611c276134b0565b90600052602060002090600b0201600601819055505050565b60003415611c905760405162461bcd60e51b815260206004820152601b60248201527f466565732073686f756c64206265207061696420696e205745544800000000006044820152606401610cad565b6000611c9b83612667565b6013546040516323b872dd60e01b8152336004820152306024820152604481018390529192506001600160a01b0316906323b872dd90606401602060405180830381600087803b158015611cee57600080fd5b505af1158015611d02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d26919061355a565b611d725760405162461bcd60e51b815260206004820152601f60248201527f4e6f7420656e6f756768205745544820666f72206172626974726174696f6e006044820152606401610cad565b60108054906000611d82836134c6565b909155506000818152600f6020526040812080546001600160601b031633600160601b0217815591935080611db686612c58565b90925090506000611dc8836001613577565b604080516001600160601b03929092166020830152810183905260600160408051808303601f190181529082905260135460125463a9059cbb60e01b84526001600160a01b03908116600485015260248401899052919350169063a9059cbb90604401602060405180830381600087803b158015611e4557600080fd5b505af1158015611e59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e7d919061355a565b611ec95760405162461bcd60e51b815260206004820152601e60248201527f466565207472616e7366657220746f2067617465776179206661696c656400006044820152606401610cad565b60125460405163979f8e6560e01b81526001600160a01b039091169063979f8e6590611efd908b9085908a906004016135ce565b602060405180830381600087803b158015611f1757600080fd5b505af1158015611f2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4f91906134e1565b50604051339087907f141dfc18aa6a56fc816f44f0e9e2f1ebc92b15ab167770e17db5b084c10ed99590600090a3505050505092915050565b6000546201000090046001600160a01b03163314611fa557600080fd5b85600a896001600160601b031681548110611fc257611fc26134b0565b90600052602060002090600b02016003015411156120585760405162461bcd60e51b815260206004820152604760248201527f4120737562636f7572742063616e6e6f742062652061206368696c64206f662060448201527f6120737562636f7572742077697468206120686967686572206d696e696d756d6064820152661039ba30b5b29760c91b608482015260a401610cad565b600a805460018101825560009182527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8600b82020180546001600160601b0319166001600160601b038c1617815590916040519080825280602002602001820160405280156120d1578160200160208202803683370190505b5080516120e8916001840191602090910190612cbf565b5060028101805460ff19168a151517905560038101889055600480820188905560058201879055600682018690556121269060078301908690612d0a565b5060405163483abc4f60e11b8152600b6004820152602481018390526044810184905273__$9b1aa2a5defb7a13dc220b13d2e6a83a6b$__90639075789e9060640160006040518083038186803b15801561218057600080fd5b505af4158015612194573d6000803e3d6000fd5b50505050600a8a6001600160601b0316815481106121b4576121b46134b0565b600091825260208083206001600b9093020182018054928301815583529091200191909155505050505050505050565b6001600160a01b0381166000908152601160209081526040918290208054835181840281018401909452808452606093919283919083018282801561227a57602002820191906000526020600020906000905b82829054906101000a90046001600160601b03166001600160601b0316815260200190600c0190602082600b010492830192600103820291508084116122375790505b5050505050915050919050565b6000546201000090046001600160a01b031633146122a457600080fd5b600855565b6000818152600f602052604090206004810154606091829182918291829182916001600160401b038111156122e0576122e0612ebd565b604051908082528060200260200182016040528015612309578160200160208202803683370190505b50965060005b600482015481101561236d57816004018181548110612330576123306134b0565b9060005260206000200180549050888281518110612350576123506134b0565b602090810291909101015280612365816134c6565b91505061230f565b50806006018054806020026020016040519081016040528092919081815260200182805480156123bc57602002820191906000526020600020905b8154815260200190600101908083116123a8575b505050505095508060070180548060200260200160405190810160405280929190818152602001828054801561241157602002820191906000526020600020905b8154815260200190600101908083116123fd575b5050505050945080600a0180548060200260200160405190810160405280929190818152602001828054801561246657602002820191906000526020600020905b815481526020019060010190808311612452575b5050505050935080600b018054806020026020016040519081016040528092919081815260200182805480156124bb57602002820191906000526020600020905b8154815260200190600101908083116124a7575b5050505050925080600c0180548060200260200160405190810160405280929190818152602001828054801561251057602002820191906000526020600020905b8154815260200190600101908083116124fc575b505050505091505091939550919395565b6000828152600f60205260408120600581018054606092849290918391908790811061254f5761254f6134b0565b9060005260206000209060030201905080600001549450816001015460016125779190613542565b6001600160401b0381111561258e5761258e612ebd565b6040519080825280602002602001820160405280156125b7578160200160208202803683370190505b50935060005b8260010154811161260a57600081815260018301602052604090205485518690839081106125ed576125ed6134b0565b602090810291909101015280612602816134c6565b9150506125bd565b506002015493969295505060ff90921692509050565b6000546201000090046001600160a01b0316331461263d57600080fd5b600080546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b60125460405163f7434ea960e01b81526000916001600160a01b03169063f7434ea9906126989085906004016135f7565b60206040518083038186803b1580156126b057600080fd5b505afa1580156126c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126e891906134e1565b92915050565b600a546000906001600160601b0384161061270b5750600061158f565b6001600160801b03821615806127575750816001600160801b0316600a846001600160601b031681548110612742576127426134b0565b90600052602060002090600b02016003015411155b6127635750600061158f565b6001600160a01b0384166000908152601160205260408120906127868686612c10565b604051637521ccb160e01b8152600b60048201526001600160601b03871660248201526044810182905290915060009073__$9b1aa2a5defb7a13dc220b13d2e6a83a6b$__90637521ccb19060640160206040518083038186803b1580156127ed57600080fd5b505af4158015612801573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061282591906134e1565b90506001600160801b038516158061283d5750600081115b80612849575082546004115b612859576000935050505061158f565b6000856001600160801b03168285600101546128759190613499565b61287f9190613542565b90506001600160801b038616158061291557506001546040516370a0823160e01b815282916001600160a01b0316906370a08231906128c2908c90600401612d97565b60206040518083038186803b1580156128da57600080fd5b505afa1580156128ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061291291906134e1565b10155b61292657600094505050505061158f565b600184018190556001600160801b038616612a8b5760005b8454811015612a8557876001600160601b0316856000018281548110612966576129666134b0565b600091825260209091206002820401546001909116600c026101000a90046001600160601b03161415612a7357845485906129a390600190613499565b815481106129b3576129b36134b0565b9060005260206000209060029182820401919006600c029054906101000a90046001600160601b03168560000182815481106129f1576129f16134b0565b9060005260206000209060029182820401919006600c026101000a8154816001600160601b0302191690836001600160601b0316021790555084600001805480612a3d57612a3d61360a565b60008281526020902060026000199092019182040180546001600160601b03600c60018516026101000a02191690559055612a85565b80612a7d816134c6565b91505061293e565b50612acb565b81612acb578354600180820186556000868152602090206002830401805491909216600c026101000a6001600160601b0381810219909216918a16021790555b60006001600160601b0388165b81612ba357604051631712e1c560e11b8152600b6004820152602481018290526001600160801b03891660448201526064810186905273__$9b1aa2a5defb7a13dc220b13d2e6a83a6b$__90632e25c38a9060840160006040518083038186803b158015612b4557600080fd5b505af4158015612b59573d6000803e3d6000fd5b505050508060001415612b6f5760019150612ad8565b600a8181548110612b8257612b826134b0565b60009182526020909120600b90910201546001600160601b03169050612ad8565b604080516001600160601b038b1681526001600160801b038a1660208201529081018490526001600160a01b038b16907f8f753321c98641397daaca5e8abf8881fff1fd7a7bc229924a012e2cb61763d59060600160405180910390a25060019998505050505050505050565b600060405160005b6014811015612c33578481600c011a81830153600101612c18565b5060145b6020811015612c4f5783811a81830153600101612c37565b50519392505050565b6000806040835110612c9557505060208101516040820151600a546001600160601b03831610612c8757600091505b80612c90575060035b915091565b50600090506003915091565b60405180608001604052806004906020820280368337509192915050565b828054828255906000526020600020908101928215612cfa579160200282015b82811115612cfa578251825591602001919060010190612cdf565b50612d06929150612d37565b5090565b8260048101928215612cfa5791602002820182811115612cfa578251825591602001919060010190612cdf565b5b80821115612d065760008155600101612d38565b6001600160a01b03811681146119db57600080fd5b600060208284031215612d7357600080fd5b813561158f81612d4c565b600060208284031215612d9057600080fd5b5035919050565b6001600160a01b0391909116815260200190565b60008060408385031215612dbe57600080fd5b50508035926020909101359150565b80356001600160601b0381168114612de457600080fd5b919050565b60008060408385031215612dfc57600080fd5b612e0583612dcd565b946020939093013593505050565b600060208284031215612e2557600080fd5b61158f82612dcd565b600081518084526020808501945080840160005b83811015612e5e57815187529582019590820190600101612e42565b509495945050505050565b60a081526000612e7c60a0830185612e2e565b905060208083018460005b6004811015612ea457815183529183019190830190600101612e87565b505050509392505050565b80151581146119db57600080fd5b634e487b7160e01b600052604160045260246000fd5b600082601f830112612ee457600080fd5b604051608081018181106001600160401b0382111715612f0657612f06612ebd565b604052806080840185811115612f1b57600080fd5b845b81811015612f35578035835260209283019201612f1d565b509195945050505050565b60008060008060008060008060008060006102208c8e031215612f6257600080fd5b8b35612f6d81612d4c565b9a5060208c0135612f7d81612d4c565b995060408c0135612f8d81612d4c565b985060608c0135975060808c0135965060a08c0135612fab81612eaf565b9550612fba8d60c08e01612ed3565b9450612fca8d6101408e01612ed3565b93506101c08c013592506101e08c0135612fe381612d4c565b91506102008c0135612ff481612d4c565b809150509295989b509295989b9093969950565b60008060006060848603121561301d57600080fd5b833561302881612d4c565b9250602084013561303881612d4c565b929592945050506040919091013590565b634e487b7160e01b600052602160045260246000fd5b6001600160601b03891681526001600160a01b03881660208201526040810187905261010081016005871061309657613096613049565b6060820196909652608081019490945260a084019290925260c0830152151560e0909101529392505050565b60008060a083850312156130d557600080fd5b6130de83612dcd565b91506130ed8460208501612ed3565b90509250929050565b600082601f83011261310757600080fd5b81356001600160401b038082111561312157613121612ebd565b604051601f8301601f19908116603f0116810190828211818310171561314957613149612ebd565b8160405283815286602085880101111561316257600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121561319757600080fd5b83356131a281612d4c565b92506020840135915060408401356001600160401b038111156131c457600080fd5b6131d0868287016130f6565b9150509250925092565b600080604083850312156131ed57600080fd5b6131f683612dcd565b915060208301356001600160801b038116811461321257600080fd5b809150509250929050565b60008060006060848603121561323257600080fd5b505081359360208301359350604090920135919050565b6000806040838503121561325c57600080fd5b823561326781612d4c565b91506130ed60208401612dcd565b602081016003831061328957613289613049565b91905290565b600080604083850312156132a257600080fd5b8235915060208301356001600160401b038111156132bf57600080fd5b6132cb858286016130f6565b9150509250929050565b600080600080600080600080610160898b0312156132f257600080fd5b6132fb89612dcd565b9750602089013561330b81612eaf565b965060408901359550606089013594506080890135935060a089013592506133368a60c08b01612ed3565b915061014089013590509295985092959890939650565b6020808252825182820181905260009190848201906040850190845b8181101561338e5783516001600160601b031683529284019291840191600101613369565b50909695505050505050565b60c0815260006133ad60c0830189612e2e565b82810360208401526133bf8189612e2e565b905082810360408401526133d38188612e2e565b905082810360608401526133e78187612e2e565b905082810360808401526133fb8186612e2e565b905082810360a084015261340f8185612e2e565b9998505050505050505050565b8381526060602082015260006134356060830185612e2e565b90508215156040830152949350505050565b60006020828403121561345957600080fd5b81356001600160401b0381111561346f57600080fd5b61347b848285016130f6565b949350505050565b634e487b7160e01b600052601160045260246000fd5b6000828210156134ab576134ab613483565b500390565b634e487b7160e01b600052603260045260246000fd5b60006000198214156134da576134da613483565b5060010190565b6000602082840312156134f357600080fd5b5051919050565b60005b838110156135155781810151838201526020016134fd565b838111156117595750506000910152565b600082516135388184602087016134fa565b9190910192915050565b6000821982111561355557613555613483565b500190565b60006020828403121561356c57600080fd5b815161158f81612eaf565b60006001600160601b0380831681851680830382111561359957613599613483565b01949350505050565b600081518084526135ba8160208601602086016134fa565b601f01601f19169290920160200192915050565b8381526060602082015260006135e760608301856135a2565b9050826040830152949350505050565b60208152600061158f60208301846135a2565b634e487b7160e01b600052603160045260246000fdfea26469706673582212208c24f0dc5c862abcfbeb5d7abaf80f855b2bfba8e446fb9c2aa2b7b83edd554e64736f6c63430008090033",
  "libraries": {
    "SortitionSumTreeFactory": "0xc7e3BF90299f6BD9FA7c3703837A9CAbB5743636"
  },
  "devdoc": {
    "details": "This contract is an adaption of Mainnet's KlerosLiquid (https://github.com/kleros/kleros/blob/69cfbfb2128c29f1625b3a99a3183540772fda08/contracts/kleros/KlerosLiquid.sol)  for xDai chain. Notice that variables referring to ETH values in this contract, will hold the native token values of the chain on which xKlerosLiquid is deployed.  When this contract gets deployed on xDai chain, ETH variables will hold xDai values.",
    "events": {
      "Draw(address,uint256,uint256,uint256)": {
        "details": "Emitted when a juror is drawn.",
        "params": {
          "_address": "The drawn address.",
          "_appeal": "The appeal the draw is for. 0 is for the first round.",
          "_disputeID": "The ID of the dispute.",
          "_voteID": "The vote ID."
        }
      },
      "NewPeriod(uint256,uint8)": {
        "details": "Emitted when a dispute passes to a new period.",
        "params": {
          "_disputeID": "The ID of the dispute.",
          "_period": "The new period."
        }
      },
      "NewPhase(uint8)": {
        "details": "Emitted when we pass to a new phase.",
        "params": {
          "_phase": "The new phase."
        }
      },
      "StakeSet(address,uint256,uint128,uint256)": {
        "details": "Emitted when a juror's stake is set.",
        "params": {
          "_address": "The address of the juror.",
          "_newTotalStake": "The new total stake.",
          "_stake": "The new stake.",
          "_subcourtID": "The ID of the subcourt at the end of the stake path."
        }
      },
      "TokenAndETHShift(address,uint256,int256,int256)": {
        "details": "Emitted when a juror wins or loses tokens and ETH from a dispute.",
        "params": {
          "_ETHAmount": "The amount of ETH won or lost.",
          "_address": "The juror affected.",
          "_disputeID": "The ID of the dispute.",
          "_tokenAmount": "The amount of tokens won or lost."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "arbitrationCost(bytes)": {
        "details": "Gets the cost of arbitration in a specified subcourt.",
        "params": {
          "_extraData": "Additional info about the dispute. We use it to pass the ID of the subcourt to create the dispute in (first 32 bytes) and the minimum number of jurors required (next 32 bytes)."
        },
        "returns": {
          "cost": "The cost."
        }
      },
      "changeForeignGateway(address)": {
        "details": "Changes the `foreignGateway` storage variable.",
        "params": {
          "_foreignGateway": "The new value for the `foreignGateway` storage variable."
        }
      },
      "changeGovernor(address)": {
        "details": "Changes the `governor` storage variable.",
        "params": {
          "_governor": "The new value for the `governor` storage variable."
        }
      },
      "changeMaxDrawingTime(uint256)": {
        "details": "Changes the `maxDrawingTime` storage variable.",
        "params": {
          "_maxDrawingTime": "The new value for the `maxDrawingTime` storage variable."
        }
      },
      "changeMinStakingTime(uint256)": {
        "details": "Changes the `minStakingTime` storage variable.",
        "params": {
          "_minStakingTime": "The new value for the `minStakingTime` storage variable."
        }
      },
      "changePinakion(address)": {
        "details": "Changes the `pinakion` storage variable.",
        "params": {
          "_pinakion": "The new value for the `pinakion` storage variable."
        }
      },
      "changeRNGenerator(address)": {
        "details": "Changes the `RNGenerator` storage variable.",
        "params": {
          "_RNGenerator": "The new value for the `RNGenerator` storage variable."
        }
      },
      "changeSubcourtAlpha(uint96,uint256)": {
        "details": "Changes the `alpha` property value of a specified subcourt.",
        "params": {
          "_alpha": "The new value for the `alpha` property value.",
          "_subcourtID": "The ID of the subcourt."
        }
      },
      "changeSubcourtJurorFee(uint96,uint256)": {
        "details": "Changes the `feeForJuror` property value of a specified subcourt.",
        "params": {
          "_feeForJuror": "The new value for the `feeForJuror` property value.",
          "_subcourtID": "The ID of the subcourt."
        }
      },
      "changeSubcourtJurorsForJump(uint96,uint256)": {
        "details": "Changes the `jurorsForCourtJump` property value of a specified subcourt.",
        "params": {
          "_jurorsForCourtJump": "The new value for the `jurorsForCourtJump` property value.",
          "_subcourtID": "The ID of the subcourt."
        }
      },
      "changeSubcourtMinStake(uint96,uint256)": {
        "details": "Changes the `minStake` property value of a specified subcourt. Don't set to a value lower than its parent's `minStake` property value.",
        "params": {
          "_minStake": "The new value for the `minStake` property value.",
          "_subcourtID": "The ID of the subcourt."
        }
      },
      "changeSubcourtTimesPerPeriod(uint96,uint256[4])": {
        "details": "Changes the `timesPerPeriod` property value of a specified subcourt.",
        "params": {
          "_subcourtID": "The ID of the subcourt.",
          "_timesPerPeriod": "The new value for the `timesPerPeriod` property value."
        }
      },
      "changeWethAddress(address)": {
        "details": "Changes the `weth` storage variable.",
        "params": {
          "_weth": "The new value for the `weth` storage variable."
        }
      },
      "createDispute(uint256,bytes)": {
        "details": "Creates a dispute. Must be called by the arbitrable contract.",
        "params": {
          "_extraData": "Additional info about the dispute to be created. We use it to pass the ID of the subcourt to create the dispute in (first 32 bytes) and the minimum number of jurors required (next 32 bytes).",
          "_numberOfChoices": "Number of choices to choose from in the dispute to be created."
        },
        "returns": {
          "disputeID": "The ID of the created dispute."
        }
      },
      "createSubcourt(uint96,bool,uint256,uint256,uint256,uint256,uint256[4],uint256)": {
        "details": "Creates a subcourt under a specified parent court.",
        "params": {
          "_alpha": "The `alpha` property value of the subcourt.",
          "_feeForJuror": "The `feeForJuror` property value of the subcourt.",
          "_hiddenVotes": "The `hiddenVotes` property value of the subcourt.",
          "_jurorsForCourtJump": "The `jurorsForCourtJump` property value of the subcourt.",
          "_minStake": "The `minStake` property value of the subcourt.",
          "_parent": "The `parent` property value of the subcourt.",
          "_sortitionSumTreeK": "The number of children per node of the subcourt's sortition sum tree.",
          "_timesPerPeriod": "The `timesPerPeriod` property value of the subcourt."
        }
      },
      "currentRuling(uint256)": {
        "details": "Gets the current ruling of a specified dispute.",
        "params": {
          "_disputeID": "The ID of the dispute."
        },
        "returns": {
          "ruling": "The current ruling."
        }
      },
      "executeDelayedSetStakes(uint256)": {
        "details": "Executes the next delayed set stakes.  `O(n)` where `n` is the number of iterations to run.",
        "params": {
          "_iterations": "The number of delayed set stakes to execute."
        }
      },
      "executeGovernorProposal(address,uint256,bytes)": {
        "details": "Lets the governor call anything on behalf of the contract.",
        "params": {
          "_amount": "The value sent with the call.",
          "_data": "The data sent with the call.",
          "_destination": "The destination of the call."
        }
      },
      "getDispute(uint256)": {
        "details": "Gets a specified dispute's non primitive properties.",
        "params": {
          "_disputeID": "The ID of the dispute."
        },
        "returns": {
          "penaltiesInEachRound": "The dispute's amount of tokens collected from penalties in each round.  `O(a)` where  `a` is the number of appeals of the dispute.",
          "repartitionsInEachRound": "The dispute's counter of vote reward repartitions made in each round.",
          "tokensAtStakePerJuror": "The dispute's required tokens at stake per Juror.",
          "totalFeesForJurors": "The dispute's total fees for Jurors.",
          "votesInEachRound": "The dispute's counter of votes made in each round.",
          "votesLengths": "The dispute's vote length."
        }
      },
      "getJuror(address)": {
        "details": "Gets a specified juror's non primitive properties.",
        "params": {
          "_account": "The address of the juror."
        },
        "returns": {
          "subcourtIDs": "The juror's IDs of subcourts where the juror has stake path."
        }
      },
      "getSubcourt(uint96)": {
        "details": "Gets a specified subcourt's non primitive properties.",
        "params": {
          "_subcourtID": "The ID of the subcourt."
        },
        "returns": {
          "children": "The subcourt's child court list.",
          "timesPerPeriod": "The subcourt's time per period."
        }
      },
      "getVote(uint256,uint256,uint256)": {
        "details": "Gets a specified vote for a specified appeal in a specified dispute.",
        "params": {
          "_appeal": "The appeal.",
          "_disputeID": "The ID of the dispute.",
          "_voteID": "The ID of the vote."
        },
        "returns": {
          "account": "The account for vote.",
          "choice": " The choice for vote.",
          "commit": " The commit for vote.",
          "voted": "True if the account voted, False otherwise."
        }
      },
      "getVoteCounter(uint256,uint256)": {
        "details": "Gets the vote counter for a specified appeal in a specified dispute.  Note: This function is only to be used by the interface and it won't work if the number of choices is too high.",
        "params": {
          "_appeal": "The appeal.",
          "_disputeID": "The ID of the dispute."
        },
        "returns": {
          "counts": "The count.",
          "tied": "Whether the vote tied.  `O(n)` where  `n` is the number of choices of the dispute.",
          "winningChoice": "The winning choice."
        }
      },
      "initialize(address,address,address,uint256,uint256,bool,uint256[4],uint256[4],uint256,address,address)": {
        "details": "Constructs the KlerosLiquid contract.",
        "params": {
          "_RNGenerator": "The address of the random number generator contract.",
          "_courtParameters": "MinStake, alpha, feeForJuror and jurorsForCourtJump respectively.",
          "_foreignGateway": "Foreign gateway on xDai.",
          "_governor": "The governor's address.",
          "_hiddenVotes": "The `hiddenVotes` property value of the general court.",
          "_maxDrawingTime": "The maximum time that the drawing phase should last.",
          "_minStakingTime": "The minimum time that the staking phase should last.",
          "_pinakion": "The address of the token contract.",
          "_sortitionSumTreeK": "The number of children per node of the general court's sortition sum tree.",
          "_timesPerPeriod": "The `timesPerPeriod` property value of the general court.",
          "_weth": "Weth contract."
        }
      },
      "onApprove(address,address,uint256)": {
        "details": "Notifies the controller about an approval allowing the controller to react if desired.",
        "params": {
          "_amount": "The amount in the `approve()` call.",
          "_owner": "The address that calls `approve()`.",
          "_spender": "The spender in the `approve()` call."
        },
        "returns": {
          "allowed": "Whether the operation should be allowed or not."
        }
      },
      "onTransfer(address,address,uint256)": {
        "details": "Notifies the controller about a token transfer allowing the controller to react if desired.",
        "params": {
          "_amount": "The amount of the transfer.",
          "_from": "The origin of the transfer.",
          "_to": "The destination of the transfer."
        },
        "returns": {
          "allowed": "Whether the operation should be allowed or not."
        }
      },
      "proxyPayment(address)": {
        "details": "DEPRECATED. Called when `_owner` sends ETH to the Wrapped Token contract.",
        "params": {
          "_owner": "The address that sent the ETH to create tokens."
        },
        "returns": {
          "allowed": "Whether the operation should be allowed or not."
        }
      },
      "rule(uint256,uint256)": {
        "details": "Receive the ruling from foreign gateway which technically is an arbitrator of this contract.",
        "params": {
          "_disputeID": "ID of the dispute.",
          "_ruling": "Ruling given by V2 court and relayed by foreign gateway."
        }
      },
      "setStake(uint96,uint128)": {
        "details": "Sets the caller's stake in a subcourt.",
        "params": {
          "_stake": "The new stake.",
          "_subcourtID": "The ID of the subcourt."
        }
      },
      "stakeOf(address,uint96)": {
        "details": "Gets the stake of a specified juror in a specified subcourt.",
        "params": {
          "_account": "The address of the juror.",
          "_subcourtID": "The ID of the subcourt."
        },
        "returns": {
          "stake": "The stake."
        }
      }
    },
    "title": "xKlerosLiquidV2",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 143,
        "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 146,
        "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2130,
        "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
        "label": "governor",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2133,
        "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
        "label": "pinakion",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(WrappedPinakion)1864"
      },
      {
        "astId": 2136,
        "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
        "label": "RNGenerator",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IRandomAuRa)1919"
      },
      {
        "astId": 2139,
        "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
        "label": "phase",
        "offset": 20,
        "slot": "2",
        "type": "t_enum(Phase)1960"
      },
      {
        "astId": 2141,
        "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
        "label": "lastPhaseChange",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2143,
        "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
        "label": "disputesWithoutJurors",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2145,
        "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
        "label": "RNBlock",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2147,
        "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
        "label": "RN",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2149,
        "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
        "label": "minStakingTime",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2151,
        "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
        "label": "maxDrawingTime",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2153,
        "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
        "label": "lockInsolventTransfers",
        "offset": 0,
        "slot": "9",
        "type": "t_bool"
      },
      {
        "astId": 2157,
        "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
        "label": "courts",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_struct(Court)1986_storage)dyn_storage"
      },
      {
        "astId": 2164,
        "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
        "label": "sortitionSumTrees",
        "offset": 0,
        "slot": "11",
        "type": "t_struct(SortitionSumTrees)3785_storage"
      },
      {
        "astId": 2169,
        "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
        "label": "delayedSetStakes",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_struct(DelayedSetStake)1993_storage)"
      },
      {
        "astId": 2171,
        "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
        "label": "nextDelayedSetStake",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 2173,
        "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
        "label": "lastDelayedSetStake",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 2178,
        "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
        "label": "disputes",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_struct(Dispute)2054_storage)"
      },
      {
        "astId": 2180,
        "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
        "label": "totalDisputes",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 2185,
        "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
        "label": "jurors",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_struct(Juror)2062_storage)"
      },
      {
        "astId": 2188,
        "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
        "label": "foreignGateway",
        "offset": 0,
        "slot": "18",
        "type": "t_contract(IForeignGateway)1133"
      },
      {
        "astId": 2191,
        "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
        "label": "weth",
        "offset": 0,
        "slot": "19",
        "type": "t_contract(IERC20)383"
      },
      {
        "astId": 2195,
        "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
        "label": "disputesRuling",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_array(t_struct(Vote)2002_storage)dyn_storage)dyn_storage": {
        "base": "t_array(t_struct(Vote)2002_storage)dyn_storage",
        "encoding": "dynamic_array",
        "label": "struct xKlerosLiquidV2.Vote[][]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Court)1986_storage)dyn_storage": {
        "base": "t_struct(Court)1986_storage",
        "encoding": "dynamic_array",
        "label": "struct xKlerosLiquidV2.Court[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Vote)2002_storage)dyn_storage": {
        "base": "t_struct(Vote)2002_storage",
        "encoding": "dynamic_array",
        "label": "struct xKlerosLiquidV2.Vote[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(VoteCounter)2011_storage)dyn_storage": {
        "base": "t_struct(VoteCounter)2011_storage",
        "encoding": "dynamic_array",
        "label": "struct xKlerosLiquidV2.VoteCounter[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)4_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[4]",
        "numberOfBytes": "128"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint96)dyn_storage": {
        "base": "t_uint96",
        "encoding": "dynamic_array",
        "label": "uint96[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IArbitrable)1048": {
        "encoding": "inplace",
        "label": "contract IArbitrable",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)383": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IForeignGateway)1133": {
        "encoding": "inplace",
        "label": "contract IForeignGateway",
        "numberOfBytes": "20"
      },
      "t_contract(IRandomAuRa)1919": {
        "encoding": "inplace",
        "label": "contract IRandomAuRa",
        "numberOfBytes": "20"
      },
      "t_contract(WrappedPinakion)1864": {
        "encoding": "inplace",
        "label": "contract WrappedPinakion",
        "numberOfBytes": "20"
      },
      "t_enum(Period)1966": {
        "encoding": "inplace",
        "label": "enum xKlerosLiquidV2.Period",
        "numberOfBytes": "1"
      },
      "t_enum(Phase)1960": {
        "encoding": "inplace",
        "label": "enum xKlerosLiquidV2.Phase",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Juror)2062_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct xKlerosLiquidV2.Juror)",
        "numberOfBytes": "32",
        "value": "t_struct(Juror)2062_storage"
      },
      "t_mapping(t_bytes32,t_struct(SortitionSumTree)3779_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct SortitionSumTreeFactory.SortitionSumTree)",
        "numberOfBytes": "32",
        "value": "t_struct(SortitionSumTree)3779_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_struct(DelayedSetStake)1993_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct xKlerosLiquidV2.DelayedSetStake)",
        "numberOfBytes": "32",
        "value": "t_struct(DelayedSetStake)1993_storage"
      },
      "t_mapping(t_uint256,t_struct(Dispute)2054_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct xKlerosLiquidV2.Dispute)",
        "numberOfBytes": "32",
        "value": "t_struct(Dispute)2054_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Court)1986_storage": {
        "encoding": "inplace",
        "label": "struct xKlerosLiquidV2.Court",
        "members": [
          {
            "astId": 1968,
            "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
            "label": "parent",
            "offset": 0,
            "slot": "0",
            "type": "t_uint96"
          },
          {
            "astId": 1971,
            "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
            "label": "children",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 1973,
            "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
            "label": "hiddenVotes",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 1975,
            "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
            "label": "minStake",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1977,
            "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
            "label": "alpha",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1979,
            "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
            "label": "feeForJuror",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1981,
            "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
            "label": "jurorsForCourtJump",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 1985,
            "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
            "label": "timesPerPeriod",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_uint256)4_storage"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(DelayedSetStake)1993_storage": {
        "encoding": "inplace",
        "label": "struct xKlerosLiquidV2.DelayedSetStake",
        "members": [
          {
            "astId": 1988,
            "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
            "label": "account",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1990,
            "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
            "label": "subcourtID",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          },
          {
            "astId": 1992,
            "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
            "label": "stake",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Dispute)2054_storage": {
        "encoding": "inplace",
        "label": "struct xKlerosLiquidV2.Dispute",
        "members": [
          {
            "astId": 2013,
            "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
            "label": "subcourtID",
            "offset": 0,
            "slot": "0",
            "type": "t_uint96"
          },
          {
            "astId": 2016,
            "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
            "label": "arbitrated",
            "offset": 12,
            "slot": "0",
            "type": "t_contract(IArbitrable)1048"
          },
          {
            "astId": 2018,
            "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
            "label": "numberOfChoices",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2021,
            "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
            "label": "period",
            "offset": 0,
            "slot": "2",
            "type": "t_enum(Period)1966"
          },
          {
            "astId": 2023,
            "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
            "label": "lastPeriodChange",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2028,
            "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
            "label": "votes",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_array(t_struct(Vote)2002_storage)dyn_storage)dyn_storage"
          },
          {
            "astId": 2032,
            "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
            "label": "voteCounters",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_struct(VoteCounter)2011_storage)dyn_storage"
          },
          {
            "astId": 2035,
            "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
            "label": "tokensAtStakePerJuror",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 2038,
            "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
            "label": "totalFeesForJurors",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 2040,
            "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
            "label": "drawsInRound",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 2042,
            "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
            "label": "commitsInRound",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 2045,
            "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
            "label": "votesInEachRound",
            "offset": 0,
            "slot": "10",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 2048,
            "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
            "label": "repartitionsInEachRound",
            "offset": 0,
            "slot": "11",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 2051,
            "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
            "label": "penaltiesInEachRound",
            "offset": 0,
            "slot": "12",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 2053,
            "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
            "label": "ruled",
            "offset": 0,
            "slot": "13",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "448"
      },
      "t_struct(Juror)2062_storage": {
        "encoding": "inplace",
        "label": "struct xKlerosLiquidV2.Juror",
        "members": [
          {
            "astId": 2057,
            "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
            "label": "subcourtIDs",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint96)dyn_storage"
          },
          {
            "astId": 2059,
            "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
            "label": "stakedTokens",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2061,
            "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
            "label": "lockedTokens",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(SortitionSumTree)3779_storage": {
        "encoding": "inplace",
        "label": "struct SortitionSumTreeFactory.SortitionSumTree",
        "members": [
          {
            "astId": 3764,
            "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
            "label": "K",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3767,
            "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
            "label": "stack",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 3770,
            "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
            "label": "nodes",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 3774,
            "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
            "label": "IDsToNodeIndexes",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_bytes32,t_uint256)"
          },
          {
            "astId": 3778,
            "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
            "label": "nodeIndexesToIDs",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_bytes32)"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(SortitionSumTrees)3785_storage": {
        "encoding": "inplace",
        "label": "struct SortitionSumTreeFactory.SortitionSumTrees",
        "members": [
          {
            "astId": 3784,
            "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
            "label": "sortitionSumTrees",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_bytes32,t_struct(SortitionSumTree)3779_storage)"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Vote)2002_storage": {
        "encoding": "inplace",
        "label": "struct xKlerosLiquidV2.Vote",
        "members": [
          {
            "astId": 1995,
            "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
            "label": "account",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1997,
            "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
            "label": "commit",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 1999,
            "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
            "label": "choice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2001,
            "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
            "label": "voted",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(VoteCounter)2011_storage": {
        "encoding": "inplace",
        "label": "struct xKlerosLiquidV2.VoteCounter",
        "members": [
          {
            "astId": 2004,
            "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
            "label": "winningChoice",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2008,
            "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
            "label": "counts",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 2010,
            "contract": "src/kleros-v1/kleros-liquid-xdai/xKlerosLiquidV2.sol:xKlerosLiquidV2",
            "label": "tied",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}
