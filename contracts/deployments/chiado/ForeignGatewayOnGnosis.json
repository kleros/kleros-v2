{
  "address": "0x2357ef115E98d171b083105E9b398231206989A3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_veaOutbox",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_homeChainID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_homeGateway",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "_accepted",
          "type": "bool"
        }
      ],
      "name": "AcceptedFeeToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint96",
          "name": "_courtID",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_feeForJuror",
          "type": "uint256"
        }
      ],
      "name": "ArbitrationCostModified",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_foreignBlockHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_foreignArbitrable",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_foreignDisputeID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_choices",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_extraData",
          "type": "bytes"
        }
      ],
      "name": "CrossChainDisputeOutgoing",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IArbitrableV2",
          "name": "_arbitrable",
          "type": "address"
        }
      ],
      "name": "DisputeCreation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IArbitrableV2",
          "name": "_arbitrable",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_ruling",
          "type": "uint256"
        }
      ],
      "name": "Ruling",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_NB_OF_JURORS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "arbitrationCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_extraData",
          "type": "bytes"
        }
      ],
      "name": "arbitrationCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "cost",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "_courtID",
          "type": "uint96"
        },
        {
          "internalType": "uint256",
          "name": "_feeForJuror",
          "type": "uint256"
        }
      ],
      "name": "changeCourtJurorFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        }
      ],
      "name": "changeGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_homeGateway",
          "type": "address"
        }
      ],
      "name": "changeHomeGateway",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_veaOutbox",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_gracePeriod",
          "type": "uint256"
        }
      ],
      "name": "changeVea",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_choices",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_extraData",
          "type": "bytes"
        }
      ],
      "name": "createDispute",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "disputeID",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "createDispute",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "currentRuling",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deprecatedVeaOutbox",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deprecatedVeaOutboxExpiration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_disputeHash",
          "type": "bytes32"
        }
      ],
      "name": "disputeHashToForeignID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "disputeHashtoDisputeData",
      "outputs": [
        {
          "internalType": "uint248",
          "name": "id",
          "type": "uint248"
        },
        {
          "internalType": "bool",
          "name": "ruled",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "arbitrable",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "paid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "name": "feeForJuror",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "homeChainID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "homeGateway",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_messageSender",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_disputeHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_ruling",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_relayer",
          "type": "address"
        }
      ],
      "name": "relayRule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "senderGateway",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "veaOutbox",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_disputeHash",
          "type": "bytes32"
        }
      ],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x90d4679d5b2d61dac87d2f1519299a223831d00eb162f4ef9a982d6558695740",
  "receipt": {
    "to": null,
    "from": "0xF50E77f2A2B6138D16c6c7511562E5C33c4B15A3",
    "contractAddress": "0x2357ef115E98d171b083105E9b398231206989A3",
    "transactionIndex": 0,
    "gasUsed": "1061402",
    "logsBloom": "0x
    "blockHash": "0x1117c97e7b780726a2b910b7229e4fa2b82e40570a26af3a2473580e7aa77cf9",
    "transactionHash": "0x90d4679d5b2d61dac87d2f1519299a223831d00eb162f4ef9a982d6558695740",
    "logs": [],
    "blockNumber": 4620678,
    "cumulativeGasUsed": "1061402",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF50E77f2A2B6138D16c6c7511562E5C33c4B15A3",
    "0xdFd7aDEb43d46FA3f16FB3e27F7fe85c3f5BD89D",
    "0x0000000000000000000000000000000000000000000000000000000000066eed",
    "0xDecAae1d6eA668e70bf5657Ee2b2fAFB96a6692F"
  ],
  "numDeployments": 4,
  "solcInputHash": "961befc2fb36daa22c7c449f4b260d32",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_veaOutbox\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_homeChainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_homeGateway\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_accepted\",\"type\":\"bool\"}],\"name\":\"AcceptedFeeToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint96\",\"name\":\"_courtID\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_feeForJuror\",\"type\":\"uint256\"}],\"name\":\"ArbitrationCostModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_foreignBlockHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_foreignArbitrable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_foreignDisputeID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_choices\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"CrossChainDisputeOutgoing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IArbitrableV2\",\"name\":\"_arbitrable\",\"type\":\"address\"}],\"name\":\"DisputeCreation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IArbitrableV2\",\"name\":\"_arbitrable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ruling\",\"type\":\"uint256\"}],\"name\":\"Ruling\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_NB_OF_JURORS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"arbitrationCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"arbitrationCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_courtID\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"_feeForJuror\",\"type\":\"uint256\"}],\"name\":\"changeCourtJurorFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"name\":\"changeGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_homeGateway\",\"type\":\"address\"}],\"name\":\"changeHomeGateway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_veaOutbox\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gracePeriod\",\"type\":\"uint256\"}],\"name\":\"changeVea\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_choices\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"createDispute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeID\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"createDispute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"currentRuling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deprecatedVeaOutbox\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deprecatedVeaOutboxExpiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_disputeHash\",\"type\":\"bytes32\"}],\"name\":\"disputeHashToForeignID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"disputeHashtoDisputeData\",\"outputs\":[{\"internalType\":\"uint248\",\"name\":\"id\",\"type\":\"uint248\"},{\"internalType\":\"bool\",\"name\":\"ruled\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"arbitrable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"name\":\"feeForJuror\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"homeChainID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"homeGateway\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_messageSender\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_disputeHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_ruling\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_relayer\",\"type\":\"address\"}],\"name\":\"relayRule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderGateway\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veaOutbox\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_disputeHash\",\"type\":\"bytes32\"}],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AcceptedFeeToken(address,bool)\":{\"details\":\"To be emitted when an ERC20 token is added or removed as a method to pay fees.\",\"params\":{\"_accepted\":\"Whether the token is accepted or not.\",\"_token\":\"The ERC20 token.\"}},\"CrossChainDisputeOutgoing(bytes32,address,uint256,uint256,bytes)\":{\"details\":\"To be emitted when a dispute is sent to the IHomeGateway.\",\"params\":{\"_foreignArbitrable\":\"The address of the Arbitrable contract.\",\"_foreignBlockHash\":\"foreignBlockHash\",\"_foreignDisputeID\":\"The identifier of the dispute in the Arbitrable contract.\"}},\"DisputeCreation(uint256,address)\":{\"details\":\"To be emitted when a dispute is created.\",\"params\":{\"_arbitrable\":\"The contract which created the dispute.\",\"_disputeID\":\"The identifier of the dispute in the Arbitrator contract.\"}},\"Ruling(address,uint256,uint256)\":{\"details\":\"To be raised when a ruling is given.\",\"params\":{\"_arbitrable\":\"The arbitrable receiving the ruling.\",\"_disputeID\":\"The identifier of the dispute in the Arbitrator contract.\",\"_ruling\":\"The ruling which was given.\"}}},\"kind\":\"dev\",\"methods\":{\"arbitrationCost(bytes)\":{\"details\":\"Compute the cost of arbitration denominated in the native currency, typically ETH.      It is recommended not to increase it often, as it can be highly time and gas consuming for the arbitrated contracts to cope with fee augmentation.\",\"params\":{\"_extraData\":\"Additional info about the dispute. We use it to pass the ID of the dispute's court (first 32 bytes), the minimum number of jurors required (next 32 bytes) and the ID of the specific dispute kit (last 32 bytes).\"},\"returns\":{\"cost\":\"The arbitration cost in ETH.\"}},\"arbitrationCost(bytes,address)\":{\"details\":\"Compute the cost of arbitration denominated in `_feeToken`.      It is recommended not to increase it often, as it can be highly time and gas consuming for the arbitrated contracts to cope with fee augmentation.\",\"params\":{\"_extraData\":\"Additional info about the dispute. We use it to pass the ID of the dispute's court (first 32 bytes), the minimum number of jurors required (next 32 bytes) and the ID of the specific dispute kit (last 32 bytes).\",\"_feeToken\":\"The ERC20 token used to pay fees.\"},\"returns\":{\"_0\":\"The arbitration cost in `_feeToken`.\"}},\"changeCourtJurorFee(uint96,uint256)\":{\"details\":\"Changes the `feeForJuror` property value of a specified court.\",\"params\":{\"_courtID\":\"The ID of the court on the v2 arbitrator. Not to be confused with the courtID on KlerosLiquid.\",\"_feeForJuror\":\"The new value for the `feeForJuror` property value.\"}},\"changeGovernor(address)\":{\"details\":\"Changes the governor.\",\"params\":{\"_governor\":\"The address of the new governor.\"}},\"changeHomeGateway(address)\":{\"details\":\"Changes the home gateway.\",\"params\":{\"_homeGateway\":\"The address of the new home gateway.\"}},\"changeVea(address,uint256)\":{\"details\":\"Changes the outbox.\",\"params\":{\"_gracePeriod\":\"The duration to accept messages from the deprecated bridge (if at all).\",\"_veaOutbox\":\"The address of the new outbox.\"}},\"createDispute(uint256,bytes)\":{\"details\":\"Create a dispute and pay for the fees in the native currency, typically ETH.      Must be called by the arbitrable contract.      Must pay at least arbitrationCost(_extraData).\",\"params\":{\"_extraData\":\"Additional info about the dispute. We use it to pass the ID of the dispute's court (first 32 bytes), the minimum number of jurors required (next 32 bytes) and the ID of the specific dispute kit (last 32 bytes).\",\"_numberOfChoices\":\"The number of choices the arbitrator can choose from in this dispute.\"},\"returns\":{\"disputeID\":\"The identifier of the dispute created.\"}},\"createDispute(uint256,bytes,address,uint256)\":{\"details\":\"Create a dispute and pay for the fees in a supported ERC20 token.      Must be called by the arbitrable contract.      Must pay at least arbitrationCost(_extraData).\",\"params\":{\"_extraData\":\"Additional info about the dispute. We use it to pass the ID of the dispute's court (first 32 bytes), the minimum number of jurors required (next 32 bytes) and the ID of the specific dispute kit (last 32 bytes).\",\"_feeAmount\":\"Amount of the ERC20 token used to pay fees.\",\"_feeToken\":\"The ERC20 token used to pay fees.\",\"_numberOfChoices\":\"The number of choices the arbitrator can choose from in this dispute.\"},\"returns\":{\"_0\":\"The identifier of the dispute created.\"}},\"disputeHashToForeignID(bytes32)\":{\"details\":\"Looks up the local foreign disputeID for a disputeHash\",\"params\":{\"_disputeHash\":\"dispute hash\"}},\"withdrawFees(bytes32)\":{\"params\":{\"_disputeHash\":\"The dispute hash for which to withdraw the fees.\"}}},\"stateVariables\":{\"homeChainID\":{\"return\":\"The chain ID where the corresponding home gateway is deployed.\",\"returns\":{\"_0\":\"The chain ID where the corresponding home gateway is deployed.\"}},\"homeGateway\":{\"return\":\"The address of the corresponding home gateway.\",\"returns\":{\"_0\":\"The address of the corresponding home gateway.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"relayRule(address,bytes32,uint256,address)\":{\"notice\":\"Relay the rule call from the home gateway to the arbitrable.\"},\"withdrawFees(bytes32)\":{\"notice\":\"Reimburses the dispute fees to the relayer who paid for these fees on the home chain.\"}},\"notice\":\"Foreign Gateway Counterpart of `HomeGateway`\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/gateway/ForeignGateway.sol\":\"ForeignGateway\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@kleros/vea-contracts/src/interfaces/gateways/IReceiverGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// @custom:authors: [@jaybuidl, @shotaronowhere]\\n/// @custom:reviewers: []\\n/// @custom:auditors: []\\n/// @custom:bounties: []\\n/// @custom:deployments: []\\n\\npragma solidity 0.8.18;\\n\\ninterface IReceiverGateway {\\n    function veaOutbox() external view returns (address);\\n\\n    function senderGateway() external view returns (address);\\n}\\n\",\"keccak256\":\"0xde6bdbe57ced7c1e79d62dca23aa8c2322e031da91ceac22cefd185f1e3740ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"src/arbitration/interfaces/IArbitrableV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"./IArbitratorV2.sol\\\";\\n\\n/// @title IArbitrableV2\\n/// @notice Arbitrable interface.\\n/// When developing arbitrable contracts, we need to:\\n/// - Define the action taken when a ruling is received by the contract.\\n/// - Allow dispute creation. For this a function must call arbitrator.createDispute{value: _fee}(_choices,_extraData);\\ninterface IArbitrableV2 {\\n    /// @dev To be emitted when a new dispute template is created.\\n    /// @param _templateId The identifier of the dispute template.\\n    /// @param _templateTag An optional tag for the dispute template, such as \\\"registration\\\" or \\\"removal\\\".\\n    /// @param _templateData The template data.\\n    event DisputeTemplate(uint256 indexed _templateId, string indexed _templateTag, string _templateData);\\n\\n    /// @dev To be emitted when a dispute is created to link the correct meta-evidence to the disputeID.\\n    /// @param _arbitrator The arbitrator of the contract.\\n    /// @param _arbitrableDisputeID The identifier of the dispute in the Arbitrable contract.\\n    /// @param _externalDisputeID An identifier created outside Kleros by the protocol requesting arbitration.\\n    /// @param _templateId The identifier of the dispute template. Should not be used with _templateUri.\\n    /// @param _templateUri The URI to the dispute template. For example on IPFS: starting with '/ipfs/'. Should not be used with _templateId.\\n    event DisputeRequest(\\n        IArbitratorV2 indexed _arbitrator,\\n        uint256 indexed _arbitrableDisputeID,\\n        uint256 _externalDisputeID,\\n        uint256 _templateId,\\n        string _templateUri\\n    );\\n\\n    /// @dev To be raised when a ruling is given.\\n    /// @param _arbitrator The arbitrator giving the ruling.\\n    /// @param _disputeID The identifier of the dispute in the Arbitrator contract.\\n    /// @param _ruling The ruling which was given.\\n    event Ruling(IArbitratorV2 indexed _arbitrator, uint256 indexed _disputeID, uint256 _ruling);\\n\\n    /// @dev Give a ruling for a dispute.\\n    ///      Must be called by the arbitrator.\\n    ///      The purpose of this function is to ensure that the address calling it has the right to rule on the contract.\\n    /// @param _disputeID The identifier of the dispute in the Arbitrator contract.\\n    /// @param _ruling Ruling given by the arbitrator.\\n    /// Note that 0 is reserved for \\\"Not able/wanting to make a decision\\\".\\n    function rule(uint256 _disputeID, uint256 _ruling) external;\\n}\\n\",\"keccak256\":\"0x7a259401627ba5546d9eb0264275aa1be9762f8a514545ae99d8c356ebf41f4f\",\"license\":\"MIT\"},\"src/arbitration/interfaces/IArbitratorV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IArbitrableV2.sol\\\";\\n\\n/// @title Arbitrator\\n/// Arbitrator interface that implements the new arbitration standard.\\n/// Unlike the ERC-792 this standard is not concerned with appeals, so each arbitrator can implement an appeal system that suits it the most.\\n/// When developing arbitrator contracts we need to:\\n/// - Define the functions for dispute creation (createDispute). Don't forget to store the arbitrated contract and the disputeID (which should be unique, may nbDisputes).\\n/// - Define the functions for cost display (arbitrationCost).\\n/// - Allow giving rulings. For this a function must call arbitrable.rule(disputeID, ruling).\\ninterface IArbitratorV2 {\\n    /// @dev To be emitted when a dispute is created.\\n    /// @param _disputeID The identifier of the dispute in the Arbitrator contract.\\n    /// @param _arbitrable The contract which created the dispute.\\n    event DisputeCreation(uint256 indexed _disputeID, IArbitrableV2 indexed _arbitrable);\\n\\n    /// @dev To be raised when a ruling is given.\\n    /// @param _arbitrable The arbitrable receiving the ruling.\\n    /// @param _disputeID The identifier of the dispute in the Arbitrator contract.\\n    /// @param _ruling The ruling which was given.\\n    event Ruling(IArbitrableV2 indexed _arbitrable, uint256 indexed _disputeID, uint256 _ruling);\\n\\n    /// @dev To be emitted when an ERC20 token is added or removed as a method to pay fees.\\n    /// @param _token The ERC20 token.\\n    /// @param _accepted Whether the token is accepted or not.\\n    event AcceptedFeeToken(IERC20 indexed _token, bool indexed _accepted);\\n\\n    /// @dev Create a dispute and pay for the fees in the native currency, typically ETH.\\n    ///      Must be called by the arbitrable contract.\\n    ///      Must pay at least arbitrationCost(_extraData).\\n    /// @param _numberOfChoices The number of choices the arbitrator can choose from in this dispute.\\n    /// @param _extraData Additional info about the dispute. We use it to pass the ID of the dispute's court (first 32 bytes), the minimum number of jurors required (next 32 bytes) and the ID of the specific dispute kit (last 32 bytes).\\n    /// @return disputeID The identifier of the dispute created.\\n    function createDispute(\\n        uint256 _numberOfChoices,\\n        bytes calldata _extraData\\n    ) external payable returns (uint256 disputeID);\\n\\n    /// @dev Create a dispute and pay for the fees in a supported ERC20 token.\\n    ///      Must be called by the arbitrable contract.\\n    ///      Must pay at least arbitrationCost(_extraData).\\n    /// @param _numberOfChoices The number of choices the arbitrator can choose from in this dispute.\\n    /// @param _extraData Additional info about the dispute. We use it to pass the ID of the dispute's court (first 32 bytes), the minimum number of jurors required (next 32 bytes) and the ID of the specific dispute kit (last 32 bytes).\\n    /// @param _feeToken The ERC20 token used to pay fees.\\n    /// @param _feeAmount Amount of the ERC20 token used to pay fees.\\n    /// @return disputeID The identifier of the dispute created.\\n    function createDispute(\\n        uint256 _numberOfChoices,\\n        bytes calldata _extraData,\\n        IERC20 _feeToken,\\n        uint256 _feeAmount\\n    ) external returns (uint256 disputeID);\\n\\n    /// @dev Compute the cost of arbitration denominated in the native currency, typically ETH.\\n    ///      It is recommended not to increase it often, as it can be highly time and gas consuming for the arbitrated contracts to cope with fee augmentation.\\n    /// @param _extraData Additional info about the dispute. We use it to pass the ID of the dispute's court (first 32 bytes), the minimum number of jurors required (next 32 bytes) and the ID of the specific dispute kit (last 32 bytes).\\n    /// @return cost The arbitration cost in ETH.\\n    function arbitrationCost(bytes calldata _extraData) external view returns (uint256 cost);\\n\\n    /// @dev Compute the cost of arbitration denominated in `_feeToken`.\\n    ///      It is recommended not to increase it often, as it can be highly time and gas consuming for the arbitrated contracts to cope with fee augmentation.\\n    /// @param _extraData Additional info about the dispute. We use it to pass the ID of the dispute's court (first 32 bytes), the minimum number of jurors required (next 32 bytes) and the ID of the specific dispute kit (last 32 bytes).\\n    /// @param _feeToken The ERC20 token used to pay fees.\\n    /// @return cost The arbitration cost in `_feeToken`.\\n    function arbitrationCost(bytes calldata _extraData, IERC20 _feeToken) external view returns (uint256 cost);\\n\\n    /// @dev Gets the current ruling of a specified dispute.\\n    /// @param _disputeID The ID of the dispute.\\n    /// @return ruling The current ruling.\\n    /// @return tied Whether it's a tie or not.\\n    /// @return overridden Whether the ruling was overridden by appeal funding or not.\\n    function currentRuling(uint256 _disputeID) external view returns (uint256 ruling, bool tied, bool overridden);\\n}\\n\",\"keccak256\":\"0x9001274313a4e7eeda92332bbeeac8972f55e6378874babfaccd56eb283816f0\",\"license\":\"MIT\"},\"src/gateway/ForeignGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// @custom:authors: [@jaybuidl, @shotaronowhere, @shalzz]\\n/// @custom:reviewers: []\\n/// @custom:auditors: []\\n/// @custom:bounties: []\\n/// @custom:deployments: []\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"./interfaces/IForeignGateway.sol\\\";\\n\\n/// Foreign Gateway\\n/// Counterpart of `HomeGateway`\\ncontract ForeignGateway is IForeignGateway {\\n    // ************************************* //\\n    // *         Enums / Structs           * //\\n    // ************************************* //\\n\\n    struct DisputeData {\\n        uint248 id;\\n        bool ruled;\\n        address arbitrable;\\n        uint256 paid;\\n        address relayer;\\n    }\\n\\n    // ************************************* //\\n    // *              Events               * //\\n    // ************************************* //\\n\\n    event ArbitrationCostModified(uint96 indexed _courtID, uint256 _feeForJuror);\\n\\n    // ************************************* //\\n    // *             Storage               * //\\n    // ************************************* //\\n\\n    uint256 public constant DEFAULT_NB_OF_JURORS = 3; // The default number of jurors in a dispute.\\n    uint256 internal localDisputeID = 1; // The disputeID must start from 1 as the KlerosV1 proxy governor depends on this implementation. We now also depend on localDisputeID not ever being zero.\\n    mapping(uint96 => uint256) public feeForJuror; // feeForJuror[v2CourtID], it mirrors the value on KlerosCore.\\n    address public governor;\\n    address public veaOutbox;\\n    uint256 public immutable override homeChainID;\\n    address public override homeGateway;\\n    address public deprecatedVeaOutbox;\\n    uint256 public deprecatedVeaOutboxExpiration;\\n    mapping(bytes32 => DisputeData) public disputeHashtoDisputeData;\\n\\n    // ************************************* //\\n    // *        Function Modifiers         * //\\n    // ************************************* //\\n\\n    modifier onlyFromVea(address _messageSender) {\\n        require(\\n            veaOutbox == msg.sender ||\\n                (block.timestamp < deprecatedVeaOutboxExpiration && deprecatedVeaOutbox == msg.sender),\\n            \\\"Access not allowed: Vea Outbox only.\\\"\\n        );\\n        require(_messageSender == homeGateway, \\\"Access not allowed: HomeGateway only.\\\");\\n        _;\\n    }\\n\\n    modifier onlyByGovernor() {\\n        require(governor == msg.sender, \\\"Access not allowed: Governor only.\\\");\\n        _;\\n    }\\n\\n    // ************************************* //\\n    // *            Constructor            * //\\n    // ************************************* //\\n\\n    constructor(address _governor, address _veaOutbox, uint256 _homeChainID, address _homeGateway) {\\n        governor = _governor;\\n        veaOutbox = _veaOutbox;\\n        homeChainID = _homeChainID;\\n        homeGateway = _homeGateway;\\n    }\\n\\n    // ************************************* //\\n    // *           Governance              * //\\n    // ************************************* //\\n\\n    /// @dev Changes the governor.\\n    /// @param _governor The address of the new governor.\\n    function changeGovernor(address _governor) external {\\n        require(governor == msg.sender, \\\"Access not allowed: Governor only.\\\");\\n        governor = _governor;\\n    }\\n\\n    /// @dev Changes the outbox.\\n    /// @param _veaOutbox The address of the new outbox.\\n    /// @param _gracePeriod The duration to accept messages from the deprecated bridge (if at all).\\n    function changeVea(address _veaOutbox, uint256 _gracePeriod) external onlyByGovernor {\\n        // grace period to relay the remaining messages which are still going through the deprecated bridge.\\n        deprecatedVeaOutboxExpiration = block.timestamp + _gracePeriod;\\n        deprecatedVeaOutbox = veaOutbox;\\n        veaOutbox = _veaOutbox;\\n    }\\n\\n    /// @dev Changes the home gateway.\\n    /// @param _homeGateway The address of the new home gateway.\\n    function changeHomeGateway(address _homeGateway) external {\\n        require(governor == msg.sender, \\\"Access not allowed: Governor only.\\\");\\n        homeGateway = _homeGateway;\\n    }\\n\\n    /// @dev Changes the `feeForJuror` property value of a specified court.\\n    /// @param _courtID The ID of the court on the v2 arbitrator. Not to be confused with the courtID on KlerosLiquid.\\n    /// @param _feeForJuror The new value for the `feeForJuror` property value.\\n    function changeCourtJurorFee(uint96 _courtID, uint256 _feeForJuror) external onlyByGovernor {\\n        feeForJuror[_courtID] = _feeForJuror;\\n        emit ArbitrationCostModified(_courtID, _feeForJuror);\\n    }\\n\\n    // ************************************* //\\n    // *         State Modifiers           * //\\n    // ************************************* //\\n\\n    /// @inheritdoc IArbitratorV2\\n    function createDispute(\\n        uint256 _choices,\\n        bytes calldata _extraData\\n    ) external payable override returns (uint256 disputeID) {\\n        require(msg.value >= arbitrationCost(_extraData), \\\"Not paid enough for arbitration\\\");\\n\\n        disputeID = localDisputeID++;\\n        uint256 chainID;\\n        assembly {\\n            chainID := chainid()\\n        }\\n        bytes32 disputeHash = keccak256(\\n            abi.encodePacked(\\n                \\\"createDispute\\\",\\n                blockhash(block.number - 1),\\n                chainID,\\n                msg.sender,\\n                disputeID,\\n                _choices,\\n                _extraData\\n            )\\n        );\\n\\n        disputeHashtoDisputeData[disputeHash] = DisputeData({\\n            id: uint248(disputeID),\\n            arbitrable: msg.sender,\\n            paid: msg.value,\\n            relayer: address(0),\\n            ruled: false\\n        });\\n\\n        emit CrossChainDisputeOutgoing(blockhash(block.number - 1), msg.sender, disputeID, _choices, _extraData);\\n    }\\n\\n    /// @inheritdoc IArbitratorV2\\n    function createDispute(\\n        uint256 /*_choices*/,\\n        bytes calldata /*_extraData*/,\\n        IERC20 /*_feeToken*/,\\n        uint256 /*_feeAmount*/\\n    ) external pure override returns (uint256) {\\n        revert(\\\"Not supported\\\");\\n    }\\n\\n    /// @inheritdoc IArbitratorV2\\n    function arbitrationCost(bytes calldata _extraData) public view override returns (uint256 cost) {\\n        (uint96 courtID, uint256 minJurors) = extraDataToCourtIDMinJurors(_extraData);\\n        cost = feeForJuror[courtID] * minJurors;\\n    }\\n\\n    /// @inheritdoc IArbitratorV2\\n    function arbitrationCost(\\n        bytes calldata /*_extraData*/,\\n        IERC20 /*_feeToken*/\\n    ) public pure override returns (uint256 /*cost*/) {\\n        revert(\\\"Not supported\\\");\\n    }\\n\\n    /// @inheritdoc IForeignGateway\\n    function relayRule(\\n        address _messageSender,\\n        bytes32 _disputeHash,\\n        uint256 _ruling,\\n        address _relayer\\n    ) external override onlyFromVea(_messageSender) {\\n        DisputeData storage dispute = disputeHashtoDisputeData[_disputeHash];\\n\\n        require(dispute.id != 0, \\\"Dispute does not exist\\\");\\n        require(!dispute.ruled, \\\"Cannot rule twice\\\");\\n\\n        dispute.ruled = true;\\n        dispute.relayer = _relayer;\\n\\n        IArbitrableV2 arbitrable = IArbitrableV2(dispute.arbitrable);\\n        arbitrable.rule(dispute.id, _ruling);\\n    }\\n\\n    /// @inheritdoc IForeignGateway\\n    function withdrawFees(bytes32 _disputeHash) external override {\\n        DisputeData storage dispute = disputeHashtoDisputeData[_disputeHash];\\n        require(dispute.id != 0, \\\"Dispute does not exist\\\");\\n        require(dispute.ruled, \\\"Not ruled yet\\\");\\n\\n        uint256 amount = dispute.paid;\\n        dispute.paid = 0;\\n        payable(dispute.relayer).transfer(amount);\\n    }\\n\\n    // ************************************* //\\n    // *           Public Views            * //\\n    // ************************************* //\\n\\n    /// @inheritdoc IForeignGateway\\n    function disputeHashToForeignID(bytes32 _disputeHash) external view override returns (uint256) {\\n        return disputeHashtoDisputeData[_disputeHash].id;\\n    }\\n\\n    /// @inheritdoc IReceiverGateway\\n    function senderGateway() external view override returns (address) {\\n        return homeGateway;\\n    }\\n\\n    function currentRuling(\\n        uint256 /*_disputeID*/\\n    ) public pure returns (uint256 /*ruling*/, bool /*tied*/, bool /*overridden*/) {\\n        revert(\\\"Not supported\\\");\\n    }\\n\\n    // ************************ //\\n    // *       Internal       * //\\n    // ************************ //\\n\\n    function extraDataToCourtIDMinJurors(\\n        bytes memory _extraData\\n    ) internal view returns (uint96 courtID, uint256 minJurors) {\\n        // Note that here we ignore DisputeKitID\\n        if (_extraData.length >= 64) {\\n            assembly {\\n                // solium-disable-line security/no-inline-assembly\\n                courtID := mload(add(_extraData, 0x20))\\n                minJurors := mload(add(_extraData, 0x40))\\n            }\\n            if (feeForJuror[courtID] == 0) courtID = 0;\\n            if (minJurors == 0) minJurors = DEFAULT_NB_OF_JURORS;\\n        } else {\\n            courtID = 0;\\n            minJurors = DEFAULT_NB_OF_JURORS;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x22ebbed56967cbb41908e6636be3c06b4c528bcb9f1f7556fecdf98945d717a8\",\"license\":\"MIT\"},\"src/gateway/interfaces/IForeignGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// @custom:authors: [@jaybuidl, @shotaronowhere, @shalzz]\\n/// @custom:reviewers: []\\n/// @custom:auditors: []\\n/// @custom:bounties: []\\n/// @custom:deployments: []\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"../../arbitration/interfaces/IArbitratorV2.sol\\\";\\nimport \\\"@kleros/vea-contracts/src/interfaces/gateways/IReceiverGateway.sol\\\";\\n\\ninterface IForeignGateway is IArbitratorV2, IReceiverGateway {\\n    /// @dev To be emitted when a dispute is sent to the IHomeGateway.\\n    /// @param _foreignBlockHash foreignBlockHash\\n    /// @param _foreignArbitrable The address of the Arbitrable contract.\\n    /// @param _foreignDisputeID The identifier of the dispute in the Arbitrable contract.\\n    event CrossChainDisputeOutgoing(\\n        bytes32 _foreignBlockHash,\\n        address indexed _foreignArbitrable,\\n        uint256 indexed _foreignDisputeID,\\n        uint256 _choices,\\n        bytes _extraData\\n    );\\n\\n    /// Relay the rule call from the home gateway to the arbitrable.\\n    function relayRule(address _messageSender, bytes32 _disputeHash, uint256 _ruling, address _forwarder) external;\\n\\n    /// Reimburses the dispute fees to the relayer who paid for these fees on the home chain.\\n    /// @param _disputeHash The dispute hash for which to withdraw the fees.\\n    function withdrawFees(bytes32 _disputeHash) external;\\n\\n    /// @dev Looks up the local foreign disputeID for a disputeHash\\n    /// @param _disputeHash dispute hash\\n    function disputeHashToForeignID(bytes32 _disputeHash) external view returns (uint256);\\n\\n    /// @return The chain ID where the corresponding home gateway is deployed.\\n    function homeChainID() external view returns (uint256);\\n\\n    /// @return The address of the corresponding home gateway.\\n    function homeGateway() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7c403fdd397da09f8ce1a61424f40b0710937ca147c32a6b4f5e4643188abfda\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052600160005534801561001557600080fd5b5060405161118b38038061118b83398101604081905261003491610098565b600280546001600160a01b039586166001600160a01b0319918216179091556003805494861694821694909417909355608091909152600480549190931691161790556100e5565b80516001600160a01b038116811461009357600080fd5b919050565b600080600080608085870312156100ae57600080fd5b6100b78561007c565b93506100c56020860161007c565b9250604085015191506100da6060860161007c565b905092959194509250565b60805161108b61010060003960006101e8015261108b6000f3fe6080604052600436106101355760003560e01c8063a60a4db5116100ab578063d98493f61161006f578063d98493f614610419578063dea580b914610439578063e4c0aaf414610459578063ebb7119414610479578063f6506db414610499578063f7434ea9146104b457600080fd5b8063a60a4db514610311578063bcb1a16614610331578063c13517e114610346578063ce0aaf9514610359578063d3c617ff1461037757600080fd5b806336e41d3d116100fd57806336e41d3d1461024e57806345c9044114610264578063492d85d4146102915780634d53c2a5146102b157806367c51947146102d157806393626084146102f157600080fd5b80630c340a241461013a5780631c3db16d146101775780631debaba6146101b45780631fc6b556146101d65780632e1db89014610218575b600080fd5b34801561014657600080fd5b5060025461015a906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561018357600080fd5b50610197610192366004610c01565b6104d4565b60408051938452911515602084015215159082015260600161016e565b3480156101c057600080fd5b506101d46101cf366004610c32565b6104fa565b005b3480156101e257600080fd5b5061020a7f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200161016e565b34801561022457600080fd5b5061020a610233366004610c01565b6000908152600760205260409020546001600160f81b031690565b34801561025a57600080fd5b5061020a60065481565b34801561027057600080fd5b5061020a61027f366004610c7a565b60016020526000908152604090205481565b34801561029d57600080fd5b506101d46102ac366004610c9c565b610562565b3480156102bd57600080fd5b5060045461015a906001600160a01b031681565b3480156102dd57600080fd5b506101d46102ec366004610cb9565b6105ae565b3480156102fd57600080fd5b5060055461015a906001600160a01b031681565b34801561031d57600080fd5b506101d461032c366004610cd5565b610631565b34801561033d57600080fd5b5061020a600381565b61020a610354366004610d68565b61084e565b34801561036557600080fd5b506004546001600160a01b031661015a565b34801561038357600080fd5b506103db610392366004610c01565b60076020526000908152604090208054600182015460028301546003909301546001600160f81b03831693600160f81b90930460ff16926001600160a01b039283169290911685565b604080516001600160f81b03909616865293151560208601526001600160a01b0392831693850193909352606084015216608082015260a00161016e565b34801561042557600080fd5b5061020a610434366004610db4565b6109ea565b34801561044557600080fd5b5060035461015a906001600160a01b031681565b34801561046557600080fd5b506101d4610474366004610c9c565b610a04565b34801561048557600080fd5b506101d4610494366004610c01565b610a50565b3480156104a557600080fd5b5061020a610434366004610e0b565b3480156104c057600080fd5b5061020a6104cf366004610e72565b610b22565b600080600060405162461bcd60e51b81526004016104f190610eb4565b60405180910390fd5b6002546001600160a01b031633146105245760405162461bcd60e51b81526004016104f190610edb565b61052e8142610f33565b6006555060038054600580546001600160a01b038084166001600160a01b0319928316179092559091169216919091179055565b6002546001600160a01b0316331461058c5760405162461bcd60e51b81526004016104f190610edb565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b031633146105d85760405162461bcd60e51b81526004016104f190610edb565b6001600160601b03821660008181526001602052604090819020839055517f20a6ef9c48f3a1ae927e70bc34e82d974c53d3c98c8fd9e731c4bacd5842c596906106259084815260200190565b60405180910390a25050565b60035484906001600160a01b031633148061066257506006544210801561066257506005546001600160a01b031633145b6106ba5760405162461bcd60e51b8152602060048201526024808201527f416363657373206e6f7420616c6c6f7765643a20566561204f7574626f78206f60448201526337363c9760e11b60648201526084016104f1565b6004546001600160a01b038281169116146107255760405162461bcd60e51b815260206004820152602560248201527f416363657373206e6f7420616c6c6f7765643a20486f6d65476174657761792060448201526437b7363c9760d91b60648201526084016104f1565b6000848152600760205260408120805490916001600160f81b0390911690036107605760405162461bcd60e51b81526004016104f190610f4c565b8054600160f81b900460ff16156107ad5760405162461bcd60e51b815260206004820152601160248201527043616e6e6f742072756c6520747769636560781b60448201526064016104f1565b80546001600160f81b0316600160f81b811782556003820180546001600160a01b038681166001600160a01b031990921691909117909155600183015460405163188d362b60e11b81526004810193909352602483018790521690819063311a6c5690604401600060405180830381600087803b15801561082d57600080fd5b505af1158015610841573d6000803e3d6000fd5b5050505050505050505050565b600061085a8383610b22565b3410156108a95760405162461bcd60e51b815260206004820152601f60248201527f4e6f74207061696420656e6f75676820666f72206172626974726174696f6e0060448201526064016104f1565b6000805490806108b883610f7c565b9091555090504660006108cc600143610f95565b408233858989896040516020016108e99796959493929190610fa8565b60408051601f19818403018152828252805160209182012060a0840183526001600160f81b0380881685526000858401818152338787018181523460608a0190815260808a01858152878652600790985297909320975191511515600160f81b029190931617865551600186810180546001600160a01b039384166001600160a01b031991821617909155955160028801559351600390960180549690911695909416949094179092559092508491907f03e54fa10baada663d819e5d7e4533535bfb6d4407abe51045be84e6c8de0203906109c59043610f95565b408989896040516109d99493929190611001565b60405180910390a350509392505050565b600060405162461bcd60e51b81526004016104f190610eb4565b6002546001600160a01b03163314610a2e5760405162461bcd60e51b81526004016104f190610edb565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000818152600760205260408120805490916001600160f81b039091169003610a8b5760405162461bcd60e51b81526004016104f190610f4c565b8054600160f81b900460ff16610ad35760405162461bcd60e51b815260206004820152600d60248201526c139bdd081c9d5b1959081e595d609a1b60448201526064016104f1565b600281018054600091829055600383015460405191926001600160a01b039091169183156108fc0291849190818181858888f19350505050158015610b1c573d6000803e3d6000fd5b50505050565b6000806000610b6685858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610b9892505050565b6001600160601b0382166000908152600160205260409020549193509150610b8f90829061103e565b95945050505050565b6000806040835110610bf557602083015191506040830151905060016000836001600160601b03166001600160601b0316815260200190815260200160002054600003610be457600091505b80600003610bf0575060035b915091565b50600090506003915091565b600060208284031215610c1357600080fd5b5035919050565b6001600160a01b0381168114610c2f57600080fd5b50565b60008060408385031215610c4557600080fd5b8235610c5081610c1a565b946020939093013593505050565b80356001600160601b0381168114610c7557600080fd5b919050565b600060208284031215610c8c57600080fd5b610c9582610c5e565b9392505050565b600060208284031215610cae57600080fd5b8135610c9581610c1a565b60008060408385031215610ccc57600080fd5b610c5083610c5e565b60008060008060808587031215610ceb57600080fd5b8435610cf681610c1a565b935060208501359250604085013591506060850135610d1481610c1a565b939692955090935050565b60008083601f840112610d3157600080fd5b50813567ffffffffffffffff811115610d4957600080fd5b602083019150836020828501011115610d6157600080fd5b9250929050565b600080600060408486031215610d7d57600080fd5b83359250602084013567ffffffffffffffff811115610d9b57600080fd5b610da786828701610d1f565b9497909650939450505050565b600080600060408486031215610dc957600080fd5b833567ffffffffffffffff811115610de057600080fd5b610dec86828701610d1f565b9094509250506020840135610e0081610c1a565b809150509250925092565b600080600080600060808688031215610e2357600080fd5b85359450602086013567ffffffffffffffff811115610e4157600080fd5b610e4d88828901610d1f565b9095509350506040860135610e6181610c1a565b949793965091946060013592915050565b60008060208385031215610e8557600080fd5b823567ffffffffffffffff811115610e9c57600080fd5b610ea885828601610d1f565b90969095509350505050565b6020808252600d908201526c139bdd081cdd5c1c1bdc9d1959609a1b604082015260600190565b60208082526022908201527f416363657373206e6f7420616c6c6f7765643a20476f7665726e6f72206f6e6c6040820152613c9760f11b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b80820180821115610f4657610f46610f1d565b92915050565b602080825260169082015275111a5cdc1d5d1948191bd95cc81b9bdd08195e1a5cdd60521b604082015260600190565b600060018201610f8e57610f8e610f1d565b5060010190565b81810381811115610f4657610f46610f1d565b6c6372656174654469737075746560981b815287600d82015286602d8201526001600160601b03198660601b16604d820152846061820152836081820152818360a18301376000910160a1019081529695505050505050565b84815283602082015260606040820152816060820152818360808301376000818301608090810191909152601f909201601f191601019392505050565b8082028115828204841417610f4657610f46610f1d56fea2646970667358221220931fd4fe4e99c0813be39446a3a954d163acc18576c61647f74ca12dc071ede964736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106101355760003560e01c8063a60a4db5116100ab578063d98493f61161006f578063d98493f614610419578063dea580b914610439578063e4c0aaf414610459578063ebb7119414610479578063f6506db414610499578063f7434ea9146104b457600080fd5b8063a60a4db514610311578063bcb1a16614610331578063c13517e114610346578063ce0aaf9514610359578063d3c617ff1461037757600080fd5b806336e41d3d116100fd57806336e41d3d1461024e57806345c9044114610264578063492d85d4146102915780634d53c2a5146102b157806367c51947146102d157806393626084146102f157600080fd5b80630c340a241461013a5780631c3db16d146101775780631debaba6146101b45780631fc6b556146101d65780632e1db89014610218575b600080fd5b34801561014657600080fd5b5060025461015a906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561018357600080fd5b50610197610192366004610c01565b6104d4565b60408051938452911515602084015215159082015260600161016e565b3480156101c057600080fd5b506101d46101cf366004610c32565b6104fa565b005b3480156101e257600080fd5b5061020a7f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200161016e565b34801561022457600080fd5b5061020a610233366004610c01565b6000908152600760205260409020546001600160f81b031690565b34801561025a57600080fd5b5061020a60065481565b34801561027057600080fd5b5061020a61027f366004610c7a565b60016020526000908152604090205481565b34801561029d57600080fd5b506101d46102ac366004610c9c565b610562565b3480156102bd57600080fd5b5060045461015a906001600160a01b031681565b3480156102dd57600080fd5b506101d46102ec366004610cb9565b6105ae565b3480156102fd57600080fd5b5060055461015a906001600160a01b031681565b34801561031d57600080fd5b506101d461032c366004610cd5565b610631565b34801561033d57600080fd5b5061020a600381565b61020a610354366004610d68565b61084e565b34801561036557600080fd5b506004546001600160a01b031661015a565b34801561038357600080fd5b506103db610392366004610c01565b60076020526000908152604090208054600182015460028301546003909301546001600160f81b03831693600160f81b90930460ff16926001600160a01b039283169290911685565b604080516001600160f81b03909616865293151560208601526001600160a01b0392831693850193909352606084015216608082015260a00161016e565b34801561042557600080fd5b5061020a610434366004610db4565b6109ea565b34801561044557600080fd5b5060035461015a906001600160a01b031681565b34801561046557600080fd5b506101d4610474366004610c9c565b610a04565b34801561048557600080fd5b506101d4610494366004610c01565b610a50565b3480156104a557600080fd5b5061020a610434366004610e0b565b3480156104c057600080fd5b5061020a6104cf366004610e72565b610b22565b600080600060405162461bcd60e51b81526004016104f190610eb4565b60405180910390fd5b6002546001600160a01b031633146105245760405162461bcd60e51b81526004016104f190610edb565b61052e8142610f33565b6006555060038054600580546001600160a01b038084166001600160a01b0319928316179092559091169216919091179055565b6002546001600160a01b0316331461058c5760405162461bcd60e51b81526004016104f190610edb565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b031633146105d85760405162461bcd60e51b81526004016104f190610edb565b6001600160601b03821660008181526001602052604090819020839055517f20a6ef9c48f3a1ae927e70bc34e82d974c53d3c98c8fd9e731c4bacd5842c596906106259084815260200190565b60405180910390a25050565b60035484906001600160a01b031633148061066257506006544210801561066257506005546001600160a01b031633145b6106ba5760405162461bcd60e51b8152602060048201526024808201527f416363657373206e6f7420616c6c6f7765643a20566561204f7574626f78206f60448201526337363c9760e11b60648201526084016104f1565b6004546001600160a01b038281169116146107255760405162461bcd60e51b815260206004820152602560248201527f416363657373206e6f7420616c6c6f7765643a20486f6d65476174657761792060448201526437b7363c9760d91b60648201526084016104f1565b6000848152600760205260408120805490916001600160f81b0390911690036107605760405162461bcd60e51b81526004016104f190610f4c565b8054600160f81b900460ff16156107ad5760405162461bcd60e51b815260206004820152601160248201527043616e6e6f742072756c6520747769636560781b60448201526064016104f1565b80546001600160f81b0316600160f81b811782556003820180546001600160a01b038681166001600160a01b031990921691909117909155600183015460405163188d362b60e11b81526004810193909352602483018790521690819063311a6c5690604401600060405180830381600087803b15801561082d57600080fd5b505af1158015610841573d6000803e3d6000fd5b5050505050505050505050565b600061085a8383610b22565b3410156108a95760405162461bcd60e51b815260206004820152601f60248201527f4e6f74207061696420656e6f75676820666f72206172626974726174696f6e0060448201526064016104f1565b6000805490806108b883610f7c565b9091555090504660006108cc600143610f95565b408233858989896040516020016108e99796959493929190610fa8565b60408051601f19818403018152828252805160209182012060a0840183526001600160f81b0380881685526000858401818152338787018181523460608a0190815260808a01858152878652600790985297909320975191511515600160f81b029190931617865551600186810180546001600160a01b039384166001600160a01b031991821617909155955160028801559351600390960180549690911695909416949094179092559092508491907f03e54fa10baada663d819e5d7e4533535bfb6d4407abe51045be84e6c8de0203906109c59043610f95565b408989896040516109d99493929190611001565b60405180910390a350509392505050565b600060405162461bcd60e51b81526004016104f190610eb4565b6002546001600160a01b03163314610a2e5760405162461bcd60e51b81526004016104f190610edb565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000818152600760205260408120805490916001600160f81b039091169003610a8b5760405162461bcd60e51b81526004016104f190610f4c565b8054600160f81b900460ff16610ad35760405162461bcd60e51b815260206004820152600d60248201526c139bdd081c9d5b1959081e595d609a1b60448201526064016104f1565b600281018054600091829055600383015460405191926001600160a01b039091169183156108fc0291849190818181858888f19350505050158015610b1c573d6000803e3d6000fd5b50505050565b6000806000610b6685858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610b9892505050565b6001600160601b0382166000908152600160205260409020549193509150610b8f90829061103e565b95945050505050565b6000806040835110610bf557602083015191506040830151905060016000836001600160601b03166001600160601b0316815260200190815260200160002054600003610be457600091505b80600003610bf0575060035b915091565b50600090506003915091565b600060208284031215610c1357600080fd5b5035919050565b6001600160a01b0381168114610c2f57600080fd5b50565b60008060408385031215610c4557600080fd5b8235610c5081610c1a565b946020939093013593505050565b80356001600160601b0381168114610c7557600080fd5b919050565b600060208284031215610c8c57600080fd5b610c9582610c5e565b9392505050565b600060208284031215610cae57600080fd5b8135610c9581610c1a565b60008060408385031215610ccc57600080fd5b610c5083610c5e565b60008060008060808587031215610ceb57600080fd5b8435610cf681610c1a565b935060208501359250604085013591506060850135610d1481610c1a565b939692955090935050565b60008083601f840112610d3157600080fd5b50813567ffffffffffffffff811115610d4957600080fd5b602083019150836020828501011115610d6157600080fd5b9250929050565b600080600060408486031215610d7d57600080fd5b83359250602084013567ffffffffffffffff811115610d9b57600080fd5b610da786828701610d1f565b9497909650939450505050565b600080600060408486031215610dc957600080fd5b833567ffffffffffffffff811115610de057600080fd5b610dec86828701610d1f565b9094509250506020840135610e0081610c1a565b809150509250925092565b600080600080600060808688031215610e2357600080fd5b85359450602086013567ffffffffffffffff811115610e4157600080fd5b610e4d88828901610d1f565b9095509350506040860135610e6181610c1a565b949793965091946060013592915050565b60008060208385031215610e8557600080fd5b823567ffffffffffffffff811115610e9c57600080fd5b610ea885828601610d1f565b90969095509350505050565b6020808252600d908201526c139bdd081cdd5c1c1bdc9d1959609a1b604082015260600190565b60208082526022908201527f416363657373206e6f7420616c6c6f7765643a20476f7665726e6f72206f6e6c6040820152613c9760f11b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b80820180821115610f4657610f46610f1d565b92915050565b602080825260169082015275111a5cdc1d5d1948191bd95cc81b9bdd08195e1a5cdd60521b604082015260600190565b600060018201610f8e57610f8e610f1d565b5060010190565b81810381811115610f4657610f46610f1d565b6c6372656174654469737075746560981b815287600d82015286602d8201526001600160601b03198660601b16604d820152846061820152836081820152818360a18301376000910160a1019081529695505050505050565b84815283602082015260606040820152816060820152818360808301376000818301608090810191909152601f909201601f191601019392505050565b8082028115828204841417610f4657610f46610f1d56fea2646970667358221220931fd4fe4e99c0813be39446a3a954d163acc18576c61647f74ca12dc071ede964736f6c63430008120033",
  "devdoc": {
    "events": {
      "AcceptedFeeToken(address,bool)": {
        "details": "To be emitted when an ERC20 token is added or removed as a method to pay fees.",
        "params": {
          "_accepted": "Whether the token is accepted or not.",
          "_token": "The ERC20 token."
        }
      },
      "CrossChainDisputeOutgoing(bytes32,address,uint256,uint256,bytes)": {
        "details": "To be emitted when a dispute is sent to the IHomeGateway.",
        "params": {
          "_foreignArbitrable": "The address of the Arbitrable contract.",
          "_foreignBlockHash": "foreignBlockHash",
          "_foreignDisputeID": "The identifier of the dispute in the Arbitrable contract."
        }
      },
      "DisputeCreation(uint256,address)": {
        "details": "To be emitted when a dispute is created.",
        "params": {
          "_arbitrable": "The contract which created the dispute.",
          "_disputeID": "The identifier of the dispute in the Arbitrator contract."
        }
      },
      "Ruling(address,uint256,uint256)": {
        "details": "To be raised when a ruling is given.",
        "params": {
          "_arbitrable": "The arbitrable receiving the ruling.",
          "_disputeID": "The identifier of the dispute in the Arbitrator contract.",
          "_ruling": "The ruling which was given."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "arbitrationCost(bytes)": {
        "details": "Compute the cost of arbitration denominated in the native currency, typically ETH.      It is recommended not to increase it often, as it can be highly time and gas consuming for the arbitrated contracts to cope with fee augmentation.",
        "params": {
          "_extraData": "Additional info about the dispute. We use it to pass the ID of the dispute's court (first 32 bytes), the minimum number of jurors required (next 32 bytes) and the ID of the specific dispute kit (last 32 bytes)."
        },
        "returns": {
          "cost": "The arbitration cost in ETH."
        }
      },
      "arbitrationCost(bytes,address)": {
        "details": "Compute the cost of arbitration denominated in `_feeToken`.      It is recommended not to increase it often, as it can be highly time and gas consuming for the arbitrated contracts to cope with fee augmentation.",
        "params": {
          "_extraData": "Additional info about the dispute. We use it to pass the ID of the dispute's court (first 32 bytes), the minimum number of jurors required (next 32 bytes) and the ID of the specific dispute kit (last 32 bytes).",
          "_feeToken": "The ERC20 token used to pay fees."
        },
        "returns": {
          "_0": "The arbitration cost in `_feeToken`."
        }
      },
      "changeCourtJurorFee(uint96,uint256)": {
        "details": "Changes the `feeForJuror` property value of a specified court.",
        "params": {
          "_courtID": "The ID of the court on the v2 arbitrator. Not to be confused with the courtID on KlerosLiquid.",
          "_feeForJuror": "The new value for the `feeForJuror` property value."
        }
      },
      "changeGovernor(address)": {
        "details": "Changes the governor.",
        "params": {
          "_governor": "The address of the new governor."
        }
      },
      "changeHomeGateway(address)": {
        "details": "Changes the home gateway.",
        "params": {
          "_homeGateway": "The address of the new home gateway."
        }
      },
      "changeVea(address,uint256)": {
        "details": "Changes the outbox.",
        "params": {
          "_gracePeriod": "The duration to accept messages from the deprecated bridge (if at all).",
          "_veaOutbox": "The address of the new outbox."
        }
      },
      "createDispute(uint256,bytes)": {
        "details": "Create a dispute and pay for the fees in the native currency, typically ETH.      Must be called by the arbitrable contract.      Must pay at least arbitrationCost(_extraData).",
        "params": {
          "_extraData": "Additional info about the dispute. We use it to pass the ID of the dispute's court (first 32 bytes), the minimum number of jurors required (next 32 bytes) and the ID of the specific dispute kit (last 32 bytes).",
          "_numberOfChoices": "The number of choices the arbitrator can choose from in this dispute."
        },
        "returns": {
          "disputeID": "The identifier of the dispute created."
        }
      },
      "createDispute(uint256,bytes,address,uint256)": {
        "details": "Create a dispute and pay for the fees in a supported ERC20 token.      Must be called by the arbitrable contract.      Must pay at least arbitrationCost(_extraData).",
        "params": {
          "_extraData": "Additional info about the dispute. We use it to pass the ID of the dispute's court (first 32 bytes), the minimum number of jurors required (next 32 bytes) and the ID of the specific dispute kit (last 32 bytes).",
          "_feeAmount": "Amount of the ERC20 token used to pay fees.",
          "_feeToken": "The ERC20 token used to pay fees.",
          "_numberOfChoices": "The number of choices the arbitrator can choose from in this dispute."
        },
        "returns": {
          "_0": "The identifier of the dispute created."
        }
      },
      "disputeHashToForeignID(bytes32)": {
        "details": "Looks up the local foreign disputeID for a disputeHash",
        "params": {
          "_disputeHash": "dispute hash"
        }
      },
      "withdrawFees(bytes32)": {
        "params": {
          "_disputeHash": "The dispute hash for which to withdraw the fees."
        }
      }
    },
    "stateVariables": {
      "homeChainID": {
        "return": "The chain ID where the corresponding home gateway is deployed.",
        "returns": {
          "_0": "The chain ID where the corresponding home gateway is deployed."
        }
      },
      "homeGateway": {
        "return": "The address of the corresponding home gateway.",
        "returns": {
          "_0": "The address of the corresponding home gateway."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "relayRule(address,bytes32,uint256,address)": {
        "notice": "Relay the rule call from the home gateway to the arbitrable."
      },
      "withdrawFees(bytes32)": {
        "notice": "Reimburses the dispute fees to the relayer who paid for these fees on the home chain."
      }
    },
    "notice": "Foreign Gateway Counterpart of `HomeGateway`",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15413,
        "contract": "src/gateway/ForeignGateway.sol:ForeignGateway",
        "label": "localDisputeID",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 15417,
        "contract": "src/gateway/ForeignGateway.sol:ForeignGateway",
        "label": "feeForJuror",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint96,t_uint256)"
      },
      {
        "astId": 15419,
        "contract": "src/gateway/ForeignGateway.sol:ForeignGateway",
        "label": "governor",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 15421,
        "contract": "src/gateway/ForeignGateway.sol:ForeignGateway",
        "label": "veaOutbox",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 15427,
        "contract": "src/gateway/ForeignGateway.sol:ForeignGateway",
        "label": "homeGateway",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 15429,
        "contract": "src/gateway/ForeignGateway.sol:ForeignGateway",
        "label": "deprecatedVeaOutbox",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 15431,
        "contract": "src/gateway/ForeignGateway.sol:ForeignGateway",
        "label": "deprecatedVeaOutboxExpiration",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 15436,
        "contract": "src/gateway/ForeignGateway.sol:ForeignGateway",
        "label": "disputeHashtoDisputeData",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_struct(DisputeData)15401_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_struct(DisputeData)15401_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ForeignGateway.DisputeData)",
        "numberOfBytes": "32",
        "value": "t_struct(DisputeData)15401_storage"
      },
      "t_mapping(t_uint96,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint96",
        "label": "mapping(uint96 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(DisputeData)15401_storage": {
        "encoding": "inplace",
        "label": "struct ForeignGateway.DisputeData",
        "members": [
          {
            "astId": 15392,
            "contract": "src/gateway/ForeignGateway.sol:ForeignGateway",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint248"
          },
          {
            "astId": 15394,
            "contract": "src/gateway/ForeignGateway.sol:ForeignGateway",
            "label": "ruled",
            "offset": 31,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 15396,
            "contract": "src/gateway/ForeignGateway.sol:ForeignGateway",
            "label": "arbitrable",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 15398,
            "contract": "src/gateway/ForeignGateway.sol:ForeignGateway",
            "label": "paid",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 15400,
            "contract": "src/gateway/ForeignGateway.sol:ForeignGateway",
            "label": "relayer",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint248": {
        "encoding": "inplace",
        "label": "uint248",
        "numberOfBytes": "31"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}
