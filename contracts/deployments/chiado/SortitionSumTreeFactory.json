{
  "address": "0xc7e3BF90299f6BD9FA7c3703837A9CAbB5743636",
  "abi": [],
  "transactionHash": "0x405e9f06449c4d61948ed7f0c9c6cf3f6a9bab4fd8b42db9c1232d41f07ee7d9",
  "receipt": {
    "to": null,
    "from": "0xF50E77f2A2B6138D16c6c7511562E5C33c4B15A3",
    "contractAddress": "0xc7e3BF90299f6BD9FA7c3703837A9CAbB5743636",
    "transactionIndex": 0,
    "gasUsed": "636060",
    "logsBloom": "0x
    "blockHash": "0xced975b8d1ee04c3fb122c9d467d1d6bc3ea17b087b9b223c84ecbcfe267e271",
    "transactionHash": "0x405e9f06449c4d61948ed7f0c9c6cf3f6a9bab4fd8b42db9c1232d41f07ee7d9",
    "logs": [],
    "blockNumber": 2252213,
    "cumulativeGasUsed": "636060",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c9b600ff9291ca791c04d618ea467929",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Enrique Piqueras - <epiquerass@gmail.com>\",\"details\":\"A factory of trees that keep track of staked values for sortition.\",\"kind\":\"dev\",\"methods\":{\"createTree(SortitionSumTreeFactory.SortitionSumTrees storage,bytes32,uint256)\":{\"details\":\"Create a sortition sum tree at the specified key.\",\"params\":{\"_K\":\"The number of children each node in the tree should have.\",\"_key\":\"The key of the new tree.\"}},\"draw(SortitionSumTreeFactory.SortitionSumTrees storage,bytes32,uint256)\":{\"details\":\"Draw an ID from a tree using a number. Note that this function reverts if the sum of all values in the tree is 0.\",\"params\":{\"_drawnNumber\":\"The drawn number.\",\"_key\":\"The key of the tree.\"},\"returns\":{\"ID\":\"The drawn ID.  `O(k * log_k(n))` where  `k` is the maximum number of childs per node in the tree,   and `n` is the maximum number of nodes ever appended.\"}},\"queryLeafs(SortitionSumTreeFactory.SortitionSumTrees storage,bytes32,uint256,uint256)\":{\"details\":\"Query the leaves of a tree. Note that if `startIndex == 0`, the tree is empty and the root node will be returned.\",\"params\":{\"_count\":\"The number of items to return.\",\"_cursor\":\"The pagination cursor.\",\"_key\":\"The key of the tree to get the leaves from.\"},\"returns\":{\"hasMore\":\"Whether there are more for pagination.  `O(n)` where  `n` is the maximum number of nodes ever appended.\",\"startIndex\":\"The index at which leaves start.\",\"values\":\"The values of the returned leaves.\"}},\"set(SortitionSumTreeFactory.SortitionSumTrees storage,bytes32,uint256,bytes32)\":{\"details\":\"Set a value of a tree.\",\"params\":{\"_ID\":\"The ID of the value.  `O(log_k(n))` where  `k` is the maximum number of childs per node in the tree,   and `n` is the maximum number of nodes ever appended.\",\"_key\":\"The key of the tree.\",\"_value\":\"The new value.\"}},\"stakeOf(SortitionSumTreeFactory.SortitionSumTrees storage,bytes32,bytes32)\":{\"details\":\"Gets a specified ID's associated value.\",\"params\":{\"_ID\":\"The ID of the value.\",\"_key\":\"The key of the tree.\"},\"returns\":{\"value\":\"The associated value.\"}}},\"title\":\"SortitionSumTreeFactory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/libraries/SortitionSumTreeFactory.sol\":\"SortitionSumTreeFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"src/libraries/SortitionSumTreeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n *  @authors: [@epiqueras, @unknownunknown1]\\n *  @reviewers: []\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\npragma solidity ^0.8;\\n\\n/**\\n *  @title SortitionSumTreeFactory\\n *  @author Enrique Piqueras - <epiquerass@gmail.com>\\n *  @dev A factory of trees that keep track of staked values for sortition.\\n */\\nlibrary SortitionSumTreeFactory {\\n    /* Structs */\\n\\n    struct SortitionSumTree {\\n        uint K; // The maximum number of childs per node.\\n        // We use this to keep track of vacant positions in the tree after removing a leaf. This is for keeping the tree as balanced as possible without spending gas on moving nodes around.\\n        uint[] stack;\\n        uint[] nodes;\\n        // Two-way mapping of IDs to node indexes. Note that node index 0 is reserved for the root node, and means the ID does not have a node.\\n        mapping(bytes32 => uint) IDsToNodeIndexes;\\n        mapping(uint => bytes32) nodeIndexesToIDs;\\n    }\\n\\n    /* Storage */\\n\\n    struct SortitionSumTrees {\\n        mapping(bytes32 => SortitionSumTree) sortitionSumTrees;\\n    }\\n\\n    /* Public */\\n\\n    /**\\n     *  @dev Create a sortition sum tree at the specified key.\\n     *  @param _key The key of the new tree.\\n     *  @param _K The number of children each node in the tree should have.\\n     */\\n    function createTree(SortitionSumTrees storage self, bytes32 _key, uint _K) public {\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\n        require(tree.K == 0, \\\"Tree already exists.\\\");\\n        require(_K > 1, \\\"K must be greater than one.\\\");\\n        tree.K = _K;\\n        tree.nodes.push(0);\\n    }\\n\\n    /**\\n     *  @dev Set a value of a tree.\\n     *  @param _key The key of the tree.\\n     *  @param _value The new value.\\n     *  @param _ID The ID of the value.\\n     *  `O(log_k(n))` where\\n     *  `k` is the maximum number of childs per node in the tree,\\n     *   and `n` is the maximum number of nodes ever appended.\\n     */\\n    function set(SortitionSumTrees storage self, bytes32 _key, uint _value, bytes32 _ID) public {\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\n        uint treeIndex = tree.IDsToNodeIndexes[_ID];\\n\\n        if (treeIndex == 0) {\\n            // No existing node.\\n            if (_value != 0) {\\n                // Non zero value.\\n                // Append.\\n                // Add node.\\n                if (tree.stack.length == 0) {\\n                    // No vacant spots.\\n                    // Get the index and append the value.\\n                    treeIndex = tree.nodes.length;\\n                    tree.nodes.push(_value);\\n\\n                    // Potentially append a new node and make the parent a sum node.\\n                    if (treeIndex != 1 && (treeIndex - 1) % tree.K == 0) {\\n                        // Is first child.\\n                        uint parentIndex = treeIndex / tree.K;\\n                        bytes32 parentID = tree.nodeIndexesToIDs[parentIndex];\\n                        uint newIndex = treeIndex + 1;\\n                        tree.nodes.push(tree.nodes[parentIndex]);\\n                        delete tree.nodeIndexesToIDs[parentIndex];\\n                        tree.IDsToNodeIndexes[parentID] = newIndex;\\n                        tree.nodeIndexesToIDs[newIndex] = parentID;\\n                    }\\n                } else {\\n                    // Some vacant spot.\\n                    // Pop the stack and append the value.\\n                    treeIndex = tree.stack[tree.stack.length - 1];\\n                    tree.stack.pop();\\n                    tree.nodes[treeIndex] = _value;\\n                }\\n\\n                // Add label.\\n                tree.IDsToNodeIndexes[_ID] = treeIndex;\\n                tree.nodeIndexesToIDs[treeIndex] = _ID;\\n\\n                updateParents(self, _key, treeIndex, true, _value);\\n            }\\n        } else {\\n            // Existing node.\\n            if (_value == 0) {\\n                // Zero value.\\n                // Remove.\\n                // Remember value and set to 0.\\n                uint value = tree.nodes[treeIndex];\\n                tree.nodes[treeIndex] = 0;\\n\\n                // Push to stack.\\n                tree.stack.push(treeIndex);\\n\\n                // Clear label.\\n                delete tree.IDsToNodeIndexes[_ID];\\n                delete tree.nodeIndexesToIDs[treeIndex];\\n\\n                updateParents(self, _key, treeIndex, false, value);\\n            } else if (_value != tree.nodes[treeIndex]) {\\n                // New, non zero value.\\n                // Set.\\n                bool plusOrMinus = tree.nodes[treeIndex] <= _value;\\n                uint plusOrMinusValue = plusOrMinus ? _value - tree.nodes[treeIndex] : tree.nodes[treeIndex] - _value;\\n                tree.nodes[treeIndex] = _value;\\n\\n                updateParents(self, _key, treeIndex, plusOrMinus, plusOrMinusValue);\\n            }\\n        }\\n    }\\n\\n    /* Public Views */\\n\\n    /**\\n     *  @dev Query the leaves of a tree. Note that if `startIndex == 0`, the tree is empty and the root node will be returned.\\n     *  @param _key The key of the tree to get the leaves from.\\n     *  @param _cursor The pagination cursor.\\n     *  @param _count The number of items to return.\\n     *  @return startIndex The index at which leaves start.\\n     *  @return values The values of the returned leaves.\\n     *  @return hasMore Whether there are more for pagination.\\n     *  `O(n)` where\\n     *  `n` is the maximum number of nodes ever appended.\\n     */\\n    function queryLeafs(\\n        SortitionSumTrees storage self,\\n        bytes32 _key,\\n        uint _cursor,\\n        uint _count\\n    ) public view returns (uint startIndex, uint[] memory values, bool hasMore) {\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\n\\n        // Find the start index.\\n        for (uint i = 0; i < tree.nodes.length; i++) {\\n            if ((tree.K * i) + 1 >= tree.nodes.length) {\\n                startIndex = i;\\n                break;\\n            }\\n        }\\n\\n        // Get the values.\\n        uint loopStartIndex = startIndex + _cursor;\\n        values = new uint[](loopStartIndex + _count > tree.nodes.length ? tree.nodes.length - loopStartIndex : _count);\\n        uint valuesIndex = 0;\\n        for (uint j = loopStartIndex; j < tree.nodes.length; j++) {\\n            if (valuesIndex < _count) {\\n                values[valuesIndex] = tree.nodes[j];\\n                valuesIndex++;\\n            } else {\\n                hasMore = true;\\n                break;\\n            }\\n        }\\n    }\\n\\n    /**\\n     *  @dev Draw an ID from a tree using a number. Note that this function reverts if the sum of all values in the tree is 0.\\n     *  @param _key The key of the tree.\\n     *  @param _drawnNumber The drawn number.\\n     *  @return ID The drawn ID.\\n     *  `O(k * log_k(n))` where\\n     *  `k` is the maximum number of childs per node in the tree,\\n     *   and `n` is the maximum number of nodes ever appended.\\n     */\\n    function draw(SortitionSumTrees storage self, bytes32 _key, uint _drawnNumber) public view returns (bytes32 ID) {\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\n        uint treeIndex = 0;\\n        uint currentDrawnNumber = _drawnNumber % tree.nodes[0];\\n\\n        while (\\n            (tree.K * treeIndex) + 1 < tree.nodes.length // While it still has children.\\n        )\\n            for (uint i = 1; i <= tree.K; i++) {\\n                // Loop over children.\\n                uint nodeIndex = (tree.K * treeIndex) + i;\\n                uint nodeValue = tree.nodes[nodeIndex];\\n\\n                if (currentDrawnNumber >= nodeValue)\\n                    currentDrawnNumber -= nodeValue; // Go to the next child.\\n                else {\\n                    // Pick this child.\\n                    treeIndex = nodeIndex;\\n                    break;\\n                }\\n            }\\n\\n        ID = tree.nodeIndexesToIDs[treeIndex];\\n    }\\n\\n    /** @dev Gets a specified ID's associated value.\\n     *  @param _key The key of the tree.\\n     *  @param _ID The ID of the value.\\n     *  @return value The associated value.\\n     */\\n    function stakeOf(SortitionSumTrees storage self, bytes32 _key, bytes32 _ID) public view returns (uint value) {\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\n        uint treeIndex = tree.IDsToNodeIndexes[_ID];\\n\\n        if (treeIndex == 0) value = 0;\\n        else value = tree.nodes[treeIndex];\\n    }\\n\\n    /* Private */\\n\\n    /**\\n     *  @dev Update all the parents of a node.\\n     *  @param _key The key of the tree to update.\\n     *  @param _treeIndex The index of the node to start from.\\n     *  @param _plusOrMinus Wether to add (true) or substract (false).\\n     *  @param _value The value to add or substract.\\n     *  `O(log_k(n))` where\\n     *  `k` is the maximum number of childs per node in the tree,\\n     *   and `n` is the maximum number of nodes ever appended.\\n     */\\n    function updateParents(\\n        SortitionSumTrees storage self,\\n        bytes32 _key,\\n        uint _treeIndex,\\n        bool _plusOrMinus,\\n        uint _value\\n    ) private {\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\n\\n        uint parentIndex = _treeIndex;\\n        while (parentIndex != 0) {\\n            parentIndex = (parentIndex - 1) / tree.K;\\n            tree.nodes[parentIndex] = _plusOrMinus\\n                ? tree.nodes[parentIndex] + _value\\n                : tree.nodes[parentIndex] - _value;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x053af9495cb8382dfc1e1503d8f3dab3d356d664efdbdf534f146ab8f3834e95\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610a8c61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100615760003560e01c80632e25c38a1461006657806365b81f4f146100885780637521ccb1146100b357806388c1d467146100d45780639075789e146100e7575b600080fd5b81801561007257600080fd5b506100866100813660046108a0565b610107565b005b61009b6100963660046108a0565b610455565b6040516100aa939291906108d2565b60405180910390f35b6100c66100c136600461092b565b6105c0565b6040519081526020016100aa565b6100c66100e236600461092b565b610616565b8180156100f357600080fd5b5061008661010236600461092b565b61071c565b6000838152602085815260408083208484526003810190925290912054806102cd5783156102c857600182015461021a5750600281018054600180820183556000928352602090922081018590559081148015906101795750815461016d60018361096d565b610177919061099a565b155b1561021557815460009061018d90836109ae565b60008181526004850160205260408120549192506101ac8460016109c2565b9050846002018560020184815481106101c7576101c76109da565b60009182526020808320909101548354600181018555938352818320909301929092559384526004860180825260408086208690558486526003880183528086208490559285529052909120555b610295565b60018083018054909161022c9161096d565b8154811061023c5761023c6109da565b906000526020600020015490508160010180548061025c5761025c6109f0565b6001900381819060005260206000200160009055905583826002018281548110610288576102886109da565b6000918252602090912001555b600083815260038301602090815260408083208490558383526004850190915290208390556102c88686836001886107e2565b61044d565b8361036a5760008260020182815481106102e9576102e96109da565b90600052602060002001549050600083600201838154811061030d5761030d6109da565b600091825260208083209091019290925560018086018054918201815582528282200184905585815260038501825260408082208290558482526004860190925290812081905561036490889088908590856107e2565b5061044d565b81600201818154811061037f5761037f6109da565b9060005260206000200154841461044d576000848360020183815481106103a8576103a86109da565b9060005260206000200154111590506000816103ee57858460020184815481106103d4576103d46109da565b90600052602060002001546103e9919061096d565b610419565b836002018381548110610403576104036109da565b906000526020600020015486610419919061096d565b905085846002018481548110610431576104316109da565b60009182526020909120015561044a88888585856107e2565b50505b505050505050565b60008381526020859052604081206060908290815b60028201548110156104b25760028201548254610488908390610a06565b6104939060016109c2565b106104a0578094506104b2565b806104aa81610a25565b91505061046a565b5060006104bf87866109c2565b60028301549091506104d187836109c2565b116104dc57856104ec565b60028201546104ec90829061096d565b67ffffffffffffffff81111561050457610504610a40565b60405190808252806020026020018201604052801561052d578160200160208202803683370190505b5093506000815b60028401548110156105b257878210156105975783600201818154811061055d5761055d6109da565b906000526020600020015486838151811061057a5761057a6109da565b60209081029190910101528161058f81610a25565b9250506105a0565b600194506105b2565b806105aa81610a25565b915050610534565b505050509450945094915050565b60008281526020848152604080832084845260038101909252822054806105ea576000925061060d565b8160020181815481106105ff576105ff6109da565b906000526020600020015492505b50509392505050565b600082815260208490526040812060028101805483918291829061063c5761063c6109da565b906000526020600020015485610652919061099a565b90505b60028301548354610667908490610a06565b6106729060016109c2565b10156107015760015b835481116106fb576000818486600001546106969190610a06565b6106a091906109c2565b905060008560020182815481106106b9576106b96109da565b906000526020600020015490508084106106de576106d7818561096d565b93506106e6565b5092506106fb565b505080806106f390610a25565b91505061067b565b50610655565b50600090815260049091016020526040902054949350505050565b60008281526020849052604090208054156107755760405162461bcd60e51b81526020600482015260146024820152732a3932b29030b63932b0b23c9032bc34b9ba399760611b60448201526064015b60405180910390fd5b600182116107c55760405162461bcd60e51b815260206004820152601b60248201527f4b206d7573742062652067726561746572207468616e206f6e652e0000000000604482015260640161076c565b908155600201805460018101825560009182526020822001555050565b6000848152602086905260409020835b801561089757815461080560018361096d565b61080f91906109ae565b905083610846578282600201828154811061082c5761082c6109da565b9060005260206000200154610841919061096d565b610871565b8282600201828154811061085c5761085c6109da565b906000526020600020015461087191906109c2565b826002018281548110610886576108866109da565b6000918252602090912001556107f2565b50505050505050565b600080600080608085870312156108b657600080fd5b5050823594602084013594506040840135936060013592509050565b6000606082018583526020606081850152818651808452608086019150828801935060005b81811015610913578451835293830193918301916001016108f7565b50508093505050508215156040830152949350505050565b60008060006060848603121561094057600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052601160045260246000fd5b60008282101561097f5761097f610957565b500390565b634e487b7160e01b600052601260045260246000fd5b6000826109a9576109a9610984565b500690565b6000826109bd576109bd610984565b500490565b600082198211156109d5576109d5610957565b500190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b6000816000190483118215151615610a2057610a20610957565b500290565b6000600019821415610a3957610a39610957565b5060010190565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220ed612533fe19900f6f7bcb3715e15197fada76852ddc384bf142ca0012dbbcf664736f6c63430008090033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100615760003560e01c80632e25c38a1461006657806365b81f4f146100885780637521ccb1146100b357806388c1d467146100d45780639075789e146100e7575b600080fd5b81801561007257600080fd5b506100866100813660046108a0565b610107565b005b61009b6100963660046108a0565b610455565b6040516100aa939291906108d2565b60405180910390f35b6100c66100c136600461092b565b6105c0565b6040519081526020016100aa565b6100c66100e236600461092b565b610616565b8180156100f357600080fd5b5061008661010236600461092b565b61071c565b6000838152602085815260408083208484526003810190925290912054806102cd5783156102c857600182015461021a5750600281018054600180820183556000928352602090922081018590559081148015906101795750815461016d60018361096d565b610177919061099a565b155b1561021557815460009061018d90836109ae565b60008181526004850160205260408120549192506101ac8460016109c2565b9050846002018560020184815481106101c7576101c76109da565b60009182526020808320909101548354600181018555938352818320909301929092559384526004860180825260408086208690558486526003880183528086208490559285529052909120555b610295565b60018083018054909161022c9161096d565b8154811061023c5761023c6109da565b906000526020600020015490508160010180548061025c5761025c6109f0565b6001900381819060005260206000200160009055905583826002018281548110610288576102886109da565b6000918252602090912001555b600083815260038301602090815260408083208490558383526004850190915290208390556102c88686836001886107e2565b61044d565b8361036a5760008260020182815481106102e9576102e96109da565b90600052602060002001549050600083600201838154811061030d5761030d6109da565b600091825260208083209091019290925560018086018054918201815582528282200184905585815260038501825260408082208290558482526004860190925290812081905561036490889088908590856107e2565b5061044d565b81600201818154811061037f5761037f6109da565b9060005260206000200154841461044d576000848360020183815481106103a8576103a86109da565b9060005260206000200154111590506000816103ee57858460020184815481106103d4576103d46109da565b90600052602060002001546103e9919061096d565b610419565b836002018381548110610403576104036109da565b906000526020600020015486610419919061096d565b905085846002018481548110610431576104316109da565b60009182526020909120015561044a88888585856107e2565b50505b505050505050565b60008381526020859052604081206060908290815b60028201548110156104b25760028201548254610488908390610a06565b6104939060016109c2565b106104a0578094506104b2565b806104aa81610a25565b91505061046a565b5060006104bf87866109c2565b60028301549091506104d187836109c2565b116104dc57856104ec565b60028201546104ec90829061096d565b67ffffffffffffffff81111561050457610504610a40565b60405190808252806020026020018201604052801561052d578160200160208202803683370190505b5093506000815b60028401548110156105b257878210156105975783600201818154811061055d5761055d6109da565b906000526020600020015486838151811061057a5761057a6109da565b60209081029190910101528161058f81610a25565b9250506105a0565b600194506105b2565b806105aa81610a25565b915050610534565b505050509450945094915050565b60008281526020848152604080832084845260038101909252822054806105ea576000925061060d565b8160020181815481106105ff576105ff6109da565b906000526020600020015492505b50509392505050565b600082815260208490526040812060028101805483918291829061063c5761063c6109da565b906000526020600020015485610652919061099a565b90505b60028301548354610667908490610a06565b6106729060016109c2565b10156107015760015b835481116106fb576000818486600001546106969190610a06565b6106a091906109c2565b905060008560020182815481106106b9576106b96109da565b906000526020600020015490508084106106de576106d7818561096d565b93506106e6565b5092506106fb565b505080806106f390610a25565b91505061067b565b50610655565b50600090815260049091016020526040902054949350505050565b60008281526020849052604090208054156107755760405162461bcd60e51b81526020600482015260146024820152732a3932b29030b63932b0b23c9032bc34b9ba399760611b60448201526064015b60405180910390fd5b600182116107c55760405162461bcd60e51b815260206004820152601b60248201527f4b206d7573742062652067726561746572207468616e206f6e652e0000000000604482015260640161076c565b908155600201805460018101825560009182526020822001555050565b6000848152602086905260409020835b801561089757815461080560018361096d565b61080f91906109ae565b905083610846578282600201828154811061082c5761082c6109da565b9060005260206000200154610841919061096d565b610871565b8282600201828154811061085c5761085c6109da565b906000526020600020015461087191906109c2565b826002018281548110610886576108866109da565b6000918252602090912001556107f2565b50505050505050565b600080600080608085870312156108b657600080fd5b5050823594602084013594506040840135936060013592509050565b6000606082018583526020606081850152818651808452608086019150828801935060005b81811015610913578451835293830193918301916001016108f7565b50508093505050508215156040830152949350505050565b60008060006060848603121561094057600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052601160045260246000fd5b60008282101561097f5761097f610957565b500390565b634e487b7160e01b600052601260045260246000fd5b6000826109a9576109a9610984565b500690565b6000826109bd576109bd610984565b500490565b600082198211156109d5576109d5610957565b500190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b6000816000190483118215151615610a2057610a20610957565b500290565b6000600019821415610a3957610a39610957565b5060010190565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220ed612533fe19900f6f7bcb3715e15197fada76852ddc384bf142ca0012dbbcf664736f6c63430008090033",
  "devdoc": {
    "author": "Enrique Piqueras - <epiquerass@gmail.com>",
    "details": "A factory of trees that keep track of staked values for sortition.",
    "kind": "dev",
    "methods": {
      "createTree(SortitionSumTreeFactory.SortitionSumTrees storage,bytes32,uint256)": {
        "details": "Create a sortition sum tree at the specified key.",
        "params": {
          "_K": "The number of children each node in the tree should have.",
          "_key": "The key of the new tree."
        }
      },
      "draw(SortitionSumTreeFactory.SortitionSumTrees storage,bytes32,uint256)": {
        "details": "Draw an ID from a tree using a number. Note that this function reverts if the sum of all values in the tree is 0.",
        "params": {
          "_drawnNumber": "The drawn number.",
          "_key": "The key of the tree."
        },
        "returns": {
          "ID": "The drawn ID.  `O(k * log_k(n))` where  `k` is the maximum number of childs per node in the tree,   and `n` is the maximum number of nodes ever appended."
        }
      },
      "queryLeafs(SortitionSumTreeFactory.SortitionSumTrees storage,bytes32,uint256,uint256)": {
        "details": "Query the leaves of a tree. Note that if `startIndex == 0`, the tree is empty and the root node will be returned.",
        "params": {
          "_count": "The number of items to return.",
          "_cursor": "The pagination cursor.",
          "_key": "The key of the tree to get the leaves from."
        },
        "returns": {
          "hasMore": "Whether there are more for pagination.  `O(n)` where  `n` is the maximum number of nodes ever appended.",
          "startIndex": "The index at which leaves start.",
          "values": "The values of the returned leaves."
        }
      },
      "set(SortitionSumTreeFactory.SortitionSumTrees storage,bytes32,uint256,bytes32)": {
        "details": "Set a value of a tree.",
        "params": {
          "_ID": "The ID of the value.  `O(log_k(n))` where  `k` is the maximum number of childs per node in the tree,   and `n` is the maximum number of nodes ever appended.",
          "_key": "The key of the tree.",
          "_value": "The new value."
        }
      },
      "stakeOf(SortitionSumTreeFactory.SortitionSumTrees storage,bytes32,bytes32)": {
        "details": "Gets a specified ID's associated value.",
        "params": {
          "_ID": "The ID of the value.",
          "_key": "The key of the tree."
        },
        "returns": {
          "value": "The associated value."
        }
      }
    },
    "title": "SortitionSumTreeFactory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
