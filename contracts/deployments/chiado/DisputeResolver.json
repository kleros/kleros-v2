{
  "address": "0x433eD78895df1df7668C40b3e82d54410331F942",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IArbitratorV2",
          "name": "_arbitrator",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IArbitratorV2",
          "name": "_arbitrator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_arbitrableChainId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_arbitrable",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_arbitrableDisputeID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_externalDisputeID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_templateId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_templateUri",
          "type": "string"
        }
      ],
      "name": "CrossChainDisputeRequest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IArbitratorV2",
          "name": "_arbitrator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_arbitrableDisputeID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_externalDisputeID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_templateId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_templateUri",
          "type": "string"
        }
      ],
      "name": "DisputeRequest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_templateId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "_templateTag",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "data",
          "type": "string"
        }
      ],
      "name": "DisputeTemplate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IArbitratorV2",
          "name": "_arbitrator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_ruling",
          "type": "uint256"
        }
      ],
      "name": "Ruling",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "arbitrator",
      "outputs": [
        {
          "internalType": "contract IArbitratorV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "arbitratorDisputeIDToLocalID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IArbitratorV2",
          "name": "_arbitrator",
          "type": "address"
        }
      ],
      "name": "changeArbitrator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        }
      ],
      "name": "changeGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_arbitratorExtraData",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "_disputeTemplate",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_numberOfRulingOptions",
          "type": "uint256"
        }
      ],
      "name": "createDisputeForTemplate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "disputeID",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_arbitratorExtraData",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "_disputeTemplateUri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_numberOfRulingOptions",
          "type": "uint256"
        }
      ],
      "name": "createDisputeForTemplateUri",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "disputeID",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "disputes",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "arbitratorExtraData",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "isRuled",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "ruling",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numberOfRulingOptions",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_externalDisputeID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ruling",
          "type": "uint256"
        }
      ],
      "name": "rule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x48bb5243e06a6dee8e772e2e69e4fa415d4794edf3c9e35afa348b85021a6868",
  "receipt": {
    "to": null,
    "from": "0xF50E77f2A2B6138D16c6c7511562E5C33c4B15A3",
    "contractAddress": "0x433eD78895df1df7668C40b3e82d54410331F942",
    "transactionIndex": 0,
    "gasUsed": "758346",
    "logsBloom": "0x
    "blockHash": "0x48d38d9df0d5b356f5f6e50085ad042777fca7649e743ba102264e5d67a7c31b",
    "transactionHash": "0x48bb5243e06a6dee8e772e2e69e4fa415d4794edf3c9e35afa348b85021a6868",
    "logs": [],
    "blockNumber": 4448702,
    "cumulativeGasUsed": "758346",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x573bcD6ee4aEe152eCC9Cafd2c0820Dc548AF6cC"
  ],
  "numDeployments": 2,
  "solcInputHash": "e5cc0e9bf05bbcd7b6145f8ea4d3c9a9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IArbitratorV2\",\"name\":\"_arbitrator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IArbitratorV2\",\"name\":\"_arbitrator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_arbitrableChainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_arbitrable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_arbitrableDisputeID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_externalDisputeID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_templateId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_templateUri\",\"type\":\"string\"}],\"name\":\"CrossChainDisputeRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IArbitratorV2\",\"name\":\"_arbitrator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_arbitrableDisputeID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_externalDisputeID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_templateId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_templateUri\",\"type\":\"string\"}],\"name\":\"DisputeRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_templateId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_templateTag\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"name\":\"DisputeTemplate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IArbitratorV2\",\"name\":\"_arbitrator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ruling\",\"type\":\"uint256\"}],\"name\":\"Ruling\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"arbitrator\",\"outputs\":[{\"internalType\":\"contract IArbitratorV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"arbitratorDisputeIDToLocalID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IArbitratorV2\",\"name\":\"_arbitrator\",\"type\":\"address\"}],\"name\":\"changeArbitrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"name\":\"changeGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_arbitratorExtraData\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_disputeTemplate\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_numberOfRulingOptions\",\"type\":\"uint256\"}],\"name\":\"createDisputeForTemplate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeID\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_arbitratorExtraData\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_disputeTemplateUri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_numberOfRulingOptions\",\"type\":\"uint256\"}],\"name\":\"createDisputeForTemplateUri\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeID\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"disputes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"arbitratorExtraData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"isRuled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"ruling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfRulingOptions\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_externalDisputeID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ruling\",\"type\":\"uint256\"}],\"name\":\"rule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"CrossChainDisputeRequest(address,uint256,address,uint256,uint256,uint256,string)\":{\"details\":\"To be emitted when a dispute is created to link the correct meta-evidence to the disputeID.\",\"params\":{\"_arbitrable\":\"The address of the Arbitrable contract.\",\"_arbitrableChainId\":\"The chain ID of the Arbitrable contract.\",\"_arbitrableDisputeID\":\"The ID of the dispute in the Arbitrable contract.\",\"_arbitrator\":\"The arbitrator of the contract.\",\"_externalDisputeID\":\"An identifier created outside Kleros by the protocol requesting arbitration.\",\"_templateId\":\"The ID of the dispute template. Should not be used with _templateUri.\",\"_templateUri\":\"IPFS path to the dispute template starting with '/ipfs/'. Should not be used with _templateId.\"}},\"DisputeRequest(address,uint256,uint256,uint256,string)\":{\"details\":\"To be emitted when a dispute is created to link the correct meta-evidence to the disputeID.\",\"params\":{\"_arbitrableDisputeID\":\"The ID of the dispute in the Arbitrable contract.\",\"_arbitrator\":\"The arbitrator of the contract.\",\"_externalDisputeID\":\"An identifier created outside Kleros by the protocol requesting arbitration.\",\"_templateId\":\"The ID of the dispute template. Should not be used with _templateUri.\",\"_templateUri\":\"The URI to the dispute template. For example on IPFS: starting with '/ipfs/'. Should not be used with _templateId.\"}},\"DisputeTemplate(uint256,string,string)\":{\"details\":\"To be emitted when a new dispute template is created.\",\"params\":{\"_templateId\":\"The ID of the dispute template.\",\"_templateTag\":\"An optional tag for the dispute template, such as \\\"registration\\\" or \\\"removal\\\".\",\"data\":\"The template data.\"}},\"Ruling(address,uint256,uint256)\":{\"details\":\"To be raised when a ruling is given.\",\"params\":{\"_arbitrator\":\"The arbitrator giving the ruling.\",\"_disputeID\":\"ID of the dispute in the Arbitrator contract.\",\"_ruling\":\"The ruling which was given.\"}}},\"kind\":\"dev\",\"methods\":{\"changeGovernor(address)\":{\"details\":\"Changes the governor.\",\"params\":{\"_governor\":\"The address of the new governor.\"}},\"constructor\":{\"details\":\"Constructor\",\"params\":{\"_arbitrator\":\"Target global arbitrator for any disputes.\"}},\"createDisputeForTemplate(bytes,string,uint256)\":{\"details\":\"Calls createDispute function of the specified arbitrator to create a dispute. Note that we don\\u2019t need to check that msg.value is enough to pay arbitration fees as it\\u2019s the responsibility of the arbitrator contract.\",\"params\":{\"_arbitratorExtraData\":\"Extra data for the arbitrator of the dispute.\",\"_disputeTemplate\":\"Dispute template.\",\"_numberOfRulingOptions\":\"Number of ruling options.\"},\"returns\":{\"disputeID\":\"Dispute id (on arbitrator side) of the created dispute.\"}},\"createDisputeForTemplateUri(bytes,string,uint256)\":{\"details\":\"Calls createDispute function of the specified arbitrator to create a dispute. Note that we don\\u2019t need to check that msg.value is enough to pay arbitration fees as it\\u2019s the responsibility of the arbitrator contract.\",\"params\":{\"_arbitratorExtraData\":\"Extra data for the arbitrator of the dispute.\",\"_disputeTemplateUri\":\"The URI to the dispute template. For example on IPFS: starting with '/ipfs/'.\",\"_numberOfRulingOptions\":\"Number of ruling options.\"},\"returns\":{\"disputeID\":\"Dispute id (on arbitrator side) of the created dispute.\"}},\"rule(uint256,uint256)\":{\"details\":\"To be called by the arbitrator of the dispute, to declare the winning ruling.\",\"params\":{\"_externalDisputeID\":\"ID of the dispute in arbitrator contract.\",\"_ruling\":\"The ruling choice of the arbitration.\"}}},\"title\":\"DisputeResolver DisputeResolver contract adapted for V2 from https://github.com/kleros/arbitrable-proxy-contracts/blob/master/contracts/ArbitrableProxy.sol.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/arbitration/arbitrables/DisputeResolver.sol\":\"DisputeResolver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"src/arbitration/IArbitrableV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"./IArbitratorV2.sol\\\";\\n\\n/// @title IArbitrableV2\\n/// @notice Arbitrable interface.\\n/// When developing arbitrable contracts, we need to:\\n/// - Define the action taken when a ruling is received by the contract.\\n/// - Allow dispute creation. For this a function must call arbitrator.createDispute{value: _fee}(_choices,_extraData);\\ninterface IArbitrableV2 {\\n    /// @dev To be emitted when a new dispute template is created.\\n    /// @param _templateId The ID of the dispute template.\\n    /// @param _templateTag An optional tag for the dispute template, such as \\\"registration\\\" or \\\"removal\\\".\\n    /// @param data The template data.\\n    event DisputeTemplate(uint256 indexed _templateId, string indexed _templateTag, string data);\\n\\n    /// @dev To be emitted when a dispute is created to link the correct meta-evidence to the disputeID.\\n    /// @param _arbitrator The arbitrator of the contract.\\n    /// @param _arbitrableDisputeID The ID of the dispute in the Arbitrable contract.\\n    /// @param _externalDisputeID An identifier created outside Kleros by the protocol requesting arbitration.\\n    /// @param _templateId The ID of the dispute template. Should not be used with _templateUri.\\n    /// @param _templateUri The URI to the dispute template. For example on IPFS: starting with '/ipfs/'. Should not be used with _templateId.\\n    event DisputeRequest(\\n        IArbitratorV2 indexed _arbitrator,\\n        uint256 indexed _arbitrableDisputeID,\\n        uint256 _externalDisputeID,\\n        uint256 _templateId,\\n        string _templateUri\\n    );\\n\\n    /// @dev To be emitted when a dispute is created to link the correct meta-evidence to the disputeID.\\n    /// @param _arbitrator The arbitrator of the contract.\\n    /// @param _arbitrableChainId The chain ID of the Arbitrable contract.\\n    /// @param _arbitrable The address of the Arbitrable contract.\\n    /// @param _arbitrableDisputeID The ID of the dispute in the Arbitrable contract.\\n    /// @param _externalDisputeID An identifier created outside Kleros by the protocol requesting arbitration.\\n    /// @param _templateId The ID of the dispute template. Should not be used with _templateUri.\\n    /// @param _templateUri IPFS path to the dispute template starting with '/ipfs/'. Should not be used with _templateId.\\n    event CrossChainDisputeRequest(\\n        IArbitratorV2 indexed _arbitrator,\\n        uint256 _arbitrableChainId,\\n        address indexed _arbitrable,\\n        uint256 indexed _arbitrableDisputeID,\\n        uint256 _externalDisputeID,\\n        uint256 _templateId,\\n        string _templateUri\\n    );\\n\\n    /// @dev To be raised when a ruling is given.\\n    /// @param _arbitrator The arbitrator giving the ruling.\\n    /// @param _disputeID ID of the dispute in the Arbitrator contract.\\n    /// @param _ruling The ruling which was given.\\n    event Ruling(IArbitratorV2 indexed _arbitrator, uint256 indexed _disputeID, uint256 _ruling);\\n\\n    /// @dev Give a ruling for a dispute.\\n    ///      Must be called by the arbitrator.\\n    ///      The purpose of this function is to ensure that the address calling it has the right to rule on the contract.\\n    /// @param _disputeID ID of the dispute in the Arbitrator contract.\\n    /// @param _ruling Ruling given by the arbitrator.\\n    /// Note that 0 is reserved for \\\"Not able/wanting to make a decision\\\".\\n    function rule(uint256 _disputeID, uint256 _ruling) external;\\n}\\n\",\"keccak256\":\"0x4e29b75fbf3d030d231b7e963bcd21b70c624144cbcc039c4ae25055dac95e6a\",\"license\":\"MIT\"},\"src/arbitration/IArbitratorV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"./IArbitrableV2.sol\\\";\\n\\n/// @title Arbitrator\\n/// Arbitrator interface that implements the new arbitration standard.\\n/// Unlike the ERC-792 this standard is not concerned with appeals, so each arbitrator can implement an appeal system that suits it the most.\\n/// When developing arbitrator contracts we need to:\\n/// - Define the functions for dispute creation (createDispute). Don't forget to store the arbitrated contract and the disputeID (which should be unique, may nbDisputes).\\n/// - Define the functions for cost display (arbitrationCost).\\n/// - Allow giving rulings. For this a function must call arbitrable.rule(disputeID, ruling).\\ninterface IArbitratorV2 {\\n    /// @dev To be emitted when a dispute is created.\\n    /// @param _disputeID Identifier of the dispute.\\n    /// @param _arbitrable The contract which created the dispute.\\n    event DisputeCreation(uint256 indexed _disputeID, IArbitrableV2 indexed _arbitrable);\\n\\n    /// @dev To be raised when a ruling is given.\\n    /// @param _arbitrable The arbitrable receiving the ruling.\\n    /// @param _disputeID Identifier of the dispute in the Arbitrator contract.\\n    /// @param _ruling The ruling which was given.\\n    event Ruling(IArbitrableV2 indexed _arbitrable, uint256 indexed _disputeID, uint256 _ruling);\\n\\n    /// @dev Create a dispute.\\n    ///      Must be called by the arbitrable contract.\\n    ///      Must pay at least arbitrationCost(_extraData).\\n    /// @param _choices Amount of choices the arbitrator can make in this dispute.\\n    /// @param _extraData Can be used to give additional info on the dispute to be created.\\n    /// @return disputeID Identifier of the dispute created.\\n    function createDispute(uint256 _choices, bytes calldata _extraData) external payable returns (uint256 disputeID);\\n\\n    /// @dev Compute the cost of arbitration.\\n    ///      It is recommended not to increase it often, as it can be highly time and gas consuming for the arbitrated contracts to cope with fee augmentation.\\n    /// @param _extraData Can be used to give additional info on the dispute to be created.\\n    /// @return cost Required cost of arbitration.\\n    function arbitrationCost(bytes calldata _extraData) external view returns (uint256 cost);\\n\\n    /// @dev Return the current ruling of a dispute.\\n    ///      This is useful for parties to know if they should appeal.\\n    /// @param _disputeID ID of the dispute.\\n    /// @return ruling The ruling which has been given or the one which will be given if there is no appeal.\\n    function currentRuling(uint _disputeID) external view returns (uint ruling);\\n}\\n\",\"keccak256\":\"0x07d5b8029368fcb701315273eaa3b3845cbee9303f6aad7993d551ed2f4360f2\",\"license\":\"MIT\"},\"src/arbitration/arbitrables/DisputeResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// @custom:authors: [@ferittuncer, @unknownunknown1, @jaybuidl]\\n/// @custom:reviewers: []\\n/// @custom:auditors: []\\n/// @custom:bounties: []\\n\\nimport \\\"../IArbitrableV2.sol\\\";\\n\\npragma solidity 0.8.18;\\n\\n/// @title DisputeResolver\\n/// DisputeResolver contract adapted for V2 from https://github.com/kleros/arbitrable-proxy-contracts/blob/master/contracts/ArbitrableProxy.sol.\\ncontract DisputeResolver is IArbitrableV2 {\\n    \\n    // ************************************* //\\n    // *         Enums / Structs           * //\\n    // ************************************* //\\n    \\n    struct DisputeStruct {\\n        bytes arbitratorExtraData; // Extra data for the dispute.\\n        bool isRuled; // True if the dispute has been ruled.\\n        uint256 ruling; // Ruling given to the dispute.\\n        uint256 numberOfRulingOptions; // The number of choices the arbitrator can give.\\n    }\\n\\n    // ************************************* //\\n    // *             Storage               * //\\n    // ************************************* //\\n    \\n    address public governor;\\n    IArbitratorV2 public arbitrator; // Arbitrator is set in constructor and never changed.\\n    DisputeStruct[] public disputes; // Local disputes.\\n    mapping(uint256 => uint256) public arbitratorDisputeIDToLocalID; // Maps external (arbitrator side) dispute IDs to local dispute IDs.\\n\\n    // ************************************* //\\n    // *            Constructor            * //\\n    // ************************************* //\\n\\n    /// @dev Constructor\\n    /// @param _arbitrator Target global arbitrator for any disputes.\\n    constructor(IArbitratorV2 _arbitrator) {\\n        governor = msg.sender;\\n        arbitrator = _arbitrator;\\n    }\\n\\n    // ************************************* //\\n    // *           Governance              * //\\n    // ************************************* //\\n\\n    /// @dev Changes the governor.\\n    /// @param _governor The address of the new governor.\\n    function changeGovernor(address _governor) external {\\n        require(governor == msg.sender, \\\"Access not allowed: Governor only.\\\");\\n        governor = _governor;\\n    }\\n\\n    function changeArbitrator(IArbitratorV2 _arbitrator) external {\\n        require(governor == msg.sender, \\\"Access not allowed: Governor only.\\\");\\n        arbitrator = _arbitrator;\\n    }\\n\\n    // ************************************* //\\n    // *         State Modifiers           * //\\n    // ************************************* //\\n\\n    /// @dev Calls createDispute function of the specified arbitrator to create a dispute.\\n    /// Note that we don\\u2019t need to check that msg.value is enough to pay arbitration fees as it\\u2019s the responsibility of the arbitrator contract.\\n    /// @param _arbitratorExtraData Extra data for the arbitrator of the dispute.\\n    /// @param _disputeTemplate Dispute template.\\n    /// @param _numberOfRulingOptions Number of ruling options.\\n    /// @return disputeID Dispute id (on arbitrator side) of the created dispute.\\n    function createDisputeForTemplate(\\n        bytes calldata _arbitratorExtraData,\\n        string calldata _disputeTemplate,\\n        uint256 _numberOfRulingOptions\\n    ) external payable returns (uint256 disputeID) {\\n        return _createDispute(_arbitratorExtraData, _disputeTemplate, \\\"\\\", _numberOfRulingOptions);\\n    }\\n\\n    /// @dev Calls createDispute function of the specified arbitrator to create a dispute.\\n    /// Note that we don\\u2019t need to check that msg.value is enough to pay arbitration fees as it\\u2019s the responsibility of the arbitrator contract.\\n    /// @param _arbitratorExtraData Extra data for the arbitrator of the dispute.\\n    /// @param _disputeTemplateUri The URI to the dispute template. For example on IPFS: starting with '/ipfs/'.\\n    /// @param _numberOfRulingOptions Number of ruling options.\\n    /// @return disputeID Dispute id (on arbitrator side) of the created dispute.\\n    function createDisputeForTemplateUri(\\n        bytes calldata _arbitratorExtraData,\\n        string calldata _disputeTemplateUri,\\n        uint256 _numberOfRulingOptions\\n    ) external payable returns (uint256 disputeID) {\\n        return _createDispute(_arbitratorExtraData, \\\"\\\", _disputeTemplateUri, _numberOfRulingOptions);\\n    }\\n\\n    /// @dev To be called by the arbitrator of the dispute, to declare the winning ruling.\\n    /// @param _externalDisputeID ID of the dispute in arbitrator contract.\\n    /// @param _ruling The ruling choice of the arbitration.\\n    function rule(uint256 _externalDisputeID, uint256 _ruling) external override {\\n        uint256 localDisputeID = arbitratorDisputeIDToLocalID[_externalDisputeID];\\n        DisputeStruct storage dispute = disputes[localDisputeID];\\n        require(msg.sender == address(arbitrator), \\\"Only the arbitrator can execute this.\\\");\\n        require(_ruling <= dispute.numberOfRulingOptions, \\\"Invalid ruling.\\\");\\n        require(!dispute.isRuled, \\\"This dispute has been ruled already.\\\");\\n\\n        dispute.isRuled = true;\\n        dispute.ruling = _ruling;\\n\\n        emit Ruling(IArbitratorV2(msg.sender), _externalDisputeID, dispute.ruling);\\n    }\\n\\n    // ************************************* //\\n    // *            Internal               * //\\n    // ************************************* //\\n\\n    function _createDispute(\\n        bytes calldata _arbitratorExtraData,\\n        string memory _disputeTemplate,\\n        string memory _disputeUri,\\n        uint256 _numberOfRulingOptions\\n    ) internal returns (uint256 disputeID) {\\n        require(_numberOfRulingOptions > 1, \\\"Should be at least 2 ruling options.\\\");\\n\\n        disputeID = arbitrator.createDispute{value: msg.value}(_numberOfRulingOptions, _arbitratorExtraData);\\n        uint256 localDisputeID = disputes.length;\\n        disputes.push(\\n            DisputeStruct({\\n                arbitratorExtraData: _arbitratorExtraData,\\n                isRuled: false,\\n                ruling: 0,\\n                numberOfRulingOptions: _numberOfRulingOptions\\n            })\\n        );\\n        arbitratorDisputeIDToLocalID[disputeID] = localDisputeID;\\n        \\n        uint256 templateId = localDisputeID;\\n        emit DisputeTemplate(templateId, \\\"\\\", _disputeTemplate);\\n        emit DisputeRequest(arbitrator, disputeID, localDisputeID, templateId, _disputeUri);\\n    }\\n}\\n\",\"keccak256\":\"0x72a8602b50246bbf9829fa61eecd80344842d45c9b63ed606d732cfffe23b341\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610c89380380610c8983398101604081905261002f91610062565b60008054336001600160a01b031991821617909155600180549091166001600160a01b0392909216919091179055610092565b60006020828403121561007457600080fd5b81516001600160a01b038116811461008b57600080fd5b9392505050565b610be8806100a16000396000f3fe6080604052600436106100765760003560e01c80630c340a241461007b57806325fb3977146100b8578063311a6c56146100d9578063564a565d146100fb5780636cc6cde11461012b578063908bb2951461014b578063e09997d91461015e578063e4c0aaf41461018b578063fc548f08146101ab575b600080fd5b34801561008757600080fd5b5060005461009b906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100cb6100c6366004610811565b6101cb565b6040519081526020016100af565b3480156100e557600080fd5b506100f96100f4366004610885565b610228565b005b34801561010757600080fd5b5061011b6101163660046108a7565b6103c8565b6040516100af9493929190610906565b34801561013757600080fd5b5060015461009b906001600160a01b031681565b6100cb610159366004610811565b610496565b34801561016a57600080fd5b506100cb6101793660046108a7565b60036020526000908152604090205481565b34801561019757600080fd5b506100f96101a636600461094d565b6104eb565b3480156101b757600080fd5b506100f96101c636600461094d565b610537565b600061021e868686868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604080516020810190915290815292508891506105839050565b9695505050505050565b600082815260036020526040812054600280549192918390811061024e5761024e610971565b6000918252602090912060015460049092020191506001600160a01b031633146102cd5760405162461bcd60e51b815260206004820152602560248201527f4f6e6c79207468652061726269747261746f722063616e2065786563757465206044820152643a3434b99760d91b60648201526084015b60405180910390fd5b80600301548311156103135760405162461bcd60e51b815260206004820152600f60248201526e24b73b30b634b210393ab634b7339760891b60448201526064016102c4565b600181015460ff16156103745760405162461bcd60e51b8152602060048201526024808201527f54686973206469737075746520686173206265656e2072756c656420616c726560448201526330b23c9760e11b60648201526084016102c4565b6001818101805460ff1916909117905560028101839055604051838152849033907f394027a5fa6e098a1191094d1719d6929b9abc535fcc0c8f448d6a4e756222769060200160405180910390a350505050565b600281815481106103d857600080fd5b90600052602060002090600402016000915090508060000180546103fb90610987565b80601f016020809104026020016040519081016040528092919081815260200182805461042790610987565b80156104745780601f1061044957610100808354040283529160200191610474565b820191906000526020600020905b81548152906001019060200180831161045757829003601f168201915b5050505060018301546002840154600390940154929360ff9091169290915084565b600061021e86866040518060200160405280600081525087878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250899250610583915050565b6000546001600160a01b031633146105155760405162461bcd60e51b81526004016102c4906109c1565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146105615760405162461bcd60e51b81526004016102c4906109c1565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000600182116105e15760405162461bcd60e51b8152602060048201526024808201527f53686f756c64206265206174206c6561737420322072756c696e67206f70746960448201526337b7399760e11b60648201526084016102c4565b60015460405163c13517e160e01b81526001600160a01b039091169063c13517e19034906106179086908b908b90600401610a03565b60206040518083038185885af1158015610635573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061065a9190610a39565b600280546040805160a06020601f8c018190040282018101909252608081018a8152949550919382918b908b90819085018382808284376000920182905250938552505050602080830182905260408301829052606090920187905283546001810185559381522081519192600402019081906106d79082610ab7565b5060208281015160018301805460ff1916911515919091179055604080840151600284015560609093015160039283015560008581529190528190208290555181907fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4709082907f9684b36e8ac6332c160d4d4e14a78ea2679b6484c08726432cf097c99ba978409061076a908a90610b77565b60405180910390a360015460405184916001600160a01b0316907f8bd32f430ff060e6bd204709b3790c9807987263d3230c580dc80b5f89e27186906107b590869086908b90610b8a565b60405180910390a3505095945050505050565b60008083601f8401126107da57600080fd5b50813567ffffffffffffffff8111156107f257600080fd5b60208301915083602082850101111561080a57600080fd5b9250929050565b60008060008060006060868803121561082957600080fd5b853567ffffffffffffffff8082111561084157600080fd5b61084d89838a016107c8565b9097509550602088013591508082111561086657600080fd5b50610873888289016107c8565b96999598509660400135949350505050565b6000806040838503121561089857600080fd5b50508035926020909101359150565b6000602082840312156108b957600080fd5b5035919050565b6000815180845260005b818110156108e6576020818501810151868301820152016108ca565b506000602082860101526020601f19601f83011685010191505092915050565b60808152600061091960808301876108c0565b9415156020830152506040810192909252606090910152919050565b6001600160a01b038116811461094a57600080fd5b50565b60006020828403121561095f57600080fd5b813561096a81610935565b9392505050565b634e487b7160e01b600052603260045260246000fd5b600181811c9082168061099b57607f821691505b6020821081036109bb57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526022908201527f416363657373206e6f7420616c6c6f7765643a20476f7665726e6f72206f6e6c6040820152613c9760f11b606082015260800190565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b600060208284031215610a4b57600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b601f821115610ab257600081815260208120601f850160051c81016020861015610a8f5750805b601f850160051c820191505b81811015610aae57828155600101610a9b565b5050505b505050565b815167ffffffffffffffff811115610ad157610ad1610a52565b610ae581610adf8454610987565b84610a68565b602080601f831160018114610b1a5760008415610b025750858301515b600019600386901b1c1916600185901b178555610aae565b600085815260208120601f198616915b82811015610b4957888601518255948401946001909101908401610b2a565b5085821015610b675787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208152600061096a60208301846108c0565b838152826020820152606060408201526000610ba960608301846108c0565b9594505050505056fea2646970667358221220a719b050bca90307d777fff41b441c2f1ee3ba5b5292ac5605dfd7ab9b7b043964736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100765760003560e01c80630c340a241461007b57806325fb3977146100b8578063311a6c56146100d9578063564a565d146100fb5780636cc6cde11461012b578063908bb2951461014b578063e09997d91461015e578063e4c0aaf41461018b578063fc548f08146101ab575b600080fd5b34801561008757600080fd5b5060005461009b906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100cb6100c6366004610811565b6101cb565b6040519081526020016100af565b3480156100e557600080fd5b506100f96100f4366004610885565b610228565b005b34801561010757600080fd5b5061011b6101163660046108a7565b6103c8565b6040516100af9493929190610906565b34801561013757600080fd5b5060015461009b906001600160a01b031681565b6100cb610159366004610811565b610496565b34801561016a57600080fd5b506100cb6101793660046108a7565b60036020526000908152604090205481565b34801561019757600080fd5b506100f96101a636600461094d565b6104eb565b3480156101b757600080fd5b506100f96101c636600461094d565b610537565b600061021e868686868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604080516020810190915290815292508891506105839050565b9695505050505050565b600082815260036020526040812054600280549192918390811061024e5761024e610971565b6000918252602090912060015460049092020191506001600160a01b031633146102cd5760405162461bcd60e51b815260206004820152602560248201527f4f6e6c79207468652061726269747261746f722063616e2065786563757465206044820152643a3434b99760d91b60648201526084015b60405180910390fd5b80600301548311156103135760405162461bcd60e51b815260206004820152600f60248201526e24b73b30b634b210393ab634b7339760891b60448201526064016102c4565b600181015460ff16156103745760405162461bcd60e51b8152602060048201526024808201527f54686973206469737075746520686173206265656e2072756c656420616c726560448201526330b23c9760e11b60648201526084016102c4565b6001818101805460ff1916909117905560028101839055604051838152849033907f394027a5fa6e098a1191094d1719d6929b9abc535fcc0c8f448d6a4e756222769060200160405180910390a350505050565b600281815481106103d857600080fd5b90600052602060002090600402016000915090508060000180546103fb90610987565b80601f016020809104026020016040519081016040528092919081815260200182805461042790610987565b80156104745780601f1061044957610100808354040283529160200191610474565b820191906000526020600020905b81548152906001019060200180831161045757829003601f168201915b5050505060018301546002840154600390940154929360ff9091169290915084565b600061021e86866040518060200160405280600081525087878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250899250610583915050565b6000546001600160a01b031633146105155760405162461bcd60e51b81526004016102c4906109c1565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146105615760405162461bcd60e51b81526004016102c4906109c1565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000600182116105e15760405162461bcd60e51b8152602060048201526024808201527f53686f756c64206265206174206c6561737420322072756c696e67206f70746960448201526337b7399760e11b60648201526084016102c4565b60015460405163c13517e160e01b81526001600160a01b039091169063c13517e19034906106179086908b908b90600401610a03565b60206040518083038185885af1158015610635573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061065a9190610a39565b600280546040805160a06020601f8c018190040282018101909252608081018a8152949550919382918b908b90819085018382808284376000920182905250938552505050602080830182905260408301829052606090920187905283546001810185559381522081519192600402019081906106d79082610ab7565b5060208281015160018301805460ff1916911515919091179055604080840151600284015560609093015160039283015560008581529190528190208290555181907fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4709082907f9684b36e8ac6332c160d4d4e14a78ea2679b6484c08726432cf097c99ba978409061076a908a90610b77565b60405180910390a360015460405184916001600160a01b0316907f8bd32f430ff060e6bd204709b3790c9807987263d3230c580dc80b5f89e27186906107b590869086908b90610b8a565b60405180910390a3505095945050505050565b60008083601f8401126107da57600080fd5b50813567ffffffffffffffff8111156107f257600080fd5b60208301915083602082850101111561080a57600080fd5b9250929050565b60008060008060006060868803121561082957600080fd5b853567ffffffffffffffff8082111561084157600080fd5b61084d89838a016107c8565b9097509550602088013591508082111561086657600080fd5b50610873888289016107c8565b96999598509660400135949350505050565b6000806040838503121561089857600080fd5b50508035926020909101359150565b6000602082840312156108b957600080fd5b5035919050565b6000815180845260005b818110156108e6576020818501810151868301820152016108ca565b506000602082860101526020601f19601f83011685010191505092915050565b60808152600061091960808301876108c0565b9415156020830152506040810192909252606090910152919050565b6001600160a01b038116811461094a57600080fd5b50565b60006020828403121561095f57600080fd5b813561096a81610935565b9392505050565b634e487b7160e01b600052603260045260246000fd5b600181811c9082168061099b57607f821691505b6020821081036109bb57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526022908201527f416363657373206e6f7420616c6c6f7765643a20476f7665726e6f72206f6e6c6040820152613c9760f11b606082015260800190565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b600060208284031215610a4b57600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b601f821115610ab257600081815260208120601f850160051c81016020861015610a8f5750805b601f850160051c820191505b81811015610aae57828155600101610a9b565b5050505b505050565b815167ffffffffffffffff811115610ad157610ad1610a52565b610ae581610adf8454610987565b84610a68565b602080601f831160018114610b1a5760008415610b025750858301515b600019600386901b1c1916600185901b178555610aae565b600085815260208120601f198616915b82811015610b4957888601518255948401946001909101908401610b2a565b5085821015610b675787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208152600061096a60208301846108c0565b838152826020820152606060408201526000610ba960608301846108c0565b9594505050505056fea2646970667358221220a719b050bca90307d777fff41b441c2f1ee3ba5b5292ac5605dfd7ab9b7b043964736f6c63430008120033",
  "devdoc": {
    "events": {
      "CrossChainDisputeRequest(address,uint256,address,uint256,uint256,uint256,string)": {
        "details": "To be emitted when a dispute is created to link the correct meta-evidence to the disputeID.",
        "params": {
          "_arbitrable": "The address of the Arbitrable contract.",
          "_arbitrableChainId": "The chain ID of the Arbitrable contract.",
          "_arbitrableDisputeID": "The ID of the dispute in the Arbitrable contract.",
          "_arbitrator": "The arbitrator of the contract.",
          "_externalDisputeID": "An identifier created outside Kleros by the protocol requesting arbitration.",
          "_templateId": "The ID of the dispute template. Should not be used with _templateUri.",
          "_templateUri": "IPFS path to the dispute template starting with '/ipfs/'. Should not be used with _templateId."
        }
      },
      "DisputeRequest(address,uint256,uint256,uint256,string)": {
        "details": "To be emitted when a dispute is created to link the correct meta-evidence to the disputeID.",
        "params": {
          "_arbitrableDisputeID": "The ID of the dispute in the Arbitrable contract.",
          "_arbitrator": "The arbitrator of the contract.",
          "_externalDisputeID": "An identifier created outside Kleros by the protocol requesting arbitration.",
          "_templateId": "The ID of the dispute template. Should not be used with _templateUri.",
          "_templateUri": "The URI to the dispute template. For example on IPFS: starting with '/ipfs/'. Should not be used with _templateId."
        }
      },
      "DisputeTemplate(uint256,string,string)": {
        "details": "To be emitted when a new dispute template is created.",
        "params": {
          "_templateId": "The ID of the dispute template.",
          "_templateTag": "An optional tag for the dispute template, such as \"registration\" or \"removal\".",
          "data": "The template data."
        }
      },
      "Ruling(address,uint256,uint256)": {
        "details": "To be raised when a ruling is given.",
        "params": {
          "_arbitrator": "The arbitrator giving the ruling.",
          "_disputeID": "ID of the dispute in the Arbitrator contract.",
          "_ruling": "The ruling which was given."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "changeGovernor(address)": {
        "details": "Changes the governor.",
        "params": {
          "_governor": "The address of the new governor."
        }
      },
      "constructor": {
        "details": "Constructor",
        "params": {
          "_arbitrator": "Target global arbitrator for any disputes."
        }
      },
      "createDisputeForTemplate(bytes,string,uint256)": {
        "details": "Calls createDispute function of the specified arbitrator to create a dispute. Note that we don’t need to check that msg.value is enough to pay arbitration fees as it’s the responsibility of the arbitrator contract.",
        "params": {
          "_arbitratorExtraData": "Extra data for the arbitrator of the dispute.",
          "_disputeTemplate": "Dispute template.",
          "_numberOfRulingOptions": "Number of ruling options."
        },
        "returns": {
          "disputeID": "Dispute id (on arbitrator side) of the created dispute."
        }
      },
      "createDisputeForTemplateUri(bytes,string,uint256)": {
        "details": "Calls createDispute function of the specified arbitrator to create a dispute. Note that we don’t need to check that msg.value is enough to pay arbitration fees as it’s the responsibility of the arbitrator contract.",
        "params": {
          "_arbitratorExtraData": "Extra data for the arbitrator of the dispute.",
          "_disputeTemplateUri": "The URI to the dispute template. For example on IPFS: starting with '/ipfs/'.",
          "_numberOfRulingOptions": "Number of ruling options."
        },
        "returns": {
          "disputeID": "Dispute id (on arbitrator side) of the created dispute."
        }
      },
      "rule(uint256,uint256)": {
        "details": "To be called by the arbitrator of the dispute, to declare the winning ruling.",
        "params": {
          "_externalDisputeID": "ID of the dispute in arbitrator contract.",
          "_ruling": "The ruling choice of the arbitration."
        }
      }
    },
    "title": "DisputeResolver DisputeResolver contract adapted for V2 from https://github.com/kleros/arbitrable-proxy-contracts/blob/master/contracts/ArbitrableProxy.sol.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 129,
        "contract": "src/arbitration/arbitrables/DisputeResolver.sol:DisputeResolver",
        "label": "governor",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 132,
        "contract": "src/arbitration/arbitrables/DisputeResolver.sol:DisputeResolver",
        "label": "arbitrator",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IArbitratorV2)112"
      },
      {
        "astId": 136,
        "contract": "src/arbitration/arbitrables/DisputeResolver.sol:DisputeResolver",
        "label": "disputes",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(DisputeStruct)127_storage)dyn_storage"
      },
      {
        "astId": 140,
        "contract": "src/arbitration/arbitrables/DisputeResolver.sol:DisputeResolver",
        "label": "arbitratorDisputeIDToLocalID",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(DisputeStruct)127_storage)dyn_storage": {
        "base": "t_struct(DisputeStruct)127_storage",
        "encoding": "dynamic_array",
        "label": "struct DisputeResolver.DisputeStruct[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IArbitratorV2)112": {
        "encoding": "inplace",
        "label": "contract IArbitratorV2",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(DisputeStruct)127_storage": {
        "encoding": "inplace",
        "label": "struct DisputeResolver.DisputeStruct",
        "members": [
          {
            "astId": 120,
            "contract": "src/arbitration/arbitrables/DisputeResolver.sol:DisputeResolver",
            "label": "arbitratorExtraData",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes_storage"
          },
          {
            "astId": 122,
            "contract": "src/arbitration/arbitrables/DisputeResolver.sol:DisputeResolver",
            "label": "isRuled",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 124,
            "contract": "src/arbitration/arbitrables/DisputeResolver.sol:DisputeResolver",
            "label": "ruling",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 126,
            "contract": "src/arbitration/arbitrables/DisputeResolver.sol:DisputeResolver",
            "label": "numberOfRulingOptions",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
