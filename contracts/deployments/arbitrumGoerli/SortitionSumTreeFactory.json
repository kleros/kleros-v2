{
  "address": "0x40a78989317B953e427B3BD87C59eA003fcC2296",
  "abi": [],
  "transactionHash": "0xd9e4db9675bdc3d1934b43fafec871592d7d37952920460b4d11f1d66cf810bd",
  "receipt": {
    "to": null,
    "from": "0xF50E77f2A2B6138D16c6c7511562E5C33c4B15A3",
    "contractAddress": "0x40a78989317B953e427B3BD87C59eA003fcC2296",
    "transactionIndex": 1,
    "gasUsed": "9962334",
    "logsBloom": "0x
    "blockHash": "0xd0140bbbd3cf04ab840c816b050231f2ffe1da508010c9e14cc7c53656e1008e",
    "transactionHash": "0xd9e4db9675bdc3d1934b43fafec871592d7d37952920460b4d11f1d66cf810bd",
    "logs": [],
    "blockNumber": 997974,
    "cumulativeGasUsed": "9962334",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "f57208d12ea18de1e79aa93372bf0e19",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"A factory of trees that keeps track of staked values for sortition. This is the updated version for 0.8 compiler.\",\"kind\":\"dev\",\"methods\":{\"createTree(SortitionSumTreeFactory.SortitionSumTrees storage,bytes32,uint256)\":{\"details\":\"Create a sortition sum tree at the specified key.\",\"params\":{\"_K\":\"The number of children each node in the tree should have.\",\"_key\":\"The key of the new tree.\"}},\"queryLeafs(SortitionSumTreeFactory.SortitionSumTrees storage,bytes32,uint256,uint256)\":{\"details\":\"Query the leaves of a tree. Note that if `startIndex == 0`, the tree is empty and the root node will be returned.\",\"params\":{\"_count\":\"The number of items to return.\",\"_cursor\":\"The pagination cursor.\",\"_key\":\"The key of the tree to get the leaves from.\"},\"returns\":{\"hasMore\":\"Whether there are more for pagination.  `O(n)` where  `n` is the maximum number of nodes ever appended.\",\"startIndex\":\"The index at which leaves start.\",\"values\":\"The values of the returned leaves.\"}},\"set(SortitionSumTreeFactory.SortitionSumTrees storage,bytes32,uint256,bytes32)\":{\"details\":\"Set a value of a tree.\",\"params\":{\"_ID\":\"The ID of the value.  `O(log_k(n))` where  `k` is the maximum number of childs per node in the tree,   and `n` is the maximum number of nodes ever appended.\",\"_key\":\"The key of the tree.\",\"_value\":\"The new value.\"}},\"stakeOf(SortitionSumTreeFactory.SortitionSumTrees storage,bytes32,bytes32)\":{\"details\":\"Gets a specified ID's associated value.\",\"params\":{\"_ID\":\"The ID of the value.\",\"_key\":\"The key of the tree.\"},\"returns\":{\"value\":\"The associated value.\"}}},\"title\":\"SortitionSumTreeFactory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/data-structures/SortitionSumTreeFactory.sol\":\"SortitionSumTreeFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"src/data-structures/SortitionSumTreeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n *  @authors: [@epiqueras, @unknownunknown1]\\n *  @reviewers: []\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\npragma solidity ^0.8;\\n\\n/**\\n *  @title SortitionSumTreeFactory\\n *  @dev A factory of trees that keeps track of staked values for sortition. This is the updated version for 0.8 compiler.\\n */\\nlibrary SortitionSumTreeFactory {\\n    /* Structs */\\n\\n    struct SortitionSumTree {\\n        uint256 K; // The maximum number of childs per node.\\n        // We use this to keep track of vacant positions in the tree after removing a leaf. This is for keeping the tree as balanced as possible without spending gas on moving nodes around.\\n        uint256[] stack;\\n        uint256[] nodes;\\n        // Two-way mapping of IDs to node indexes. Note that node index 0 is reserved for the root node, and means the ID does not have a node.\\n        mapping(bytes32 => uint256) IDsToNodeIndexes;\\n        mapping(uint256 => bytes32) nodeIndexesToIDs;\\n    }\\n\\n    /* Storage */\\n\\n    struct SortitionSumTrees {\\n        mapping(bytes32 => SortitionSumTree) sortitionSumTrees;\\n    }\\n\\n    /* Public */\\n\\n    /**\\n     *  @dev Create a sortition sum tree at the specified key.\\n     *  @param _key The key of the new tree.\\n     *  @param _K The number of children each node in the tree should have.\\n     */\\n    function createTree(\\n        SortitionSumTrees storage self,\\n        bytes32 _key,\\n        uint256 _K\\n    ) external {\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\n        require(tree.K == 0, \\\"Tree already exists.\\\");\\n        require(_K > 1, \\\"K must be greater than one.\\\");\\n        tree.K = _K;\\n        tree.nodes.push(0);\\n    }\\n\\n    /**\\n     *  @dev Set a value of a tree.\\n     *  @param _key The key of the tree.\\n     *  @param _value The new value.\\n     *  @param _ID The ID of the value.\\n     *  `O(log_k(n))` where\\n     *  `k` is the maximum number of childs per node in the tree,\\n     *   and `n` is the maximum number of nodes ever appended.\\n     */\\n    function set(\\n        SortitionSumTrees storage self,\\n        bytes32 _key,\\n        uint256 _value,\\n        bytes32 _ID\\n    ) external {\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\n        uint256 treeIndex = tree.IDsToNodeIndexes[_ID];\\n\\n        if (treeIndex == 0) {\\n            // No existing node.\\n            if (_value != 0) {\\n                // Non zero value.\\n                // Append.\\n                // Add node.\\n                if (tree.stack.length == 0) {\\n                    // No vacant spots.\\n                    // Get the index and append the value.\\n                    treeIndex = tree.nodes.length;\\n                    tree.nodes.push(_value);\\n\\n                    // Potentially append a new node and make the parent a sum node.\\n                    if (treeIndex != 1 && (treeIndex - 1) % tree.K == 0) {\\n                        // Is first child.\\n                        uint256 parentIndex = treeIndex / tree.K;\\n                        bytes32 parentID = tree.nodeIndexesToIDs[parentIndex];\\n                        uint256 newIndex = treeIndex + 1;\\n                        tree.nodes.push(tree.nodes[parentIndex]);\\n                        delete tree.nodeIndexesToIDs[parentIndex];\\n                        tree.IDsToNodeIndexes[parentID] = newIndex;\\n                        tree.nodeIndexesToIDs[newIndex] = parentID;\\n                    }\\n                } else {\\n                    // Some vacant spot.\\n                    // Pop the stack and append the value.\\n                    treeIndex = tree.stack[tree.stack.length - 1];\\n                    tree.stack.pop();\\n                    tree.nodes[treeIndex] = _value;\\n                }\\n\\n                // Add label.\\n                tree.IDsToNodeIndexes[_ID] = treeIndex;\\n                tree.nodeIndexesToIDs[treeIndex] = _ID;\\n\\n                updateParents(self, _key, treeIndex, true, _value);\\n            }\\n        } else {\\n            // Existing node.\\n            if (_value == 0) {\\n                // Zero value.\\n                // Remove.\\n                // Remember value and set to 0.\\n                uint256 value = tree.nodes[treeIndex];\\n                tree.nodes[treeIndex] = 0;\\n\\n                // Push to stack.\\n                tree.stack.push(treeIndex);\\n\\n                // Clear label.\\n                delete tree.IDsToNodeIndexes[_ID];\\n                delete tree.nodeIndexesToIDs[treeIndex];\\n\\n                updateParents(self, _key, treeIndex, false, value);\\n            } else if (_value != tree.nodes[treeIndex]) {\\n                // New, non zero value.\\n                // Set.\\n                bool plusOrMinus = tree.nodes[treeIndex] <= _value;\\n                uint256 plusOrMinusValue = plusOrMinus\\n                    ? _value - tree.nodes[treeIndex]\\n                    : tree.nodes[treeIndex] - _value;\\n                tree.nodes[treeIndex] = _value;\\n\\n                updateParents(self, _key, treeIndex, plusOrMinus, plusOrMinusValue);\\n            }\\n        }\\n    }\\n\\n    /* Public Views */\\n\\n    /**\\n     *  @dev Query the leaves of a tree. Note that if `startIndex == 0`, the tree is empty and the root node will be returned.\\n     *  @param _key The key of the tree to get the leaves from.\\n     *  @param _cursor The pagination cursor.\\n     *  @param _count The number of items to return.\\n     *  @return startIndex The index at which leaves start.\\n     *  @return values The values of the returned leaves.\\n     *  @return hasMore Whether there are more for pagination.\\n     *  `O(n)` where\\n     *  `n` is the maximum number of nodes ever appended.\\n     */\\n    function queryLeafs(\\n        SortitionSumTrees storage self,\\n        bytes32 _key,\\n        uint256 _cursor,\\n        uint256 _count\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 startIndex,\\n            uint256[] memory values,\\n            bool hasMore\\n        )\\n    {\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\n\\n        // Find the start index.\\n        for (uint256 i = 0; i < tree.nodes.length; i++) {\\n            if ((tree.K * i) + 1 >= tree.nodes.length) {\\n                startIndex = i;\\n                break;\\n            }\\n        }\\n\\n        // Get the values.\\n        uint256 loopStartIndex = startIndex + _cursor;\\n        values = new uint256[](\\n            loopStartIndex + _count > tree.nodes.length ? tree.nodes.length - loopStartIndex : _count\\n        );\\n        uint256 valuesIndex = 0;\\n        for (uint256 j = loopStartIndex; j < tree.nodes.length; j++) {\\n            if (valuesIndex < _count) {\\n                values[valuesIndex] = tree.nodes[j];\\n                valuesIndex++;\\n            } else {\\n                hasMore = true;\\n                break;\\n            }\\n        }\\n    }\\n\\n    /** @dev Gets a specified ID's associated value.\\n     *  @param _key The key of the tree.\\n     *  @param _ID The ID of the value.\\n     *  @return value The associated value.\\n     */\\n    function stakeOf(\\n        SortitionSumTrees storage self,\\n        bytes32 _key,\\n        bytes32 _ID\\n    ) external view returns (uint256 value) {\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\n        uint256 treeIndex = tree.IDsToNodeIndexes[_ID];\\n\\n        if (treeIndex == 0) value = 0;\\n        else value = tree.nodes[treeIndex];\\n    }\\n\\n    /* Private */\\n\\n    /**\\n     *  @dev Update all the parents of a node.\\n     *  @param _key The key of the tree to update.\\n     *  @param _treeIndex The index of the node to start from.\\n     *  @param _plusOrMinus Whether to add (true) or substract (false).\\n     *  @param _value The value to add or substract.\\n     *  `O(log_k(n))` where\\n     *  `k` is the maximum number of childs per node in the tree,\\n     *   and `n` is the maximum number of nodes ever appended.\\n     */\\n    function updateParents(\\n        SortitionSumTrees storage self,\\n        bytes32 _key,\\n        uint256 _treeIndex,\\n        bool _plusOrMinus,\\n        uint256 _value\\n    ) private {\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\n\\n        uint256 parentIndex = _treeIndex;\\n        while (parentIndex != 0) {\\n            parentIndex = (parentIndex - 1) / tree.K;\\n            tree.nodes[parentIndex] = _plusOrMinus\\n                ? tree.nodes[parentIndex] + _value\\n                : tree.nodes[parentIndex] - _value;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x158abfe345fecd93d3d6de008c01f4f72ffb03af5c6fbdf0208c7228fc978114\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61096861003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c80632e25c38a1461005b57806365b81f4f1461007d5780637521ccb1146100a85780639075789e146100c9575b600080fd5b81801561006757600080fd5b5061007b61007636600461077c565b6100e9565b005b61009061008b36600461077c565b610437565b60405161009f939291906107ae565b60405180910390f35b6100bb6100b6366004610807565b6105a2565b60405190815260200161009f565b8180156100d557600080fd5b5061007b6100e4366004610807565b6105f8565b6000838152602085815260408083208484526003810190925290912054806102af5783156102aa5760018201546101fc57506002810180546001808201835560009283526020909220810185905590811480159061015b5750815461014f600183610849565b6101599190610876565b155b156101f757815460009061016f908361088a565b600081815260048501602052604081205491925061018e84600161089e565b9050846002018560020184815481106101a9576101a96108b6565b60009182526020808320909101548354600181018555938352818320909301929092559384526004860180825260408086208690558486526003880183528086208490559285529052909120555b610277565b60018083018054909161020e91610849565b8154811061021e5761021e6108b6565b906000526020600020015490508160010180548061023e5761023e6108cc565b600190038181906000526020600020016000905590558382600201828154811061026a5761026a6108b6565b6000918252602090912001555b600083815260038301602090815260408083208490558383526004850190915290208390556102aa8686836001886106be565b61042f565b8361034c5760008260020182815481106102cb576102cb6108b6565b9060005260206000200154905060008360020183815481106102ef576102ef6108b6565b600091825260208083209091019290925560018086018054918201815582528282200184905585815260038501825260408082208290558482526004860190925290812081905561034690889088908590856106be565b5061042f565b816002018181548110610361576103616108b6565b9060005260206000200154841461042f5760008483600201838154811061038a5761038a6108b6565b9060005260206000200154111590506000816103d057858460020184815481106103b6576103b66108b6565b90600052602060002001546103cb9190610849565b6103fb565b8360020183815481106103e5576103e56108b6565b9060005260206000200154866103fb9190610849565b905085846002018481548110610413576104136108b6565b60009182526020909120015561042c88888585856106be565b50505b505050505050565b60008381526020859052604081206060908290815b6002820154811015610494576002820154825461046a9083906108e2565b61047590600161089e565b1061048257809450610494565b8061048c81610901565b91505061044c565b5060006104a1878661089e565b60028301549091506104b3878361089e565b116104be57856104ce565b60028201546104ce908290610849565b67ffffffffffffffff8111156104e6576104e661091c565b60405190808252806020026020018201604052801561050f578160200160208202803683370190505b5093506000815b600284015481101561059457878210156105795783600201818154811061053f5761053f6108b6565b906000526020600020015486838151811061055c5761055c6108b6565b60209081029190910101528161057181610901565b925050610582565b60019450610594565b8061058c81610901565b915050610516565b505050509450945094915050565b60008281526020848152604080832084845260038101909252822054806105cc57600092506105ef565b8160020181815481106105e1576105e16108b6565b906000526020600020015492505b50509392505050565b60008281526020849052604090208054156106515760405162461bcd60e51b81526020600482015260146024820152732a3932b29030b63932b0b23c9032bc34b9ba399760611b60448201526064015b60405180910390fd5b600182116106a15760405162461bcd60e51b815260206004820152601b60248201527f4b206d7573742062652067726561746572207468616e206f6e652e00000000006044820152606401610648565b908155600201805460018101825560009182526020822001555050565b6000848152602086905260409020835b80156107735781546106e1600183610849565b6106eb919061088a565b9050836107225782826002018281548110610708576107086108b6565b906000526020600020015461071d9190610849565b61074d565b82826002018281548110610738576107386108b6565b906000526020600020015461074d919061089e565b826002018281548110610762576107626108b6565b6000918252602090912001556106ce565b50505050505050565b6000806000806080858703121561079257600080fd5b5050823594602084013594506040840135936060013592509050565b6000606082018583526020606081850152818651808452608086019150828801935060005b818110156107ef578451835293830193918301916001016107d3565b50508093505050508215156040830152949350505050565b60008060006060848603121561081c57600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052601160045260246000fd5b60008282101561085b5761085b610833565b500390565b634e487b7160e01b600052601260045260246000fd5b60008261088557610885610860565b500690565b60008261089957610899610860565b500490565b600082198211156108b1576108b1610833565b500190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b60008160001904831182151516156108fc576108fc610833565b500290565b600060001982141561091557610915610833565b5060010190565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220e3ce267a72dce977fefce2bfaf8b7d2ad737e92e31686d6dfbcf38d6aa6b9e9664736f6c63430008090033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c80632e25c38a1461005b57806365b81f4f1461007d5780637521ccb1146100a85780639075789e146100c9575b600080fd5b81801561006757600080fd5b5061007b61007636600461077c565b6100e9565b005b61009061008b36600461077c565b610437565b60405161009f939291906107ae565b60405180910390f35b6100bb6100b6366004610807565b6105a2565b60405190815260200161009f565b8180156100d557600080fd5b5061007b6100e4366004610807565b6105f8565b6000838152602085815260408083208484526003810190925290912054806102af5783156102aa5760018201546101fc57506002810180546001808201835560009283526020909220810185905590811480159061015b5750815461014f600183610849565b6101599190610876565b155b156101f757815460009061016f908361088a565b600081815260048501602052604081205491925061018e84600161089e565b9050846002018560020184815481106101a9576101a96108b6565b60009182526020808320909101548354600181018555938352818320909301929092559384526004860180825260408086208690558486526003880183528086208490559285529052909120555b610277565b60018083018054909161020e91610849565b8154811061021e5761021e6108b6565b906000526020600020015490508160010180548061023e5761023e6108cc565b600190038181906000526020600020016000905590558382600201828154811061026a5761026a6108b6565b6000918252602090912001555b600083815260038301602090815260408083208490558383526004850190915290208390556102aa8686836001886106be565b61042f565b8361034c5760008260020182815481106102cb576102cb6108b6565b9060005260206000200154905060008360020183815481106102ef576102ef6108b6565b600091825260208083209091019290925560018086018054918201815582528282200184905585815260038501825260408082208290558482526004860190925290812081905561034690889088908590856106be565b5061042f565b816002018181548110610361576103616108b6565b9060005260206000200154841461042f5760008483600201838154811061038a5761038a6108b6565b9060005260206000200154111590506000816103d057858460020184815481106103b6576103b66108b6565b90600052602060002001546103cb9190610849565b6103fb565b8360020183815481106103e5576103e56108b6565b9060005260206000200154866103fb9190610849565b905085846002018481548110610413576104136108b6565b60009182526020909120015561042c88888585856106be565b50505b505050505050565b60008381526020859052604081206060908290815b6002820154811015610494576002820154825461046a9083906108e2565b61047590600161089e565b1061048257809450610494565b8061048c81610901565b91505061044c565b5060006104a1878661089e565b60028301549091506104b3878361089e565b116104be57856104ce565b60028201546104ce908290610849565b67ffffffffffffffff8111156104e6576104e661091c565b60405190808252806020026020018201604052801561050f578160200160208202803683370190505b5093506000815b600284015481101561059457878210156105795783600201818154811061053f5761053f6108b6565b906000526020600020015486838151811061055c5761055c6108b6565b60209081029190910101528161057181610901565b925050610582565b60019450610594565b8061058c81610901565b915050610516565b505050509450945094915050565b60008281526020848152604080832084845260038101909252822054806105cc57600092506105ef565b8160020181815481106105e1576105e16108b6565b906000526020600020015492505b50509392505050565b60008281526020849052604090208054156106515760405162461bcd60e51b81526020600482015260146024820152732a3932b29030b63932b0b23c9032bc34b9ba399760611b60448201526064015b60405180910390fd5b600182116106a15760405162461bcd60e51b815260206004820152601b60248201527f4b206d7573742062652067726561746572207468616e206f6e652e00000000006044820152606401610648565b908155600201805460018101825560009182526020822001555050565b6000848152602086905260409020835b80156107735781546106e1600183610849565b6106eb919061088a565b9050836107225782826002018281548110610708576107086108b6565b906000526020600020015461071d9190610849565b61074d565b82826002018281548110610738576107386108b6565b906000526020600020015461074d919061089e565b826002018281548110610762576107626108b6565b6000918252602090912001556106ce565b50505050505050565b6000806000806080858703121561079257600080fd5b5050823594602084013594506040840135936060013592509050565b6000606082018583526020606081850152818651808452608086019150828801935060005b818110156107ef578451835293830193918301916001016107d3565b50508093505050508215156040830152949350505050565b60008060006060848603121561081c57600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052601160045260246000fd5b60008282101561085b5761085b610833565b500390565b634e487b7160e01b600052601260045260246000fd5b60008261088557610885610860565b500690565b60008261089957610899610860565b500490565b600082198211156108b1576108b1610833565b500190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b60008160001904831182151516156108fc576108fc610833565b500290565b600060001982141561091557610915610833565b5060010190565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220e3ce267a72dce977fefce2bfaf8b7d2ad737e92e31686d6dfbcf38d6aa6b9e9664736f6c63430008090033",
  "devdoc": {
    "details": "A factory of trees that keeps track of staked values for sortition. This is the updated version for 0.8 compiler.",
    "kind": "dev",
    "methods": {
      "createTree(SortitionSumTreeFactory.SortitionSumTrees storage,bytes32,uint256)": {
        "details": "Create a sortition sum tree at the specified key.",
        "params": {
          "_K": "The number of children each node in the tree should have.",
          "_key": "The key of the new tree."
        }
      },
      "queryLeafs(SortitionSumTreeFactory.SortitionSumTrees storage,bytes32,uint256,uint256)": {
        "details": "Query the leaves of a tree. Note that if `startIndex == 0`, the tree is empty and the root node will be returned.",
        "params": {
          "_count": "The number of items to return.",
          "_cursor": "The pagination cursor.",
          "_key": "The key of the tree to get the leaves from."
        },
        "returns": {
          "hasMore": "Whether there are more for pagination.  `O(n)` where  `n` is the maximum number of nodes ever appended.",
          "startIndex": "The index at which leaves start.",
          "values": "The values of the returned leaves."
        }
      },
      "set(SortitionSumTreeFactory.SortitionSumTrees storage,bytes32,uint256,bytes32)": {
        "details": "Set a value of a tree.",
        "params": {
          "_ID": "The ID of the value.  `O(log_k(n))` where  `k` is the maximum number of childs per node in the tree,   and `n` is the maximum number of nodes ever appended.",
          "_key": "The key of the tree.",
          "_value": "The new value."
        }
      },
      "stakeOf(SortitionSumTreeFactory.SortitionSumTrees storage,bytes32,bytes32)": {
        "details": "Gets a specified ID's associated value.",
        "params": {
          "_ID": "The ID of the value.",
          "_key": "The key of the tree."
        },
        "returns": {
          "value": "The associated value."
        }
      }
    },
    "title": "SortitionSumTreeFactory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
