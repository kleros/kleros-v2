{
  "address": "0xC3f638389635bF33E019c845FdaF2ed9bca3DF67",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedDelegateCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerOnly",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_templateId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "_templateTag",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_templateData",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_templateDataMappings",
          "type": "string"
        }
      ],
      "name": "DisputeTemplate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "changeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_templateTag",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_templateData",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_templateDataMappings",
          "type": "string"
        }
      ],
      "name": "setDisputeTemplate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "templateId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "templates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa6a4958a5881803297025fcb6b02ff4623b6c196dfc1c63ecdcc5dbca371f59c",
  "receipt": {
    "to": null,
    "from": "0xf1C7c037891525E360C59f708739Ac09A7670c59",
    "contractAddress": "0xC3f638389635bF33E019c845FdaF2ed9bca3DF67",
    "transactionIndex": 1,
    "gasUsed": "550773",
    "logsBloom": "0x
    "blockHash": "0x3831b40eb48160858d03c9e32ad925255ab201a6d738d0d223b347c63193ab27",
    "transactionHash": "0xa6a4958a5881803297025fcb6b02ff4623b6c196dfc1c63ecdcc5dbca371f59c",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 193661055,
        "transactionHash": "0xa6a4958a5881803297025fcb6b02ff4623b6c196dfc1c63ecdcc5dbca371f59c",
        "address": "0xC3f638389635bF33E019c845FdaF2ed9bca3DF67",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 0,
        "blockHash": "0x3831b40eb48160858d03c9e32ad925255ab201a6d738d0d223b347c63193ab27"
      }
    ],
    "blockNumber": 193661055,
    "cumulativeGasUsed": "550773",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d547d738900bce1310e91a5d1adfc179",
  "metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedDelegateCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerOnly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_templateId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_templateTag\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_templateData\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_templateDataMappings\",\"type\":\"string\"}],\"name\":\"DisputeTemplate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_templateTag\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_templateData\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_templateDataMappings\",\"type\":\"string\"}],\"name\":\"setDisputeTemplate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"templateId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"templates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AlreadyInitialized()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"DisputeTemplate(uint256,string,string,string)\":{\"params\":{\"_templateData\":\"The template data.\",\"_templateDataMappings\":\"The data mappings.\",\"_templateId\":\"The identifier of the dispute template.\",\"_templateTag\":\"An optional tag for the dispute template, such as \\\"registration\\\" or \\\"removal\\\".\"}},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"params\":{\"newImplementation\":\"Address of the new implementation the proxy is now forwarding calls to.\"}}},\"kind\":\"dev\",\"methods\":{\"changeOwner(address)\":{\"params\":{\"_owner\":\"The new owner.\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"initialize(address)\":{\"params\":{\"_owner\":\"Owner of the contract.\"}},\"proxiableUUID()\":{\"details\":\"IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the if statement.\"},\"setDisputeTemplate(string,string,string)\":{\"params\":{\"_templateData\":\"The template data.\",\"_templateDataMappings\":\"The data mappings for the template.\",\"_templateTag\":\"An optional tag for the dispute template, such as \\\"registration\\\" or \\\"removal\\\".\"},\"returns\":{\"templateId\":\"The identifier of the dispute template.\"}},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Reverts if the execution is not performed via delegatecall or the execution context is not of a proxy with an ERC1967-compliant implementation pointing to self.\",\"params\":{\"data\":\"Data used in a delegate call to `newImplementation` if non-empty. This will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity constructor.\",\"newImplementation\":\"Address of the new implementation contract.\"}}},\"stateVariables\":{\"version\":{\"return\":\"Version string.\",\"returns\":{\"_0\":\"Version string.\"}}},\"title\":\"Dispute Template Registry\",\"version\":1},\"userdoc\":{\"errors\":{\"FailedDelegateCall()\":[{\"notice\":\"Failed Delegated call\"}],\"InvalidImplementation(address)\":[{\"notice\":\"The `implementation` is not UUPS-compliant\"}],\"UUPSUnauthorizedCallContext()\":[{\"notice\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"notice\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"DisputeTemplate(uint256,string,string,string)\":{\"notice\":\"To be emitted when a new dispute template is created.\"},\"Upgraded(address)\":{\"notice\":\"Emitted when the `implementation` has been successfully upgraded.\"}},\"kind\":\"user\",\"methods\":{\"changeOwner(address)\":{\"notice\":\"Changes the owner of the contract.\"},\"initialize(address)\":{\"notice\":\"Initializer\"},\"owner()\":{\"notice\":\"The owner of the contract.\"},\"proxiableUUID()\":{\"notice\":\"Implementation of the ERC1822 `proxiableUUID` function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade.\"},\"setDisputeTemplate(string,string,string)\":{\"notice\":\"Registers a new dispute template.\"},\"templates()\":{\"notice\":\"The number of templates.\"},\"upgradeToAndCall(address,bytes)\":{\"notice\":\"Upgrade mechanism including access control and UUPS-compliance.\"},\"version()\":{\"notice\":\"Returns the version of the implementation.\"}},\"notice\":\"A contract to maintain a registry of dispute templates.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/arbitration/DisputeTemplateRegistry.sol\":\"DisputeTemplateRegistry\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"src/arbitration/DisputeTemplateRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport \\\"../proxy/UUPSProxiable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\nimport \\\"./interfaces/IDisputeTemplateRegistry.sol\\\";\\n\\n/// @title Dispute Template Registry\\n/// @notice A contract to maintain a registry of dispute templates.\\ncontract DisputeTemplateRegistry is IDisputeTemplateRegistry, UUPSProxiable, Initializable {\\n    string public constant override version = \\\"2.0.0\\\";\\n\\n    // ************************************* //\\n    // *             Storage               * //\\n    // ************************************* //\\n\\n    /// @notice The owner of the contract.\\n    address public owner;\\n\\n    /// @notice The number of templates.\\n    uint256 public templates;\\n\\n    // ************************************* //\\n    // *        Function Modifiers         * //\\n    // ************************************* //\\n\\n    modifier onlyByOwner() {\\n        if (owner != msg.sender) revert OwnerOnly();\\n        _;\\n    }\\n\\n    // ************************************* //\\n    // *            Constructor            * //\\n    // ************************************* //\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Initializer\\n    /// @param _owner Owner of the contract.\\n    function initialize(address _owner) external initializer {\\n        owner = _owner;\\n    }\\n\\n    // ************************ //\\n    // *      Governance      * //\\n    // ************************ //\\n\\n    /// @dev Access Control to perform implementation upgrades (UUPS Proxiable)\\n    ///      Only the owner can perform upgrades (`onlyByOwner`)\\n    function _authorizeUpgrade(address) internal view override onlyByOwner {\\n        // NOP\\n    }\\n\\n    /// @notice Changes the owner of the contract.\\n    /// @param _owner The new owner.\\n    function changeOwner(address _owner) external onlyByOwner {\\n        owner = _owner;\\n    }\\n\\n    // ************************************* //\\n    // *         State Modifiers           * //\\n    // ************************************* //\\n\\n    /// @inheritdoc IDisputeTemplateRegistry\\n    function setDisputeTemplate(\\n        string memory _templateTag,\\n        string memory _templateData,\\n        string memory _templateDataMappings\\n    ) external returns (uint256 templateId) {\\n        templateId = templates++;\\n        emit DisputeTemplate(templateId, _templateTag, _templateData, _templateDataMappings);\\n    }\\n\\n    // ************************************* //\\n    // *              Errors               * //\\n    // ************************************* //\\n\\n    error OwnerOnly();\\n}\\n\",\"keccak256\":\"0x9790f4e6f1a6b77063f3d95595ad70d86b5076371b3c3e04e2ce73ec0f9365f4\",\"license\":\"MIT\"},\"src/arbitration/interfaces/IDisputeTemplateRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/// @title IDisputeTemplate\\n/// @notice Dispute Template interface.\\ninterface IDisputeTemplateRegistry {\\n    // ************************************* //\\n    // *              Events               * //\\n    // ************************************* //\\n\\n    /// @notice To be emitted when a new dispute template is created.\\n    /// @param _templateId The identifier of the dispute template.\\n    /// @param _templateTag An optional tag for the dispute template, such as \\\"registration\\\" or \\\"removal\\\".\\n    /// @param _templateData The template data.\\n    /// @param _templateDataMappings The data mappings.\\n    event DisputeTemplate(\\n        uint256 indexed _templateId,\\n        string indexed _templateTag,\\n        string _templateData,\\n        string _templateDataMappings\\n    );\\n\\n    // ************************************* //\\n    // *         State Modifiers           * //\\n    // ************************************* //\\n\\n    /// @notice Registers a new dispute template.\\n    /// @param _templateTag An optional tag for the dispute template, such as \\\"registration\\\" or \\\"removal\\\".\\n    /// @param _templateData The template data.\\n    /// @param _templateDataMappings The data mappings for the template.\\n    /// @return templateId The identifier of the dispute template.\\n    function setDisputeTemplate(\\n        string memory _templateTag,\\n        string memory _templateData,\\n        string memory _templateDataMappings\\n    ) external returns (uint256 templateId);\\n}\\n\",\"keccak256\":\"0x07ea0d9c5aea94cb73ca90f9a9f7689dcca2b37e7ec49bc6e02ee660ce2cee4f\",\"license\":\"MIT\"},\"src/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol) <https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.9.0/contracts/proxy/utils/Initializable.sol>\\n\\npragma solidity ^0.8.24;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to the proxy constructor\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1))\\n    bytes32 private constant _INITIALIZABLE_STORAGE =\\n        0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0e;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error AlreadyInitialized();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `initializer()`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n        if (!(isTopLevelCall && initialized < 1) && !(address(this).code.length == 0 && initialized == 1)) {\\n            revert AlreadyInitialized();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert AlreadyInitialized();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert AlreadyInitialized();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := _INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdad09e5f773fa6940dbd8c28480f602a7eaa3c70d3da9d06df140187cbf5dad4\",\"license\":\"MIT\"},\"src/proxy/UUPSProxiable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\n/// @title UUPS Proxiable\\n/// @author Simon Malatrait <simon.malatrait@grenoble-inp.org>\\n/// @notice This contract implements an upgradeability mechanism designed for UUPS proxies.\\n///\\n/// @dev Adapted from <https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.9.0/contracts/proxy/utils/UUPSUpgradeable.sol>\\n/// The functions included here can perform an upgrade of an UUPS Proxy, when this contract is set as the implementation behind such a proxy.\\n///\\n/// IMPORTANT: A UUPS proxy requires its upgradeability functions to be in the implementation as opposed to the transparent proxy.\\n/// This means that if the proxy is upgraded to an implementation that does not support this interface, it will no longer be upgradeable.\\n///\\n/// A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n/// reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n/// `UUPSProxiable` with a custom implementation of upgrades.\\n///\\n/// The `_authorizeUpgrade` function must be overridden to include access restriction to the upgrade mechanism.\\nabstract contract UUPSProxiable {\\n    // ************************************* //\\n    // *             Event                 * //\\n    // ************************************* //\\n\\n    /// @notice Emitted when the `implementation` has been successfully upgraded.\\n    /// @param newImplementation Address of the new implementation the proxy is now forwarding calls to.\\n    event Upgraded(address indexed newImplementation);\\n\\n    // ************************************* //\\n    // *             Error                 * //\\n    // ************************************* //\\n\\n    /// @notice The call is from an unauthorized context.\\n    error UUPSUnauthorizedCallContext();\\n\\n    /// @notice The storage `slot` is unsupported as a UUID.\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /// @notice The `implementation` is not UUPS-compliant\\n    error InvalidImplementation(address implementation);\\n\\n    /// Failed Delegated call\\n    error FailedDelegateCall();\\n\\n    // ************************************* //\\n    // *             Storage               * //\\n    // ************************************* //\\n\\n    /// @dev Storage slot with the address of the current implementation.\\n    /// @dev This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n    /// @dev validated in the constructor.\\n    /// @dev NOTE: bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1)\\n    bytes32 private constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /// @dev Storage variable of the proxiable contract address.\\n    /// @dev It is used to check whether or not the current call is from the proxy.\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    // ************************************* //\\n    // *             Governance            * //\\n    // ************************************* //\\n\\n    /// @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract.\\n    /// @dev Called by {upgradeToAndCall}.\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    // ************************************* //\\n    // *         State Modifiers           * //\\n    // ************************************* //\\n\\n    /// @notice Upgrade mechanism including access control and UUPS-compliance.\\n    /// @param newImplementation Address of the new implementation contract.\\n    /// @param data Data used in a delegate call to `newImplementation` if non-empty. This will typically be an encoded\\n    /// function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n    /// @dev Reverts if the execution is not performed via delegatecall or the execution\\n    /// context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual {\\n        _authorizeUpgrade(newImplementation);\\n\\n        // Check that the execution is being performed through a delegatecall call and that the execution context is\\n        // a proxy contract with an implementation (as defined in ERC1967) pointing to self.\\n        if (address(this) == __self || _getImplementation() != __self) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n\\n        try UUPSProxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            // Store the new implementation address to the implementation storage slot.\\n            assembly {\\n                sstore(IMPLEMENTATION_SLOT, newImplementation)\\n            }\\n            emit Upgraded(newImplementation);\\n\\n            if (data.length != 0) {\\n                // The return data is not checked (checking, in case of success, that the newImplementation code is non-empty if the return data is empty) because the authorized callee is trusted.\\n                /// @custom:oz-upgrades-unsafe-allow delegatecall\\n                (bool success, ) = newImplementation.delegatecall(data);\\n                if (!success) {\\n                    revert FailedDelegateCall();\\n                }\\n            }\\n        } catch {\\n            revert InvalidImplementation(newImplementation);\\n        }\\n    }\\n\\n    // ************************************* //\\n    // *           Public Views            * //\\n    // ************************************* //\\n\\n    /// @notice Implementation of the ERC1822 `proxiableUUID` function. This returns the storage slot used by the\\n    /// implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n    ///\\n    /// @dev IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n    /// bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n    /// function revert if invoked through a proxy. This is guaranteed by the if statement.\\n    function proxiableUUID() external view virtual returns (bytes32) {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n        return IMPLEMENTATION_SLOT;\\n    }\\n\\n    /// @notice Returns the version of the implementation.\\n    /// @return Version string.\\n    function version() external view virtual returns (string memory);\\n\\n    // ************************************* //\\n    // *           Internal Views          * //\\n    // ************************************* //\\n\\n    function _getImplementation() internal view returns (address implementation) {\\n        assembly {\\n            implementation := sload(IMPLEMENTATION_SLOT)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa369061748e8a7b02873d597d4c78a2a09328111f04a97428b1c209e82cf5414\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a080604052346100c157306080525f5160206109585f395f51905f525460ff8160401c166100b3576002600160401b03196001600160401b03821601610060575b60405161089290816100c6823960805181818161036a01526104430152f35b6001600160401b0319166001600160401b039081175f5160206109585f395f51905f525581527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a15f80610041565b62dc149f60e41b5f5260045ffd5b5f80fdfe6080806040526004361015610012575f80fd5b5f3560e01c9081633a283d7d14610762575080634a9941741461065a5780634f1ef286146103e257806352d1902d1461035057806354fd4d50146102ed5780638da5cb5b146102c8578063a6f9dae11461024b5763c4d66de814610074575f80fd5b346102475760203660031901126102475761008d610822565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0e5460ff8160401c16159167ffffffffffffffff8216838061023d575b15908161021f575b506101f75767ffffffffffffffff1982166001177ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0e556001600160a01b0391836101b8575b501673ffffffffffffffffffffffffffffffffffffffff195f5416175f5561013b57005b68ff0000000000000000197ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0e54167ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0e557fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2602060405160018152a1005b68ffffffffffffffffff191668010000000000000001177ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0e555f610117565b7f0dc149f0000000000000000000000000000000000000000000000000000000005f5260045ffd5b303b15915081610232575b50155f6100d2565b60019150145f61022a565b50600181106100ca565b5f80fd5b3461024757602036600319011261024757610264610822565b5f5490336001600160a01b038316036102a0576001600160a01b0373ffffffffffffffffffffffffffffffffffffffff1991169116175f555f80f35b7f596dcdb8000000000000000000000000000000000000000000000000000000005f5260045ffd5b34610247575f3660031901126102475760206001600160a01b035f5416604051908152f35b34610247575f3660031901126102475761034c60405161030e60408261077c565b600581527f322e302e300000000000000000000000000000000000000000000000000000006020820152604051918291602083526020830190610838565b0390f35b34610247575f366003190112610247576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036103ba5760206040517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152f35b7fe07c8dba000000000000000000000000000000000000000000000000000000005f5260045ffd5b6040366003190112610247576103f6610822565b60243567ffffffffffffffff81116102475736602382011215610247576104279036906024816004013591016107ce565b906001600160a01b035f541633036102a0576001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016803014908115610625575b506103ba576001600160a01b038116916040517f52d1902d000000000000000000000000000000000000000000000000000000008152602081600481875afa5f91816105f1575b506104e657837f0c760937000000000000000000000000000000000000000000000000000000005f5260045260245ffd5b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8592036105c65750827f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b5f80a280518061056057005b5f926020849301905af43d156105c1573d61057a816107b2565b90610588604051928361077c565b81525f60203d92013e5b1561059957005b7f736436ba000000000000000000000000000000000000000000000000000000005f5260045ffd5b610592565b7faa1d49a4000000000000000000000000000000000000000000000000000000005f5260045260245ffd5b9091506020813d60201161061d575b8161060d6020938361077c565b81010312610247575190856104b5565b3d9150610600565b90506001600160a01b037f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc541614158361046e565b346102475760603660031901126102475760043567ffffffffffffffff81116102475761068b903690600401610804565b60243567ffffffffffffffff8111610247576106ab903690600401610804565b9060443567ffffffffffffffff8111610247576106cc903690600401610804565b600154915f19831461074e577ef7cd7255d1073b4e136dd477c38ea0020c051ab17110cc5bfab0c840ff992461073660209561074387879560018701600155604051918183925191829101835e81015f815203902095604051938493604085526040850190610838565b908382038a850152610838565b0390a3604051908152f35b634e487b7160e01b5f52601160045260245ffd5b34610247575f366003190112610247576020906001548152f35b90601f8019910116810190811067ffffffffffffffff82111761079e57604052565b634e487b7160e01b5f52604160045260245ffd5b67ffffffffffffffff811161079e57601f01601f191660200190565b9291926107da826107b2565b916107e8604051938461077c565b829481845281830111610247578281602093845f960137010152565b9080601f830112156102475781602061081f933591016107ce565b90565b600435906001600160a01b038216820361024757565b805180835260209291819084018484015e5f828201840152601f01601f191601019056fea2646970667358221220bb75c0a527977368a7b8fd2e1e5a73e20d804eb35645fe757271a9acd08c759764736f6c634300081e0033f0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0e",
  "deployedBytecode": "0x6080806040526004361015610012575f80fd5b5f3560e01c9081633a283d7d14610762575080634a9941741461065a5780634f1ef286146103e257806352d1902d1461035057806354fd4d50146102ed5780638da5cb5b146102c8578063a6f9dae11461024b5763c4d66de814610074575f80fd5b346102475760203660031901126102475761008d610822565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0e5460ff8160401c16159167ffffffffffffffff8216838061023d575b15908161021f575b506101f75767ffffffffffffffff1982166001177ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0e556001600160a01b0391836101b8575b501673ffffffffffffffffffffffffffffffffffffffff195f5416175f5561013b57005b68ff0000000000000000197ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0e54167ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0e557fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2602060405160018152a1005b68ffffffffffffffffff191668010000000000000001177ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0e555f610117565b7f0dc149f0000000000000000000000000000000000000000000000000000000005f5260045ffd5b303b15915081610232575b50155f6100d2565b60019150145f61022a565b50600181106100ca565b5f80fd5b3461024757602036600319011261024757610264610822565b5f5490336001600160a01b038316036102a0576001600160a01b0373ffffffffffffffffffffffffffffffffffffffff1991169116175f555f80f35b7f596dcdb8000000000000000000000000000000000000000000000000000000005f5260045ffd5b34610247575f3660031901126102475760206001600160a01b035f5416604051908152f35b34610247575f3660031901126102475761034c60405161030e60408261077c565b600581527f322e302e300000000000000000000000000000000000000000000000000000006020820152604051918291602083526020830190610838565b0390f35b34610247575f366003190112610247576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036103ba5760206040517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152f35b7fe07c8dba000000000000000000000000000000000000000000000000000000005f5260045ffd5b6040366003190112610247576103f6610822565b60243567ffffffffffffffff81116102475736602382011215610247576104279036906024816004013591016107ce565b906001600160a01b035f541633036102a0576001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016803014908115610625575b506103ba576001600160a01b038116916040517f52d1902d000000000000000000000000000000000000000000000000000000008152602081600481875afa5f91816105f1575b506104e657837f0c760937000000000000000000000000000000000000000000000000000000005f5260045260245ffd5b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8592036105c65750827f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b5f80a280518061056057005b5f926020849301905af43d156105c1573d61057a816107b2565b90610588604051928361077c565b81525f60203d92013e5b1561059957005b7f736436ba000000000000000000000000000000000000000000000000000000005f5260045ffd5b610592565b7faa1d49a4000000000000000000000000000000000000000000000000000000005f5260045260245ffd5b9091506020813d60201161061d575b8161060d6020938361077c565b81010312610247575190856104b5565b3d9150610600565b90506001600160a01b037f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc541614158361046e565b346102475760603660031901126102475760043567ffffffffffffffff81116102475761068b903690600401610804565b60243567ffffffffffffffff8111610247576106ab903690600401610804565b9060443567ffffffffffffffff8111610247576106cc903690600401610804565b600154915f19831461074e577ef7cd7255d1073b4e136dd477c38ea0020c051ab17110cc5bfab0c840ff992461073660209561074387879560018701600155604051918183925191829101835e81015f815203902095604051938493604085526040850190610838565b908382038a850152610838565b0390a3604051908152f35b634e487b7160e01b5f52601160045260245ffd5b34610247575f366003190112610247576020906001548152f35b90601f8019910116810190811067ffffffffffffffff82111761079e57604052565b634e487b7160e01b5f52604160045260245ffd5b67ffffffffffffffff811161079e57601f01601f191660200190565b9291926107da826107b2565b916107e8604051938461077c565b829481845281830111610247578281602093845f960137010152565b9080601f830112156102475781602061081f933591016107ce565b90565b600435906001600160a01b038216820361024757565b805180835260209291819084018484015e5f828201840152601f01601f191601019056fea2646970667358221220bb75c0a527977368a7b8fd2e1e5a73e20d804eb35645fe757271a9acd08c759764736f6c634300081e0033",
  "devdoc": {
    "errors": {
      "AlreadyInitialized()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ]
    },
    "events": {
      "DisputeTemplate(uint256,string,string,string)": {
        "params": {
          "_templateData": "The template data.",
          "_templateDataMappings": "The data mappings.",
          "_templateId": "The identifier of the dispute template.",
          "_templateTag": "An optional tag for the dispute template, such as \"registration\" or \"removal\"."
        }
      },
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Upgraded(address)": {
        "params": {
          "newImplementation": "Address of the new implementation the proxy is now forwarding calls to."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "changeOwner(address)": {
        "params": {
          "_owner": "The new owner."
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "initialize(address)": {
        "params": {
          "_owner": "Owner of the contract."
        }
      },
      "proxiableUUID()": {
        "details": "IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the if statement."
      },
      "setDisputeTemplate(string,string,string)": {
        "params": {
          "_templateData": "The template data.",
          "_templateDataMappings": "The data mappings for the template.",
          "_templateTag": "An optional tag for the dispute template, such as \"registration\" or \"removal\"."
        },
        "returns": {
          "templateId": "The identifier of the dispute template."
        }
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Reverts if the execution is not performed via delegatecall or the execution context is not of a proxy with an ERC1967-compliant implementation pointing to self.",
        "params": {
          "data": "Data used in a delegate call to `newImplementation` if non-empty. This will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity constructor.",
          "newImplementation": "Address of the new implementation contract."
        }
      }
    },
    "stateVariables": {
      "version": {
        "return": "Version string.",
        "returns": {
          "_0": "Version string."
        }
      }
    },
    "title": "Dispute Template Registry",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "FailedDelegateCall()": [
        {
          "notice": "Failed Delegated call"
        }
      ],
      "InvalidImplementation(address)": [
        {
          "notice": "The `implementation` is not UUPS-compliant"
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "notice": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "notice": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "DisputeTemplate(uint256,string,string,string)": {
        "notice": "To be emitted when a new dispute template is created."
      },
      "Upgraded(address)": {
        "notice": "Emitted when the `implementation` has been successfully upgraded."
      }
    },
    "kind": "user",
    "methods": {
      "changeOwner(address)": {
        "notice": "Changes the owner of the contract."
      },
      "initialize(address)": {
        "notice": "Initializer"
      },
      "owner()": {
        "notice": "The owner of the contract."
      },
      "proxiableUUID()": {
        "notice": "Implementation of the ERC1822 `proxiableUUID` function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade."
      },
      "setDisputeTemplate(string,string,string)": {
        "notice": "Registers a new dispute template."
      },
      "templates()": {
        "notice": "The number of templates."
      },
      "upgradeToAndCall(address,bytes)": {
        "notice": "Upgrade mechanism including access control and UUPS-compliance."
      },
      "version()": {
        "notice": "Returns the version of the implementation."
      }
    },
    "notice": "A contract to maintain a registry of dispute templates.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11041,
        "contract": "src/arbitration/DisputeTemplateRegistry.sol:DisputeTemplateRegistry",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 11044,
        "contract": "src/arbitration/DisputeTemplateRegistry.sol:DisputeTemplateRegistry",
        "label": "templates",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
