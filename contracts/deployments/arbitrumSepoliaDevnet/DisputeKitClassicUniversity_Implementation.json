{
  "address": "0x602ADa1cE706404BFb5417e497cdDae934436081",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AppealFeeIsAlreadyPaid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AppealPeriodIsOver",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AppealPeriodIsOverForLoser",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ChoiceOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CoreIsPaused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DisputeJumpedToParentDK",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DisputeNotResolved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyCommit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyVoteIDs",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedDelegateCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "HashDoesNotMatchHiddenVoteCommitment",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "JurorHasToOwnTheVote",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "KlerosCoreOnly",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotActiveForCoreDisputeID",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotCommitPeriod",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotVotePeriod",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerOnly",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnsuccessfulCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VoteAlreadyCast",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_coreDisputeID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_coreRoundID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_choice",
          "type": "uint256"
        }
      ],
      "name": "ChoiceFunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_coreDisputeID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_juror",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_voteIDs",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_commit",
          "type": "bytes32"
        }
      ],
      "name": "CommitCast",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_coreDisputeID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_coreRoundID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_choice",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_contributor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Contribution",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_coreDisputeID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_numberOfChoices",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_extraData",
          "type": "bytes"
        }
      ],
      "name": "DisputeCreation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_coreDisputeID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_juror",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_voteIDs",
          "type": "uint256[]"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_choice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_justification",
          "type": "string"
        }
      ],
      "name": "VoteCast",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_coreDisputeID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_coreRoundID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_choice",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_contributor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "LOSER_APPEAL_PERIOD_MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LOSER_STAKE_MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WINNER_STAKE_MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_coreDisputeID",
          "type": "uint256"
        }
      ],
      "name": "areCommitsAllCast",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_coreDisputeID",
          "type": "uint256"
        }
      ],
      "name": "areVotesAllCast",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_coreDisputeID",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_voteIDs",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes32",
          "name": "_commit",
          "type": "bytes32"
        }
      ],
      "name": "castCommit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_coreDisputeID",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_voteIDs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_choice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salt",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_justification",
          "type": "string"
        }
      ],
      "name": "castVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_core",
          "type": "address"
        }
      ],
      "name": "changeCore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_jumpDisputeKitID",
          "type": "uint256"
        }
      ],
      "name": "changeJumpDisputeKitID",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "changeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "core",
      "outputs": [
        {
          "internalType": "contract KlerosCore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "coreDisputeID",
          "type": "uint256"
        }
      ],
      "name": "coreDisputeIDToActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "coreDisputeIDToLocal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_coreDisputeID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_numberOfChoices",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_extraData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "createDispute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_coreDisputeID",
          "type": "uint256"
        }
      ],
      "name": "currentRuling",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ruling",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "tied",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "overridden",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "disputes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "numberOfChoices",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "jumped",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_coreDisputeID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        }
      ],
      "name": "draw",
      "outputs": [
        {
          "internalType": "address",
          "name": "drawnAddress",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "fromSubcourtID",
          "type": "uint96"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "earlyCourtJump",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_destination",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "executeOwnerProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_coreDisputeID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_choice",
          "type": "uint256"
        }
      ],
      "name": "fundAppeal",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_coreDisputeID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_coreRoundID",
          "type": "uint256"
        }
      ],
      "name": "getCoherentCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_coreDisputeID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_coreRoundID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_voteID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getDegreeOfCoherencePenalty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pnkCoherence",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_coreDisputeID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_coreRoundID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_voteID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getDegreeOfCoherenceReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pnkCoherence",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "feeCoherence",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_coreDisputeID",
          "type": "uint256"
        }
      ],
      "name": "getFundedChoices",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "fundedChoices",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getJumpDisputeKitID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_coreDisputeID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_coreRoundID",
          "type": "uint256"
        }
      ],
      "name": "getLocalDisputeRoundID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "localDisputeID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "localRoundID",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IDisputeKit",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_currentNbVotes",
          "type": "uint256"
        }
      ],
      "name": "getNbVotesAfterAppeal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_localDisputeID",
          "type": "uint256"
        }
      ],
      "name": "getNumberOfRounds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_coreDisputeID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_coreRoundID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_choice",
          "type": "uint256"
        }
      ],
      "name": "getRoundInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "winningChoice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "tied",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "totalVoted",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalCommitted",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nbVoters",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "choiceCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_coreDisputeID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_coreRoundID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_voteID",
          "type": "uint256"
        }
      ],
      "name": "getVoteInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "commit",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "choice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "voted",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_choice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salt",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "hashVote",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "contract KlerosCore",
          "name": "_core",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wNative",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_jumpDisputeKitID",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_coreDisputeID",
          "type": "uint256"
        }
      ],
      "name": "isAppealFunded",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_coreDisputeID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_coreRoundID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_voteID",
          "type": "uint256"
        }
      ],
      "name": "isVoteActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "jumpDisputeKitID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "singleDrawPerJuror",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wNative",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_coreDisputeID",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_coreRoundID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_choice",
          "type": "uint256"
        }
      ],
      "name": "withdrawFeesAndRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x140fcdeaa468903f80081c238adf55c9e98ed99dfccc7d9c3e5f1b0fe90cf644",
  "receipt": {
    "to": null,
    "from": "0xf1C7c037891525E360C59f708739Ac09A7670c59",
    "contractAddress": "0x602ADa1cE706404BFb5417e497cdDae934436081",
    "transactionIndex": 2,
    "gasUsed": "2891480",
    "logsBloom": "0x
    "blockHash": "0xa1d507b667521779bef446125f900ce13bca11861cf05645709556422aad0f04",
    "transactionHash": "0x140fcdeaa468903f80081c238adf55c9e98ed99dfccc7d9c3e5f1b0fe90cf644",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 193533768,
        "transactionHash": "0x140fcdeaa468903f80081c238adf55c9e98ed99dfccc7d9c3e5f1b0fe90cf644",
        "address": "0x602ADa1cE706404BFb5417e497cdDae934436081",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 1,
        "blockHash": "0xa1d507b667521779bef446125f900ce13bca11861cf05645709556422aad0f04"
      }
    ],
    "blockNumber": 193533768,
    "cumulativeGasUsed": "3568712",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d547d738900bce1310e91a5d1adfc179",
  "metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AppealFeeIsAlreadyPaid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AppealPeriodIsOver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AppealPeriodIsOverForLoser\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ChoiceOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CoreIsPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeJumpedToParentDK\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeNotResolved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyCommit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyVoteIDs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedDelegateCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HashDoesNotMatchHiddenVoteCommitment\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"JurorHasToOwnTheVote\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"KlerosCoreOnly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotActiveForCoreDisputeID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotCommitPeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotVotePeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerOnly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsuccessfulCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VoteAlreadyCast\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_coreDisputeID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_coreRoundID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_choice\",\"type\":\"uint256\"}],\"name\":\"ChoiceFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_coreDisputeID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_juror\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_voteIDs\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_commit\",\"type\":\"bytes32\"}],\"name\":\"CommitCast\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_coreDisputeID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_coreRoundID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_choice\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Contribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_coreDisputeID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_numberOfChoices\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"DisputeCreation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_coreDisputeID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_juror\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_voteIDs\",\"type\":\"uint256[]\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_choice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_justification\",\"type\":\"string\"}],\"name\":\"VoteCast\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_coreDisputeID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_coreRoundID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_choice\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LOSER_APPEAL_PERIOD_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOSER_STAKE_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WINNER_STAKE_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coreDisputeID\",\"type\":\"uint256\"}],\"name\":\"areCommitsAllCast\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coreDisputeID\",\"type\":\"uint256\"}],\"name\":\"areVotesAllCast\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coreDisputeID\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_voteIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32\",\"name\":\"_commit\",\"type\":\"bytes32\"}],\"name\":\"castCommit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coreDisputeID\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_voteIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_choice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salt\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_justification\",\"type\":\"string\"}],\"name\":\"castVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_core\",\"type\":\"address\"}],\"name\":\"changeCore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_jumpDisputeKitID\",\"type\":\"uint256\"}],\"name\":\"changeJumpDisputeKitID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"core\",\"outputs\":[{\"internalType\":\"contract KlerosCore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"coreDisputeID\",\"type\":\"uint256\"}],\"name\":\"coreDisputeIDToActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"coreDisputeIDToLocal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coreDisputeID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numberOfChoices\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"createDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coreDisputeID\",\"type\":\"uint256\"}],\"name\":\"currentRuling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ruling\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"tied\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"overridden\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"disputes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfChoices\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"jumped\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coreDisputeID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"draw\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"drawnAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"fromSubcourtID\",\"type\":\"uint96\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"earlyCourtJump\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"executeOwnerProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coreDisputeID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_choice\",\"type\":\"uint256\"}],\"name\":\"fundAppeal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coreDisputeID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_coreRoundID\",\"type\":\"uint256\"}],\"name\":\"getCoherentCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coreDisputeID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_coreRoundID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_voteID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getDegreeOfCoherencePenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pnkCoherence\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coreDisputeID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_coreRoundID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_voteID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getDegreeOfCoherenceReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pnkCoherence\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeCoherence\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coreDisputeID\",\"type\":\"uint256\"}],\"name\":\"getFundedChoices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"fundedChoices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getJumpDisputeKitID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coreDisputeID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_coreRoundID\",\"type\":\"uint256\"}],\"name\":\"getLocalDisputeRoundID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"localDisputeID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"localRoundID\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDisputeKit\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_currentNbVotes\",\"type\":\"uint256\"}],\"name\":\"getNbVotesAfterAppeal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_localDisputeID\",\"type\":\"uint256\"}],\"name\":\"getNumberOfRounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coreDisputeID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_coreRoundID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_choice\",\"type\":\"uint256\"}],\"name\":\"getRoundInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"winningChoice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"tied\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalVoted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCommitted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nbVoters\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"choiceCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coreDisputeID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_coreRoundID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_voteID\",\"type\":\"uint256\"}],\"name\":\"getVoteInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"commit\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"choice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"voted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_choice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salt\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"hashVote\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"contract KlerosCore\",\"name\":\"_core\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wNative\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_jumpDisputeKitID\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coreDisputeID\",\"type\":\"uint256\"}],\"name\":\"isAppealFunded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coreDisputeID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_coreRoundID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_voteID\",\"type\":\"uint256\"}],\"name\":\"isVoteActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jumpDisputeKitID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"singleDrawPerJuror\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wNative\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coreDisputeID\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_coreRoundID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_choice\",\"type\":\"uint256\"}],\"name\":\"withdrawFeesAndRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AlreadyInitialized()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"ChoiceFunded(uint256,uint256,uint256)\":{\"params\":{\"_choice\":\"The choice that is being funded.\",\"_coreDisputeID\":\"The identifier of the dispute in the Arbitrator contract.\",\"_coreRoundID\":\"The identifier of the round in the Arbitrator contract.\"}},\"CommitCast(uint256,address,uint256[],bytes32)\":{\"params\":{\"_commit\":\"The commitment of the juror.\",\"_coreDisputeID\":\"The identifier of the dispute in the Arbitrator contract.\",\"_juror\":\"The address of the juror casting the vote commitment.\",\"_voteIDs\":\"The identifiers of the votes in the dispute.\"}},\"Contribution(uint256,uint256,uint256,address,uint256)\":{\"params\":{\"_amount\":\"The amount contributed.\",\"_choice\":\"The choice that is being funded.\",\"_contributor\":\"The address of the contributor.\",\"_coreDisputeID\":\"The identifier of the dispute in the Arbitrator contract.\",\"_coreRoundID\":\"The identifier of the round in the Arbitrator contract.\"}},\"DisputeCreation(uint256,uint256,bytes)\":{\"params\":{\"_coreDisputeID\":\"The identifier of the dispute in the Arbitrator contract.\",\"_extraData\":\"The extra data for the dispute.\",\"_numberOfChoices\":\"The number of choices available in the dispute.\"}},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"params\":{\"newImplementation\":\"Address of the new implementation the proxy is now forwarding calls to.\"}},\"VoteCast(uint256,address,uint256[],uint256,string)\":{\"params\":{\"_choice\":\"The choice juror voted for.\",\"_coreDisputeID\":\"The identifier of the dispute in the Arbitrator contract.\",\"_juror\":\"Address of the juror.\",\"_justification\":\"Justification of the choice.\",\"_voteIDs\":\"The identifiers of the votes in the dispute.\"}},\"Withdrawal(uint256,uint256,uint256,address,uint256)\":{\"params\":{\"_amount\":\"The amount withdrawn.\",\"_choice\":\"The choice that is being funded.\",\"_contributor\":\"The address of the contributor.\",\"_coreDisputeID\":\"The identifier of the dispute in the Arbitrator contract.\",\"_coreRoundID\":\"The identifier of the round in the Arbitrator contract.\"}}},\"kind\":\"dev\",\"methods\":{\"areCommitsAllCast(uint256)\":{\"params\":{\"_coreDisputeID\":\"The ID of the dispute in Kleros Core, not in the Dispute Kit.\"},\"returns\":{\"_0\":\"Whether all of the jurors have cast their commits for the last round.\"}},\"areVotesAllCast(uint256)\":{\"details\":\"This function is to be called directly by the core contract and is not for off-chain usage.\",\"params\":{\"_coreDisputeID\":\"The ID of the dispute in Kleros Core, not in the Dispute Kit.\"},\"returns\":{\"_0\":\"Whether all of the jurors have cast their votes for the last round.\"}},\"castCommit(uint256,uint256[],bytes32)\":{\"details\":\"It can be called multiple times during the commit period, each call overrides the commits of the previous one. `O(n)` where `n` is the number of votes.\",\"params\":{\"_commit\":\"The commitment hash.\",\"_coreDisputeID\":\"The ID of the dispute in Kleros Core.\",\"_voteIDs\":\"The IDs of the votes.\"}},\"castVote(uint256,uint256[],uint256,uint256,string)\":{\"details\":\"`O(n)` where `n` is the number of votes.\",\"params\":{\"_choice\":\"The choice.\",\"_coreDisputeID\":\"The ID of the dispute in Kleros Core.\",\"_justification\":\"Justification of the choice.\",\"_salt\":\"The salt for the commit if the votes were hidden.\",\"_voteIDs\":\"The IDs of the votes.\"}},\"changeCore(address)\":{\"params\":{\"_core\":\"The new value for the `core` storage variable.\"}},\"changeJumpDisputeKitID(uint256)\":{\"params\":{\"_jumpDisputeKitID\":\"The new value for the `jumpDisputeKitID` storage variable.\"}},\"changeOwner(address)\":{\"params\":{\"_owner\":\"The new value for the `owner` storage variable.\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"createDispute(uint256,uint256,bytes,uint256)\":{\"details\":\"Access restricted to Kleros Core only.\",\"params\":{\"_coreDisputeID\":\"The ID of the dispute in Kleros Core, not in the Dispute Kit.\",\"_extraData\":\"Additional info about the dispute, for possible use in future dispute kits.\",\"_nbVotes\":\"Maximal number of votes this dispute can get. Added for future-proofing.\",\"_numberOfChoices\":\"Number of choices of the dispute\"}},\"currentRuling(uint256)\":{\"params\":{\"_coreDisputeID\":\"The ID of the dispute in Kleros Core, not in the Dispute Kit.\"},\"returns\":{\"overridden\":\"Whether the ruling was overridden by appeal funding or not.\",\"ruling\":\"The current ruling.\",\"tied\":\"Whether it's a tie or not.\"}},\"draw(uint256,uint256)\":{\"details\":\"Access restricted to Kleros Core only.\",\"params\":{\"_coreDisputeID\":\"The ID of the dispute in Kleros Core, not in the Dispute Kit.\",\"_nonce\":\"Nonce.\"},\"returns\":{\"drawnAddress\":\"The drawn address.\"}},\"earlyCourtJump(uint256)\":{\"details\":\"Returns true if the dispute is jumping to a parent court.\",\"params\":{\"_coreDisputeID\":\"The ID of the dispute in Kleros Core, not in the Dispute Kit.\"},\"returns\":{\"_0\":\"Whether the dispute is jumping to a parent court or not.\"}},\"executeOwnerProposal(address,uint256,bytes)\":{\"params\":{\"_amount\":\"The value sent with the call.\",\"_data\":\"The data sent with the call.\",\"_destination\":\"The destination of the call.\"}},\"fundAppeal(uint256,uint256)\":{\"params\":{\"_choice\":\"A choice that receives funding.\",\"_coreDisputeID\":\"Index of the dispute in Kleros Core.\"}},\"getCoherentCount(uint256,uint256)\":{\"params\":{\"_coreDisputeID\":\"The ID of the dispute in Kleros Core, not in the Dispute Kit.\",\"_coreRoundID\":\"The ID of the round in Kleros Core, not in the Dispute Kit.\"},\"returns\":{\"_0\":\"The number of coherent jurors.\"}},\"getDegreeOfCoherencePenalty(uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"This function is called by Kleros Core in order to determine the amount of the penalty.\",\"params\":{\"_coreDisputeID\":\"The ID of the dispute in Kleros Core, not in the Dispute Kit.\",\"_coreRoundID\":\"The ID of the round in Kleros Core, not in the Dispute Kit.\",\"_feePerJuror\":\"The fee per juror.\",\"_pnkAtStakePerJuror\":\"The PNK at stake per juror.\",\"_voteID\":\"The ID of the vote.\"},\"returns\":{\"pnkCoherence\":\"The degree of coherence in basis points for the dispute PNK reward.\"}},\"getDegreeOfCoherenceReward(uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"This function is called by Kleros Core in order to determine the amount of the reward.\",\"params\":{\"_coreDisputeID\":\"The ID of the dispute in Kleros Core, not in the Dispute Kit.\",\"_coreRoundID\":\"The ID of the round in Kleros Core, not in the Dispute Kit.\",\"_feePerJuror\":\"The fee per juror.\",\"_pnkAtStakePerJuror\":\"The PNK at stake per juror.\",\"_voteID\":\"The ID of the vote.\"},\"returns\":{\"feeCoherence\":\"The degree of coherence in basis points for the dispute fee reward.\",\"pnkCoherence\":\"The degree of coherence in basis points for the dispute PNK reward.\"}},\"getFundedChoices(uint256)\":{\"params\":{\"_coreDisputeID\":\"The ID of the dispute in Kleros Core.\"},\"returns\":{\"fundedChoices\":\"Fully funded rulings.\"}},\"getJumpDisputeKitID()\":{\"returns\":{\"_0\":\"The ID of the dispute kit in Kleros Core disputeKits array.\"}},\"getLocalDisputeRoundID(uint256,uint256)\":{\"params\":{\"_coreDisputeID\":\"The ID of the dispute in Kleros Core.\",\"_coreRoundID\":\"The ID of the round in Kleros Core.\"},\"returns\":{\"localDisputeID\":\"The ID of the dispute in the Dispute Kit.\",\"localRoundID\":\"The ID of the round in the Dispute Kit.\"}},\"getNbVotesAfterAppeal(address,uint256)\":{\"params\":{\"_currentNbVotes\":\"The number of votes before the appeal.\",\"_previousDisputeKit\":\"The previous Dispute Kit.\"},\"returns\":{\"_0\":\"The number of votes after the appeal.\"}},\"getNumberOfRounds(uint256)\":{\"params\":{\"_localDisputeID\":\"The ID of the dispute in the Dispute Kit.\"},\"returns\":{\"_0\":\"The number of rounds in the dispute.\"}},\"getRoundInfo(uint256,uint256,uint256)\":{\"params\":{\"_choice\":\"The choice to query.\",\"_coreDisputeID\":\"The ID of the dispute in Kleros Core, not in the Dispute Kit.\",\"_coreRoundID\":\"The ID of the round in Kleros Core, not in the Dispute Kit.\"},\"returns\":{\"choiceCount\":\"Number of votes cast for the queried choice.\",\"nbVoters\":\"Total number of voters in this round.\",\"tied\":\"Whether it's a tie or not.\",\"totalCommitted\":\"Number of jurors who cast the commit already (only relevant for hidden votes).\",\"totalVoted\":\"Number of jurors who cast the vote already.\",\"winningChoice\":\"The winning choice of this round.\"}},\"getVoteInfo(uint256,uint256,uint256)\":{\"params\":{\"_coreDisputeID\":\"The ID of the dispute in Kleros Core.\",\"_coreRoundID\":\"The ID of the round in Kleros Core.\",\"_voteID\":\"The ID of the vote.\"},\"returns\":{\"account\":\"The address of the juror who cast the vote.\",\"choice\":\"The choice that got the vote.\",\"commit\":\"The commit of the vote.\",\"voted\":\"Whether the vote was cast or not.\"}},\"hashVote(uint256,uint256,string)\":{\"details\":\"The unused parameters may be used by overriding contracts.\",\"params\":{\"_choice\":\"The choice being voted for\",\"_salt\":\"A random salt for commitment\"},\"returns\":{\"_0\":\"bytes32 The hash of the encoded vote parameters\"}},\"initialize(address,address,address,uint256)\":{\"params\":{\"_core\":\"The KlerosCore arbitrator.\",\"_jumpDisputeKitID\":\"The ID of the dispute kit to switch to after the court jump.\",\"_owner\":\"The owner's address.\",\"_wNative\":\"The wrapped native token address, typically wETH.\"}},\"isAppealFunded(uint256)\":{\"details\":\"This function is to be called directly by the core contract and is not for off-chain usage.\",\"params\":{\"_coreDisputeID\":\"The ID of the dispute in Kleros Core, not in the Dispute Kit.\"},\"returns\":{\"_0\":\"Whether the appeal funding is finished.\"}},\"isVoteActive(uint256,uint256,uint256)\":{\"params\":{\"_coreDisputeID\":\"The ID of the dispute in Kleros Core, not in the Dispute Kit.\",\"_coreRoundID\":\"The ID of the round in Kleros Core, not in the Dispute Kit.\",\"_voteID\":\"The ID of the voter.\"},\"returns\":{\"_0\":\"Whether the voter was active or not.\"}},\"proxiableUUID()\":{\"details\":\"IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the if statement.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Reverts if the execution is not performed via delegatecall or the execution context is not of a proxy with an ERC1967-compliant implementation pointing to self.\",\"params\":{\"data\":\"Data used in a delegate call to `newImplementation` if non-empty. This will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity constructor.\",\"newImplementation\":\"Address of the new implementation contract.\"}},\"withdrawFeesAndRewards(uint256,address,uint256,uint256)\":{\"details\":\"Withdrawals are not possible if the core contract is paused.\",\"params\":{\"_beneficiary\":\"The address whose rewards to withdraw.\",\"_choice\":\"The ruling option that the caller wants to withdraw from.\",\"_coreDisputeID\":\"Index of the dispute in Kleros Core contract.\",\"_coreRoundID\":\"The round in the Kleros Core contract the caller wants to withdraw from.\"},\"returns\":{\"amount\":\"The withdrawn amount.\"}}},\"stateVariables\":{\"version\":{\"return\":\"Version string.\",\"returns\":{\"_0\":\"Version string.\"}}},\"title\":\"DisputeKitClassic\",\"version\":1},\"userdoc\":{\"errors\":{\"FailedDelegateCall()\":[{\"notice\":\"Failed Delegated call\"}],\"InvalidImplementation(address)\":[{\"notice\":\"The `implementation` is not UUPS-compliant\"}],\"UUPSUnauthorizedCallContext()\":[{\"notice\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"notice\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"ChoiceFunded(uint256,uint256,uint256)\":{\"notice\":\"To be emitted when a choice is fully funded for an appeal.\"},\"CommitCast(uint256,address,uint256[],bytes32)\":{\"notice\":\"To be emitted when a vote commitment is cast.\"},\"Contribution(uint256,uint256,uint256,address,uint256)\":{\"notice\":\"To be emitted when a funding contribution is made.\"},\"DisputeCreation(uint256,uint256,bytes)\":{\"notice\":\"To be emitted when a dispute is created.\"},\"Upgraded(address)\":{\"notice\":\"Emitted when the `implementation` has been successfully upgraded.\"},\"VoteCast(uint256,address,uint256[],uint256,string)\":{\"notice\":\"Emitted when casting a vote to provide the justification of juror's choice.\"},\"Withdrawal(uint256,uint256,uint256,address,uint256)\":{\"notice\":\"To be emitted when the contributed funds are withdrawn.\"}},\"kind\":\"user\",\"methods\":{\"areCommitsAllCast(uint256)\":{\"notice\":\"Returns true if all of the jurors have cast their commits for the last round.\"},\"areVotesAllCast(uint256)\":{\"notice\":\"Returns true if all of the jurors have cast their votes for the last round.\"},\"castCommit(uint256,uint256[],bytes32)\":{\"notice\":\"Sets the caller's commit for the specified votes.\"},\"castVote(uint256,uint256[],uint256,uint256,string)\":{\"notice\":\"Sets the caller's choices for the specified votes.\"},\"changeCore(address)\":{\"notice\":\"Changes the `core` storage variable.\"},\"changeJumpDisputeKitID(uint256)\":{\"notice\":\"Changes the dispute kit ID used for the jump.\"},\"changeOwner(address)\":{\"notice\":\"Changes the `owner` storage variable.\"},\"createDispute(uint256,uint256,bytes,uint256)\":{\"notice\":\"Creates a local dispute and maps it to the dispute ID in the Core contract.\"},\"currentRuling(uint256)\":{\"notice\":\"Gets the current ruling of a specified dispute.\"},\"draw(uint256,uint256)\":{\"notice\":\"Draws the juror from the sortition tree. The drawn address is picked up by Kleros Core.\"},\"executeOwnerProposal(address,uint256,bytes)\":{\"notice\":\"Allows the owner to call anything on behalf of the contract.\"},\"fundAppeal(uint256,uint256)\":{\"notice\":\"Manages contributions, and appeals a dispute if at least two choices are fully funded. Note that the surplus deposit will be reimbursed.\"},\"getCoherentCount(uint256,uint256)\":{\"notice\":\"Gets the number of jurors who are eligible to a reward in this round.\"},\"getDegreeOfCoherencePenalty(uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Gets the degree of coherence of a particular voter.\"},\"getDegreeOfCoherenceReward(uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Gets the degree of coherence of a particular voter.\"},\"getFundedChoices(uint256)\":{\"notice\":\"Returns the rulings that were fully funded in the latest appeal round.\"},\"getJumpDisputeKitID()\":{\"notice\":\"Returns the dispute kit ID to be used after court jump by Kleros Core.\"},\"getLocalDisputeRoundID(uint256,uint256)\":{\"notice\":\"Returns the local dispute ID and round ID for a given core dispute ID and core round ID.\"},\"getNbVotesAfterAppeal(address,uint256)\":{\"notice\":\"Returns the number of votes after the appeal.\"},\"getNumberOfRounds(uint256)\":{\"notice\":\"Returns the number of rounds in a dispute.\"},\"getRoundInfo(uint256,uint256,uint256)\":{\"notice\":\"Returns the info of the specified round in the core contract.\"},\"getVoteInfo(uint256,uint256,uint256)\":{\"notice\":\"Returns the vote information for a given vote ID.\"},\"hashVote(uint256,uint256,string)\":{\"notice\":\"Computes the hash of a vote using ABI encoding\"},\"initialize(address,address,address,uint256)\":{\"notice\":\"Initializer.\"},\"isAppealFunded(uint256)\":{\"notice\":\"Returns true if the appeal funding is finished prematurely (e.g. when losing side didn't fund).\"},\"isVoteActive(uint256,uint256,uint256)\":{\"notice\":\"Returns true if the specified voter was active in this round.\"},\"proxiableUUID()\":{\"notice\":\"Implementation of the ERC1822 `proxiableUUID` function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade.\"},\"upgradeToAndCall(address,bytes)\":{\"notice\":\"Upgrade mechanism including access control and UUPS-compliance.\"},\"version()\":{\"notice\":\"Returns the version of the implementation.\"},\"withdrawFeesAndRewards(uint256,address,uint256,uint256)\":{\"notice\":\"Allows those contributors who attempted to fund an appeal round to withdraw any reimbursable fees or rewards after the dispute gets resolved.\"}},\"notice\":\"Dispute kit implementation of the Kleros v1 features including: - a drawing system: proportional to staked PNK, - a vote aggregation system: plurality, - an incentive system: equal split between coherent votes, - an appeal system: fund 2 choices only, vote on any choice.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/arbitration/dispute-kits/DisputeKitClassic.sol\":\"DisputeKitClassic\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf78f05f3b8c9f75570e85300d7b4600d7f6f6a198449273f31d44c1641adb46f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\"},\"src/arbitration/KlerosCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport {IArbitrableV2, IArbitratorV2} from \\\"./interfaces/IArbitratorV2.sol\\\";\\nimport {IDisputeKit} from \\\"./interfaces/IDisputeKit.sol\\\";\\nimport {ISortitionModule} from \\\"./interfaces/ISortitionModule.sol\\\";\\nimport {Initializable} from \\\"../proxy/Initializable.sol\\\";\\nimport {UUPSProxiable} from \\\"../proxy/UUPSProxiable.sol\\\";\\nimport {SafeERC20, IERC20} from \\\"../libraries/SafeERC20.sol\\\";\\nimport {SafeSend} from \\\"../libraries/SafeSend.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"../libraries/Constants.sol\\\";\\n\\n/// @title KlerosCore\\n/// @notice Core arbitrator contract for Kleros v2.\\n/// @dev This contract trusts the PNK token, the dispute kits and the sortition module contracts.\\ncontract KlerosCore is IArbitratorV2, Initializable, UUPSProxiable {\\n    using SafeERC20 for IERC20;\\n    using SafeSend for address payable;\\n\\n    string public constant override version = \\\"2.0.0\\\";\\n\\n    // ************************************* //\\n    // *         Enums / Structs           * //\\n    // ************************************* //\\n\\n    enum Period {\\n        evidence, // Evidence can be submitted. This is also when drawing has to take place.\\n        commit, // Jurors commit a hashed vote. This is skipped for courts without hidden votes.\\n        vote, // Jurors reveal/cast their vote depending on whether the court has hidden votes or not.\\n        appeal, // The dispute can be appealed.\\n        execution // Tokens are redistributed and the ruling is executed.\\n    }\\n\\n    struct Court {\\n        uint96 parent; // The parent court.\\n        bool hiddenVotes; // Whether to use commit and reveal or not.\\n        uint256[] children; // List of child courts.\\n        uint256 minStake; // Minimum PNKs needed to stake in the court.\\n        uint256 alpha; // Basis point of PNKs that are lost when incoherent.\\n        uint256 feeForJuror; // Arbitration fee paid per juror.\\n        uint256 jurorsForCourtJump; // The appeal after the one that reaches this number of jurors will go to the parent court if any.\\n        uint256[4] timesPerPeriod; // The time allotted to each dispute period in the form `timesPerPeriod[period]`.\\n        mapping(uint256 disputeKitId => bool) supportedDisputeKits; // True if DK with this ID is supported by the court. Note that each court must support classic dispute kit.\\n        uint256[10] __gap; // Reserved slots for future upgrades.\\n    }\\n\\n    struct Dispute {\\n        uint96 courtID; // The ID of the court the dispute is in.\\n        IArbitrableV2 arbitrated; // The arbitrable contract.\\n        Period period; // The current period of the dispute.\\n        bool ruled; // True if the ruling has been executed, false otherwise.\\n        uint256 lastPeriodChange; // The last time the period was changed.\\n        Round[] rounds; // Rounds of the dispute.\\n        uint256[10] __gap; // Reserved slots for future upgrades.\\n    }\\n\\n    struct Round {\\n        uint256 disputeKitID; // Index of the dispute kit in the array.\\n        uint256 pnkAtStakePerJuror; // The amount of PNKs at stake for each juror in this round.\\n        uint256 totalFeesForJurors; // The total juror fees paid in this round.\\n        uint256 nbVotes; // The total number of votes the dispute can possibly have in the current round. Former votes[_round].length.\\n        uint256 repartitions; // A counter of reward repartitions made in this round.\\n        uint256 pnkPenalties; // The amount of PNKs collected from penalties in this round.\\n        address[] drawnJurors; // Addresses of the jurors that were drawn in this round.\\n        uint96[] drawnJurorFromCourtIDs; // The courtIDs where the juror was drawn from, possibly their stake in a subcourt.\\n        uint256 sumFeeRewardPaid; // Total sum of arbitration fees paid to coherent jurors as a reward in this round.\\n        uint256 sumPnkRewardPaid; // Total sum of PNK paid to coherent jurors as a reward in this round.\\n        IERC20 feeToken; // The token used for paying fees in this round.\\n        uint256 drawIterations; // The number of iterations passed drawing the jurors for this round.\\n        uint256[10] __gap; // Reserved slots for future upgrades.\\n    }\\n\\n    // Workaround \\\"stack too deep\\\" errors\\n    struct ExecuteParams {\\n        uint256 disputeID; // The ID of the dispute to execute.\\n        uint256 round; // The round to execute.\\n        uint256 coherentCount; // The number of coherent votes in the round.\\n        uint256 numberOfVotesInRound; // The number of votes in the round.\\n        uint256 feePerJurorInRound; // The fee per juror in the round.\\n        uint256 pnkAtStakePerJurorInRound; // The amount of PNKs at stake for each juror in the round.\\n        uint256 pnkPenaltiesInRound; // The amount of PNKs collected from penalties in the round.\\n        uint256 repartition; // The index of the repartition to execute.\\n    }\\n\\n    struct CurrencyRate {\\n        bool feePaymentAccepted; // True if this token is supported as payment method.\\n        uint64 rateInEth; // Rate of the fee token in ETH.\\n        uint8 rateDecimals; // Decimals of the fee token rate.\\n    }\\n\\n    // ************************************* //\\n    // *             Storage               * //\\n    // ************************************* //\\n\\n    uint256 private constant NON_PAYABLE_AMOUNT = (2 ** 256 - 2) / 2; // An amount higher than the supply of ETH.\\n\\n    address public owner; // The owner of the contract.\\n    address public guardian; // The guardian able to pause asset withdrawals.\\n    IERC20 public pinakion; // The Pinakion token contract.\\n    address public jurorProsecutionModule; // The module for juror's prosecution.\\n    ISortitionModule public sortitionModule; // Sortition module for drawing.\\n    Court[] public courts; // The courts.\\n    IDisputeKit[] public disputeKits; // Array of dispute kits.\\n    Dispute[] public disputes; // The disputes.\\n    mapping(IERC20 => CurrencyRate) public currencyRates; // The price of each token in ETH.\\n    bool public paused; // Whether asset withdrawals are paused.\\n    address public wNative; // The wrapped native token for safeSend().\\n    mapping(address => bool) public arbitrableWhitelist; // Arbitrable whitelist.\\n    bool public arbitrableWhitelistEnabled; // Whether the arbitrable whitelist is enabled.\\n    IERC721 public jurorNft; // Eligible jurors NFT.\\n\\n    // ************************************* //\\n    // *              Events               * //\\n    // ************************************* //\\n\\n    /// @notice Emitted when period is passed.\\n    /// @param _disputeID ID of the related dispute.\\n    /// @param _period The new period.\\n    event NewPeriod(uint256 indexed _disputeID, Period _period);\\n\\n    /// @notice Emitted when appeal period starts.\\n    /// @param _disputeID ID of the related dispute.\\n    /// @param _arbitrable The arbitrable contract.\\n    event AppealPossible(uint256 indexed _disputeID, IArbitrableV2 indexed _arbitrable);\\n\\n    /// @notice Emitted when the dispute is successfully appealed.\\n    /// @param _disputeID ID of the related dispute.\\n    /// @param _arbitrable The arbitrable contract.\\n    event AppealDecision(uint256 indexed _disputeID, IArbitrableV2 indexed _arbitrable);\\n\\n    /// @notice Emitted when an address is successfully drawn.\\n    /// @param _address The drawn address.\\n    /// @param _disputeID ID of the related dispute.\\n    /// @param _roundID ID of the related round.\\n    /// @param _voteID ID of the vote given to the drawn juror.\\n    event Draw(address indexed _address, uint256 indexed _disputeID, uint256 _roundID, uint256 _voteID);\\n\\n    /// @notice Emitted when a new court is created.\\n    /// @param _courtID ID of the new court.\\n    /// @param _parent ID of the parent court.\\n    /// @param _hiddenVotes Whether the court has hidden votes or not.\\n    /// @param _minStake The `minStake` property value of the court.\\n    /// @param _alpha The `alpha` property value of the court.\\n    /// @param _feeForJuror The `feeForJuror` property value of the court.\\n    /// @param _jurorsForCourtJump The `jurorsForCourtJump` property value of the court.\\n    /// @param _timesPerPeriod The `timesPerPeriod` property value of the court.\\n    /// @param _supportedDisputeKits Indexes of dispute kits that this court will support.\\n    event CourtCreated(\\n        uint96 indexed _courtID,\\n        uint96 indexed _parent,\\n        bool _hiddenVotes,\\n        uint256 _minStake,\\n        uint256 _alpha,\\n        uint256 _feeForJuror,\\n        uint256 _jurorsForCourtJump,\\n        uint256[4] _timesPerPeriod,\\n        uint256[] _supportedDisputeKits\\n    );\\n\\n    /// @notice Emitted when court's parameters are changed.\\n    /// @param _courtID ID of the court.\\n    /// @param _hiddenVotes Whether the court has hidden votes or not.\\n    /// @param _minStake The `minStake` property value of the court.\\n    /// @param _alpha The `alpha` property value of the court.\\n    /// @param _feeForJuror The `feeForJuror` property value of the court.\\n    /// @param _jurorsForCourtJump The `jurorsForCourtJump` property value of the court.\\n    /// @param _timesPerPeriod The `timesPerPeriod` property value of the court.\\n    event CourtModified(\\n        uint96 indexed _courtID,\\n        bool _hiddenVotes,\\n        uint256 _minStake,\\n        uint256 _alpha,\\n        uint256 _feeForJuror,\\n        uint256 _jurorsForCourtJump,\\n        uint256[4] _timesPerPeriod\\n    );\\n\\n    /// @notice Emitted when a dispute kit is created.\\n    /// @param _disputeKitID ID of the new dispute kit.\\n    /// @param _disputeKitAddress Address of the new dispute kit.\\n    event DisputeKitCreated(uint256 indexed _disputeKitID, IDisputeKit indexed _disputeKitAddress);\\n\\n    /// @notice Emitted when a dispute kit is enabled/disabled in a court.\\n    /// @param _courtID ID of the related court.\\n    /// @param _disputeKitID ID of the dispute kit.\\n    /// @param _enable Whether the dispute kit has been enabled or disabled.\\n    event DisputeKitEnabled(uint96 indexed _courtID, uint256 indexed _disputeKitID, bool indexed _enable);\\n\\n    /// @notice Emitted when a dispute jumps to a new court.\\n    /// @param _disputeID ID of the dispute.\\n    /// @param _roundID ID of the round.\\n    /// @param _fromCourtID ID of the previous court.\\n    /// @param _toCourtID ID of the new court.\\n    event CourtJump(\\n        uint256 indexed _disputeID,\\n        uint256 indexed _roundID,\\n        uint96 indexed _fromCourtID,\\n        uint96 _toCourtID\\n    );\\n\\n    /// @notice Emitted when a dispute jumps to a new dispute kit.\\n    /// @param _disputeID ID of the dispute.\\n    /// @param _roundID ID of the round.\\n    /// @param _fromDisputeKitID ID of the previous dispute kit.\\n    /// @param _toDisputeKitID ID of the new dispute kit.\\n    event DisputeKitJump(\\n        uint256 indexed _disputeID,\\n        uint256 indexed _roundID,\\n        uint256 indexed _fromDisputeKitID,\\n        uint256 _toDisputeKitID\\n    );\\n\\n    /// @notice Emitted when juror's balance shifts after penalties/rewards has been processed.\\n    /// @param _account Juror's address.\\n    /// @param _disputeID ID of the dispute.\\n    /// @param _roundID ID of the round.\\n    /// @param _degreeOfCoherencyPnk Juror's degree of coherency in this round applied to PNK.\\n    /// @param _degreeOfCoherencyFee Juror's degree of coherency in this round applied to the dispute fee.\\n    /// @param _amountPnk Amount of PNK shifted.\\n    /// @param _amountFee Amount of fee shifted.\\n    /// @param _feeToken Address of the fee token.\\n    event JurorRewardPenalty(\\n        address indexed _account,\\n        uint256 indexed _disputeID,\\n        uint256 indexed _roundID,\\n        uint256 _degreeOfCoherencyPnk,\\n        uint256 _degreeOfCoherencyFee,\\n        int256 _amountPnk,\\n        int256 _amountFee,\\n        IERC20 _feeToken\\n    );\\n\\n    /// @notice Emitted when leftover reward sent to owner.\\n    /// @param _disputeID ID of the dispute.\\n    /// @param _roundID ID of the round.\\n    /// @param _amountPnk Amount of PNK sent.\\n    /// @param _amountFee Amount of fee sent.\\n    /// @param _feeToken Address of the fee token.\\n    event LeftoverRewardSent(\\n        uint256 indexed _disputeID,\\n        uint256 indexed _roundID,\\n        uint256 _amountPnk,\\n        uint256 _amountFee,\\n        IERC20 _feeToken\\n    );\\n\\n    /// @notice Emitted when this contract is paused.\\n    event Paused();\\n\\n    /// @notice Emitted when this contract is unpaused.\\n    event Unpaused();\\n\\n    // ************************************* //\\n    // *        Function Modifiers         * //\\n    // ************************************* //\\n\\n    modifier onlyByOwner() {\\n        if (owner != msg.sender) revert OwnerOnly();\\n        _;\\n    }\\n\\n    modifier onlyByGuardianOrOwner() {\\n        if (guardian != msg.sender && owner != msg.sender) revert GuardianOrOwnerOnly();\\n        _;\\n    }\\n\\n    modifier whenPaused() {\\n        if (!paused) revert WhenPausedOnly();\\n        _;\\n    }\\n\\n    modifier whenNotPaused() {\\n        if (paused) revert WhenNotPausedOnly();\\n        _;\\n    }\\n\\n    // ************************************* //\\n    // *            Constructor            * //\\n    // ************************************* //\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Initializer (constructor equivalent for upgradable contracts).\\n    /// @param _owner The owner's address.\\n    /// @param _guardian The guardian's address.\\n    /// @param _pinakion The address of the token contract.\\n    /// @param _jurorProsecutionModule The address of the juror prosecution module.\\n    /// @param _disputeKit The address of the default dispute kit.\\n    /// @param _hiddenVotes The `hiddenVotes` property value of the general court.\\n    /// @param _courtParameters Numeric parameters of General court (minStake, alpha, feeForJuror and jurorsForCourtJump respectively).\\n    /// @param _timesPerPeriod The `timesPerPeriod` property value of the general court.\\n    /// @param _sortitionExtraData The extra data for sortition module.\\n    /// @param _sortitionModuleAddress The sortition module responsible for sortition of the jurors.\\n    /// @param _wNative The wrapped native token address, typically wETH.\\n    /// @param _jurorNft NFT contract to vet the jurors.\\n    function initialize(\\n        address _owner,\\n        address _guardian,\\n        IERC20 _pinakion,\\n        address _jurorProsecutionModule,\\n        IDisputeKit _disputeKit,\\n        bool _hiddenVotes,\\n        uint256[4] memory _courtParameters,\\n        uint256[4] memory _timesPerPeriod,\\n        bytes memory _sortitionExtraData,\\n        ISortitionModule _sortitionModuleAddress,\\n        address _wNative,\\n        IERC721 _jurorNft\\n    ) external initializer {\\n        owner = _owner;\\n        guardian = _guardian;\\n        pinakion = _pinakion;\\n        jurorProsecutionModule = _jurorProsecutionModule;\\n        sortitionModule = _sortitionModuleAddress;\\n        wNative = _wNative;\\n        jurorNft = _jurorNft;\\n\\n        // NULL_DISPUTE_KIT: an empty element at index 0 to indicate when a dispute kit is not supported.\\n        disputeKits.push();\\n\\n        // DISPUTE_KIT_CLASSIC\\n        disputeKits.push(_disputeKit);\\n\\n        emit DisputeKitCreated(DISPUTE_KIT_CLASSIC, _disputeKit);\\n\\n        // FORKING_COURT\\n        // TODO: Fill the properties for the Forking court, emit CourtCreated.\\n        courts.push();\\n        sortitionModule.createTree(FORKING_COURT, _sortitionExtraData);\\n\\n        // GENERAL_COURT\\n        Court storage court = courts.push();\\n        court.parent = FORKING_COURT;\\n        court.children = new uint256[](0);\\n        court.hiddenVotes = _hiddenVotes;\\n        court.minStake = _courtParameters[0];\\n        court.alpha = _courtParameters[1];\\n        court.feeForJuror = _courtParameters[2];\\n        court.jurorsForCourtJump = _courtParameters[3];\\n        court.timesPerPeriod = _timesPerPeriod;\\n\\n        sortitionModule.createTree(GENERAL_COURT, _sortitionExtraData);\\n\\n        uint256[] memory supportedDisputeKits = new uint256[](1);\\n        supportedDisputeKits[0] = DISPUTE_KIT_CLASSIC;\\n        emit CourtCreated(\\n            GENERAL_COURT,\\n            court.parent,\\n            _hiddenVotes,\\n            _courtParameters[0],\\n            _courtParameters[1],\\n            _courtParameters[2],\\n            _courtParameters[3],\\n            _timesPerPeriod,\\n            supportedDisputeKits\\n        );\\n        _enableDisputeKit(GENERAL_COURT, DISPUTE_KIT_CLASSIC, true);\\n    }\\n\\n    // ************************************* //\\n    // *             Governance            * //\\n    // ************************************* //\\n\\n    /// @dev Access Control to perform implementation upgrades (UUPS Proxiable)\\n    ///      Only the owner can perform upgrades (`onlyByOwner`)\\n    function _authorizeUpgrade(address) internal view override onlyByOwner {\\n        // NOP\\n    }\\n\\n    /// @notice Pause staking and reward execution. Can only be done by guardian or owner.\\n    function pause() external onlyByGuardianOrOwner whenNotPaused {\\n        paused = true;\\n        emit Paused();\\n    }\\n\\n    /// @notice Unpause staking and reward execution. Can only be done by owner.\\n    function unpause() external onlyByOwner whenPaused {\\n        paused = false;\\n        emit Unpaused();\\n    }\\n\\n    /// @notice Allows the owner to call anything on behalf of the contract.\\n    /// @param _destination The destination of the call.\\n    /// @param _amount The value sent with the call.\\n    /// @param _data The data sent with the call.\\n    function executeOwnerProposal(address _destination, uint256 _amount, bytes memory _data) external onlyByOwner {\\n        (bool success, ) = _destination.call{value: _amount}(_data);\\n        if (!success) revert UnsuccessfulCall();\\n    }\\n\\n    /// @notice Changes the `owner` storage variable.\\n    /// @param _owner The new value for the `owner` storage variable.\\n    function changeOwner(address payable _owner) external onlyByOwner {\\n        owner = _owner;\\n    }\\n\\n    /// @notice Changes the `guardian` storage variable.\\n    /// @param _guardian The new value for the `guardian` storage variable.\\n    function changeGuardian(address _guardian) external onlyByOwner {\\n        guardian = _guardian;\\n    }\\n\\n    /// @notice Changes the `pinakion` storage variable.\\n    /// @param _pinakion The new value for the `pinakion` storage variable.\\n    function changePinakion(IERC20 _pinakion) external onlyByOwner {\\n        pinakion = _pinakion;\\n    }\\n\\n    /// @notice Changes the `jurorProsecutionModule` storage variable.\\n    /// @param _jurorProsecutionModule The new value for the `jurorProsecutionModule` storage variable.\\n    function changeJurorProsecutionModule(address _jurorProsecutionModule) external onlyByOwner {\\n        jurorProsecutionModule = _jurorProsecutionModule;\\n    }\\n\\n    /// @notice Changes the `_sortitionModule` storage variable.\\n    /// Note that the new module should be initialized for all courts.\\n    /// @param _sortitionModule The new value for the `sortitionModule` storage variable.\\n    function changeSortitionModule(ISortitionModule _sortitionModule) external onlyByOwner {\\n        sortitionModule = _sortitionModule;\\n    }\\n\\n    /// @notice Add a new supported dispute kit module to the court.\\n    /// @param _disputeKitAddress The address of the dispute kit contract.\\n    function addNewDisputeKit(IDisputeKit _disputeKitAddress) external onlyByOwner {\\n        uint256 disputeKitID = disputeKits.length;\\n        disputeKits.push(_disputeKitAddress);\\n        emit DisputeKitCreated(disputeKitID, _disputeKitAddress);\\n    }\\n\\n    /// @notice Creates a court under a specified parent court.\\n    /// @param _parent The `parent` property value of the court.\\n    /// @param _hiddenVotes The `hiddenVotes` property value of the court.\\n    /// @param _minStake The `minStake` property value of the court.\\n    /// @param _alpha The `alpha` property value of the court.\\n    /// @param _feeForJuror The `feeForJuror` property value of the court.\\n    /// @param _jurorsForCourtJump The `jurorsForCourtJump` property value of the court.\\n    /// @param _timesPerPeriod The `timesPerPeriod` property value of the court.\\n    /// @param _sortitionExtraData Extra data for sortition module.\\n    /// @param _supportedDisputeKits Indexes of dispute kits that this court will support.\\n    function createCourt(\\n        uint96 _parent,\\n        bool _hiddenVotes,\\n        uint256 _minStake,\\n        uint256 _alpha,\\n        uint256 _feeForJuror,\\n        uint256 _jurorsForCourtJump,\\n        uint256[4] memory _timesPerPeriod,\\n        bytes memory _sortitionExtraData,\\n        uint256[] memory _supportedDisputeKits\\n    ) external onlyByOwner {\\n        if (courts[_parent].minStake > _minStake) revert MinStakeLowerThanParentCourt();\\n        if (_supportedDisputeKits.length == 0) revert UnsupportedDisputeKit();\\n        if (_parent == FORKING_COURT) revert InvalidForkingCourtAsParent();\\n\\n        uint96 courtID = uint96(courts.length);\\n        Court storage court = courts.push();\\n\\n        for (uint256 i = 0; i < _supportedDisputeKits.length; i++) {\\n            if (_supportedDisputeKits[i] == 0 || _supportedDisputeKits[i] >= disputeKits.length) {\\n                revert WrongDisputeKitIndex();\\n            }\\n            _enableDisputeKit(uint96(courtID), _supportedDisputeKits[i], true);\\n        }\\n        // Check that Classic DK support was added.\\n        if (!court.supportedDisputeKits[DISPUTE_KIT_CLASSIC]) revert MustSupportDisputeKitClassic();\\n\\n        court.parent = _parent;\\n        court.children = new uint256[](0);\\n        court.hiddenVotes = _hiddenVotes;\\n        court.minStake = _minStake;\\n        court.alpha = _alpha;\\n        court.feeForJuror = _feeForJuror;\\n        court.jurorsForCourtJump = _jurorsForCourtJump;\\n        court.timesPerPeriod = _timesPerPeriod;\\n\\n        sortitionModule.createTree(courtID, _sortitionExtraData);\\n\\n        // Update the parent.\\n        courts[_parent].children.push(courtID);\\n        emit CourtCreated(\\n            uint96(courtID),\\n            _parent,\\n            _hiddenVotes,\\n            _minStake,\\n            _alpha,\\n            _feeForJuror,\\n            _jurorsForCourtJump,\\n            _timesPerPeriod,\\n            _supportedDisputeKits\\n        );\\n    }\\n\\n    /// @notice Changes the parameters of the court.\\n    /// @param _courtID ID of the court.\\n    /// @param _hiddenVotes The `hiddenVotes` property value of the court.\\n    /// @param _minStake The `minStake` property value of the court.\\n    /// @param _alpha The `alpha` property value of the court.\\n    /// @param _feeForJuror The `feeForJuror` property value of the court.\\n    /// @param _jurorsForCourtJump The `jurorsForCourtJump` property value of the court.\\n    /// @param _timesPerPeriod The `timesPerPeriod` property value of the court.\\n    function changeCourtParameters(\\n        uint96 _courtID,\\n        bool _hiddenVotes,\\n        uint256 _minStake,\\n        uint256 _alpha,\\n        uint256 _feeForJuror,\\n        uint256 _jurorsForCourtJump,\\n        uint256[4] memory _timesPerPeriod\\n    ) external onlyByOwner {\\n        Court storage court = courts[_courtID];\\n        if (_courtID != GENERAL_COURT && courts[court.parent].minStake > _minStake) {\\n            revert MinStakeLowerThanParentCourt();\\n        }\\n        for (uint256 i = 0; i < court.children.length; i++) {\\n            if (courts[court.children[i]].minStake < _minStake) {\\n                revert MinStakeLowerThanParentCourt();\\n            }\\n        }\\n        court.minStake = _minStake;\\n        court.hiddenVotes = _hiddenVotes;\\n        court.alpha = _alpha;\\n        court.feeForJuror = _feeForJuror;\\n        court.jurorsForCourtJump = _jurorsForCourtJump;\\n        court.timesPerPeriod = _timesPerPeriod;\\n        emit CourtModified(\\n            _courtID,\\n            _hiddenVotes,\\n            _minStake,\\n            _alpha,\\n            _feeForJuror,\\n            _jurorsForCourtJump,\\n            _timesPerPeriod\\n        );\\n    }\\n\\n    /// @notice Adds/removes court's support for specified dispute kits.\\n    /// @param _courtID The ID of the court.\\n    /// @param _disputeKitIDs The IDs of dispute kits which support should be added/removed.\\n    /// @param _enable Whether add or remove the dispute kits from the court.\\n    function enableDisputeKits(uint96 _courtID, uint256[] memory _disputeKitIDs, bool _enable) external onlyByOwner {\\n        for (uint256 i = 0; i < _disputeKitIDs.length; i++) {\\n            if (_enable) {\\n                if (_disputeKitIDs[i] == 0 || _disputeKitIDs[i] >= disputeKits.length) {\\n                    revert WrongDisputeKitIndex();\\n                }\\n                _enableDisputeKit(_courtID, _disputeKitIDs[i], true);\\n            } else {\\n                // Classic dispute kit must be supported by all courts.\\n                if (_disputeKitIDs[i] == DISPUTE_KIT_CLASSIC) {\\n                    revert CannotDisableClassicDK();\\n                }\\n                _enableDisputeKit(_courtID, _disputeKitIDs[i], false);\\n            }\\n        }\\n    }\\n\\n    /// @notice Changes the supported fee tokens.\\n    /// @param _feeToken The fee token.\\n    /// @param _accepted Whether the token is supported or not as a method of fee payment.\\n    function changeAcceptedFeeTokens(IERC20 _feeToken, bool _accepted) external onlyByOwner {\\n        currencyRates[_feeToken].feePaymentAccepted = _accepted;\\n        emit AcceptedFeeToken(_feeToken, _accepted);\\n    }\\n\\n    /// @notice Changes the currency rate of a fee token.\\n    /// @param _feeToken The fee token.\\n    /// @param _rateInEth The new rate of the fee token in ETH.\\n    /// @param _rateDecimals The new decimals of the fee token rate.\\n    function changeCurrencyRates(IERC20 _feeToken, uint64 _rateInEth, uint8 _rateDecimals) external onlyByOwner {\\n        currencyRates[_feeToken].rateInEth = _rateInEth;\\n        currencyRates[_feeToken].rateDecimals = _rateDecimals;\\n        emit NewCurrencyRate(_feeToken, _rateInEth, _rateDecimals);\\n    }\\n\\n    /// @notice Changes the `jurorNft` storage variable.\\n    /// @param _jurorNft The new value for the `jurorNft` storage variable.\\n    function changeJurorNft(IERC721 _jurorNft) external onlyByOwner {\\n        jurorNft = _jurorNft;\\n    }\\n\\n    /// @notice Adds or removes an arbitrable from whitelist.\\n    /// @param _arbitrable Arbitrable address.\\n    /// @param _allowed Whether add or remove permission.\\n    function changeArbitrableWhitelist(address _arbitrable, bool _allowed) external onlyByOwner {\\n        arbitrableWhitelist[_arbitrable] = _allowed;\\n    }\\n\\n    /// @notice Enables or disables the arbitrable whitelist.\\n    function changeArbitrableWhitelistEnabled(bool _enabled) external onlyByOwner {\\n        arbitrableWhitelistEnabled = _enabled;\\n    }\\n\\n    // ************************************* //\\n    // *         State Modifiers           * //\\n    // ************************************* //\\n\\n    /// @notice Sets the caller's stake in a court.\\n    /// @param _courtID The ID of the court.\\n    /// @param _newStake The new stake.\\n    /// Note that the existing delayed stake will be nullified as non-relevant.\\n    function setStake(uint96 _courtID, uint256 _newStake) external whenNotPaused {\\n        if (address(jurorNft) != address(0) && jurorNft.balanceOf(msg.sender) == 0) revert NotEligibleForStaking();\\n        _setStake(msg.sender, _courtID, _newStake, false, OnError.Revert);\\n    }\\n\\n    /// @notice Sets the stake of a specified account in a court without delaying stake changes, typically to apply a delayed stake or unstake inactive jurors.\\n    /// @param _account The account whose stake is being set.\\n    /// @param _courtID The ID of the court.\\n    /// @param _newStake The new stake.\\n    function setStakeBySortitionModule(address _account, uint96 _courtID, uint256 _newStake) external {\\n        if (msg.sender != address(sortitionModule)) revert SortitionModuleOnly();\\n        _setStake(_account, _courtID, _newStake, true, OnError.Return);\\n    }\\n\\n    /// @notice Transfers PNK to the juror by SortitionModule.\\n    /// @param _account The account of the juror whose PNK to transfer.\\n    /// @param _amount The amount to transfer.\\n    function transferBySortitionModule(address _account, uint256 _amount) external {\\n        if (msg.sender != address(sortitionModule)) revert SortitionModuleOnly();\\n        // Note eligibility is checked in SortitionModule.\\n        pinakion.safeTransfer(_account, _amount);\\n    }\\n\\n    /// @inheritdoc IArbitratorV2\\n    function createDispute(\\n        uint256 _numberOfChoices,\\n        bytes memory _extraData\\n    ) external payable override returns (uint256 disputeID) {\\n        if (msg.value < arbitrationCost(_extraData)) revert ArbitrationFeesNotEnough();\\n\\n        return _createDispute(_numberOfChoices, _extraData, NATIVE_CURRENCY, msg.value);\\n    }\\n\\n    /// @inheritdoc IArbitratorV2\\n    function createDispute(\\n        uint256 _numberOfChoices,\\n        bytes calldata _extraData,\\n        IERC20 _feeToken,\\n        uint256 _feeAmount\\n    ) external override returns (uint256 disputeID) {\\n        if (!currencyRates[_feeToken].feePaymentAccepted) revert TokenNotAccepted();\\n        if (_feeAmount < arbitrationCost(_extraData, _feeToken)) revert ArbitrationFeesNotEnough();\\n\\n        if (!_feeToken.safeTransferFrom(msg.sender, address(this), _feeAmount)) revert TransferFailed();\\n        return _createDispute(_numberOfChoices, _extraData, _feeToken, _feeAmount);\\n    }\\n\\n    function _createDispute(\\n        uint256 _numberOfChoices,\\n        bytes memory _extraData,\\n        IERC20 _feeToken,\\n        uint256 _feeAmount\\n    ) internal returns (uint256 disputeID) {\\n        if (arbitrableWhitelistEnabled && !arbitrableWhitelist[msg.sender]) revert ArbitrableNotWhitelisted();\\n        (uint96 courtID, , uint256 disputeKitID) = _extraDataToCourtIDMinJurorsDisputeKit(_extraData);\\n        if (!courts[courtID].supportedDisputeKits[disputeKitID]) revert DisputeKitNotSupportedByCourt();\\n\\n        disputeID = disputes.length;\\n        Dispute storage dispute = disputes.push();\\n        dispute.courtID = courtID;\\n        dispute.arbitrated = IArbitrableV2(msg.sender);\\n        dispute.lastPeriodChange = block.timestamp;\\n\\n        IDisputeKit disputeKit = disputeKits[disputeKitID];\\n        Court storage court = courts[courtID];\\n        Round storage round = dispute.rounds.push();\\n\\n        // Obtain the feeForJuror in the same currency as the _feeAmount\\n        uint256 feeForJuror = (_feeToken == NATIVE_CURRENCY)\\n            ? court.feeForJuror\\n            : convertEthToTokenAmount(_feeToken, court.feeForJuror);\\n        round.nbVotes = _feeAmount / feeForJuror;\\n        round.disputeKitID = disputeKitID;\\n        round.pnkAtStakePerJuror = _calculatePnkAtStake(court.minStake, court.alpha);\\n        round.totalFeesForJurors = _feeAmount;\\n        round.feeToken = IERC20(_feeToken);\\n\\n        sortitionModule.createDisputeHook(disputeID, 0); // Default round ID.\\n\\n        disputeKit.createDispute(disputeID, _numberOfChoices, _extraData, round.nbVotes);\\n        emit DisputeCreation(disputeID, IArbitrableV2(msg.sender));\\n    }\\n\\n    /// @notice Passes the period of a specified dispute.\\n    /// @param _disputeID The ID of the dispute.\\n    function passPeriod(uint256 _disputeID) external {\\n        Dispute storage dispute = disputes[_disputeID];\\n        Court storage court = courts[dispute.courtID];\\n\\n        uint256 currentRound = dispute.rounds.length - 1;\\n        Round storage round = dispute.rounds[currentRound];\\n        if (dispute.period == Period.evidence) {\\n            if (\\n                currentRound == 0 &&\\n                block.timestamp - dispute.lastPeriodChange < court.timesPerPeriod[uint256(dispute.period)]\\n            ) {\\n                revert EvidenceNotPassedAndNotAppeal();\\n            }\\n            if (round.drawnJurors.length != round.nbVotes) revert DisputeStillDrawing();\\n            dispute.period = court.hiddenVotes ? Period.commit : Period.vote;\\n        } else if (dispute.period == Period.commit) {\\n            // Note that we do not want to pass to Voting period if all the commits are cast because it breaks the Shutter auto-reveal currently.\\n            if (block.timestamp - dispute.lastPeriodChange < court.timesPerPeriod[uint256(dispute.period)]) {\\n                revert CommitPeriodNotPassed();\\n            }\\n            dispute.period = Period.vote;\\n        } else if (dispute.period == Period.vote) {\\n            if (\\n                block.timestamp - dispute.lastPeriodChange < court.timesPerPeriod[uint256(dispute.period)] &&\\n                !disputeKits[round.disputeKitID].areVotesAllCast(_disputeID)\\n            ) {\\n                revert VotePeriodNotPassed();\\n            }\\n            dispute.period = Period.appeal;\\n            emit AppealPossible(_disputeID, dispute.arbitrated);\\n        } else if (dispute.period == Period.appeal) {\\n            if (\\n                block.timestamp - dispute.lastPeriodChange < court.timesPerPeriod[uint256(dispute.period)] &&\\n                !disputeKits[round.disputeKitID].isAppealFunded(_disputeID)\\n            ) {\\n                revert AppealPeriodNotPassed();\\n            }\\n            dispute.period = Period.execution;\\n        } else if (dispute.period == Period.execution) {\\n            revert DisputePeriodIsFinal();\\n        }\\n\\n        dispute.lastPeriodChange = block.timestamp;\\n        emit NewPeriod(_disputeID, dispute.period);\\n    }\\n\\n    /// @notice Draws jurors for the dispute. Can be called in parts.\\n    /// @param _disputeID The ID of the dispute.\\n    /// @param _iterations The number of iterations to run.\\n    /// @return nbDrawnJurors The total number of jurors drawn in the round.\\n    function draw(uint256 _disputeID, uint256 _iterations) external returns (uint256 nbDrawnJurors) {\\n        Dispute storage dispute = disputes[_disputeID];\\n        uint256 currentRound = dispute.rounds.length - 1;\\n        Round storage round = dispute.rounds[currentRound];\\n        if (dispute.period != Period.evidence) revert NotEvidencePeriod();\\n\\n        IDisputeKit disputeKit = disputeKits[round.disputeKitID];\\n\\n        uint256 startIndex = round.drawIterations; // for gas: less storage reads\\n        uint256 i;\\n        while (i < _iterations && round.drawnJurors.length < round.nbVotes) {\\n            (address drawnAddress, uint96 fromSubcourtID) = disputeKit.draw(_disputeID, startIndex + i++);\\n            if (drawnAddress == address(0)) {\\n                continue;\\n            }\\n            sortitionModule.lockStake(drawnAddress, round.pnkAtStakePerJuror);\\n            emit Draw(drawnAddress, _disputeID, currentRound, round.drawnJurors.length);\\n            round.drawnJurors.push(drawnAddress);\\n            round.drawnJurorFromCourtIDs.push(fromSubcourtID != 0 ? fromSubcourtID : dispute.courtID);\\n            if (round.drawnJurors.length == round.nbVotes) {\\n                sortitionModule.postDrawHook(_disputeID, currentRound);\\n            }\\n        }\\n        round.drawIterations += i;\\n        return round.drawnJurors.length;\\n    }\\n\\n    /// @notice Appeals the ruling of a specified dispute.\\n    /// @dev Access restricted to the Dispute Kit for this `_disputeID`.\\n    /// @param _disputeID The ID of the dispute.\\n    /// @param _numberOfChoices Number of choices for the dispute. Can be required during court jump.\\n    /// @param _extraData Extradata for the dispute. Can be required during court jump.\\n    function appeal(uint256 _disputeID, uint256 _numberOfChoices, bytes memory _extraData) external payable {\\n        if (msg.value < appealCost(_disputeID)) revert AppealFeesNotEnough();\\n\\n        Dispute storage dispute = disputes[_disputeID];\\n        if (dispute.period != Period.appeal) revert DisputeNotAppealable();\\n\\n        Round storage round = dispute.rounds[dispute.rounds.length - 1];\\n        if (msg.sender != address(disputeKits[round.disputeKitID])) revert DisputeKitOnly();\\n\\n        // Warning: the extra round must be created before calling disputeKit.createDispute()\\n        Round storage extraRound = dispute.rounds.push();\\n\\n        (uint96 newCourtID, uint256 newDisputeKitID, bool courtJump, ) = _getCourtAndDisputeKitJumps(\\n            dispute,\\n            round,\\n            courts[dispute.courtID],\\n            _disputeID\\n        );\\n        if (courtJump) {\\n            emit CourtJump(_disputeID, dispute.rounds.length - 1, dispute.courtID, newCourtID);\\n        }\\n\\n        dispute.courtID = newCourtID;\\n        dispute.period = Period.evidence;\\n        dispute.lastPeriodChange = block.timestamp;\\n\\n        Court storage court = courts[newCourtID];\\n        extraRound.nbVotes = msg.value / court.feeForJuror; // As many votes that can be afforded by the provided funds.\\n        extraRound.pnkAtStakePerJuror = _calculatePnkAtStake(court.minStake, court.alpha);\\n        extraRound.totalFeesForJurors = msg.value;\\n        extraRound.disputeKitID = newDisputeKitID;\\n\\n        sortitionModule.createDisputeHook(_disputeID, dispute.rounds.length - 1);\\n\\n        // Dispute kit was changed, so create a dispute in the new DK contract.\\n        if (extraRound.disputeKitID != round.disputeKitID) {\\n            emit DisputeKitJump(_disputeID, dispute.rounds.length - 1, round.disputeKitID, extraRound.disputeKitID);\\n            disputeKits[extraRound.disputeKitID].createDispute(\\n                _disputeID,\\n                _numberOfChoices,\\n                _extraData,\\n                extraRound.nbVotes\\n            );\\n        }\\n\\n        emit AppealDecision(_disputeID, dispute.arbitrated);\\n        emit NewPeriod(_disputeID, Period.evidence);\\n    }\\n\\n    /// @notice Distribute the PNKs at stake and the dispute fees for the specific round of the dispute. Can be called in parts.\\n    /// @dev Reward distributions are forbidden during pause.\\n    /// @param _disputeID The ID of the dispute.\\n    /// @param _round The appeal round.\\n    /// @param _iterations The number of iterations to run.\\n    function execute(uint256 _disputeID, uint256 _round, uint256 _iterations) external whenNotPaused {\\n        Round storage round;\\n        {\\n            Dispute storage dispute = disputes[_disputeID];\\n            if (dispute.period != Period.execution) revert NotExecutionPeriod();\\n\\n            round = dispute.rounds[_round];\\n        } // stack too deep workaround\\n\\n        uint256 start = round.repartitions;\\n        uint256 end = round.repartitions + _iterations;\\n\\n        uint256 pnkPenaltiesInRound = round.pnkPenalties; // Keep in memory to save gas.\\n        uint256 numberOfVotesInRound = round.drawnJurors.length;\\n        uint256 feePerJurorInRound = round.totalFeesForJurors / numberOfVotesInRound;\\n        uint256 pnkAtStakePerJurorInRound = round.pnkAtStakePerJuror;\\n        uint256 coherentCount;\\n        {\\n            IDisputeKit disputeKit = disputeKits[round.disputeKitID];\\n            coherentCount = disputeKit.getCoherentCount(_disputeID, _round); // Total number of jurors that are eligible to a reward in this round.\\n        } // stack too deep workaround\\n\\n        if (coherentCount == 0) {\\n            // We loop over the votes once as there are no rewards because it is not a tie and no one in this round is coherent with the final outcome.\\n            if (end > numberOfVotesInRound) end = numberOfVotesInRound;\\n        } else {\\n            // We loop over the votes twice, first to collect the PNK penalties, and second to distribute them as rewards along with arbitration fees.\\n            if (end > numberOfVotesInRound * 2) end = numberOfVotesInRound * 2;\\n        }\\n        round.repartitions = end;\\n\\n        for (uint256 i = start; i < end; i++) {\\n            if (i < numberOfVotesInRound) {\\n                pnkPenaltiesInRound = _executePenalties(\\n                    ExecuteParams({\\n                        disputeID: _disputeID,\\n                        round: _round,\\n                        coherentCount: coherentCount,\\n                        numberOfVotesInRound: numberOfVotesInRound,\\n                        feePerJurorInRound: feePerJurorInRound,\\n                        pnkAtStakePerJurorInRound: pnkAtStakePerJurorInRound,\\n                        pnkPenaltiesInRound: pnkPenaltiesInRound,\\n                        repartition: i\\n                    })\\n                );\\n            } else {\\n                _executeRewards(\\n                    ExecuteParams({\\n                        disputeID: _disputeID,\\n                        round: _round,\\n                        coherentCount: coherentCount,\\n                        numberOfVotesInRound: numberOfVotesInRound,\\n                        feePerJurorInRound: feePerJurorInRound,\\n                        pnkAtStakePerJurorInRound: pnkAtStakePerJurorInRound,\\n                        pnkPenaltiesInRound: pnkPenaltiesInRound,\\n                        repartition: i\\n                    })\\n                );\\n            }\\n        }\\n        if (round.pnkPenalties != pnkPenaltiesInRound) {\\n            round.pnkPenalties = pnkPenaltiesInRound; // Note: Check-Effect-Interaction pattern is compromised here, but in the current state it doesn't cause any issues.\\n        }\\n    }\\n\\n    /// @notice Distribute the PNKs at stake and the dispute fees for the specific round of the dispute, penalties only.\\n    /// @param _params The parameters for the execution, see `ExecuteParams`.\\n    /// @return pnkPenaltiesInRoundCache The updated penalties in round cache.\\n    function _executePenalties(ExecuteParams memory _params) internal returns (uint256) {\\n        Dispute storage dispute = disputes[_params.disputeID];\\n        Round storage round = dispute.rounds[_params.round];\\n        IDisputeKit disputeKit = disputeKits[round.disputeKitID];\\n\\n        // [0, 1] value that determines how coherent the juror was in this round, in basis points.\\n        uint256 coherence = disputeKit.getDegreeOfCoherencePenalty(\\n            _params.disputeID,\\n            _params.round,\\n            _params.repartition,\\n            _params.feePerJurorInRound,\\n            _params.pnkAtStakePerJurorInRound\\n        );\\n\\n        // Extra check to guard against degree exceeding 1, though it should be ensured by the dispute kit.\\n        if (coherence > ONE_BASIS_POINT) {\\n            coherence = ONE_BASIS_POINT;\\n        }\\n\\n        // Fully coherent jurors won't be penalized.\\n        uint256 penalty = (round.pnkAtStakePerJuror * (ONE_BASIS_POINT - coherence)) / ONE_BASIS_POINT;\\n\\n        // Unlock the PNKs affected by the penalty\\n        address account = round.drawnJurors[_params.repartition];\\n        sortitionModule.unlockStake(account, penalty);\\n\\n        // Apply the penalty to the staked PNKs.\\n        uint96 penalizedInCourtID = round.drawnJurorFromCourtIDs[_params.repartition];\\n        (uint256 pnkBalance, uint256 newCourtStake, uint256 availablePenalty) = sortitionModule.setStakePenalty(\\n            account,\\n            penalizedInCourtID,\\n            penalty\\n        );\\n        if (availablePenalty != 0) {\\n            _params.pnkPenaltiesInRound += availablePenalty;\\n            emit JurorRewardPenalty(\\n                account,\\n                _params.disputeID,\\n                _params.round,\\n                coherence,\\n                0,\\n                -int256(availablePenalty),\\n                0,\\n                round.feeToken\\n            );\\n        }\\n\\n        if (pnkBalance == 0 || !disputeKit.isVoteActive(_params.disputeID, _params.round, _params.repartition)) {\\n            // The juror is inactive or their balance is can't cover penalties anymore, unstake them from all courts.\\n            sortitionModule.forcedUnstakeAllCourts(account);\\n        } else if (newCourtStake < courts[penalizedInCourtID].minStake) {\\n            // The juror's balance fell below the court minStake, unstake them from the court.\\n            sortitionModule.forcedUnstake(account, penalizedInCourtID);\\n        }\\n\\n        if (_params.repartition == _params.numberOfVotesInRound - 1 && _params.coherentCount == 0) {\\n            // No one was coherent, send the rewards to the owner.\\n            _transferFeeToken(round.feeToken, payable(owner), round.totalFeesForJurors);\\n            pinakion.safeTransfer(owner, _params.pnkPenaltiesInRound);\\n            emit LeftoverRewardSent(\\n                _params.disputeID,\\n                _params.round,\\n                _params.pnkPenaltiesInRound,\\n                round.totalFeesForJurors,\\n                round.feeToken\\n            );\\n        }\\n        return _params.pnkPenaltiesInRound;\\n    }\\n\\n    /// @notice Distribute the PNKs at stake and the dispute fees for the specific round of the dispute, rewards only.\\n    /// @param _params The parameters for the execution, see `ExecuteParams`.\\n    function _executeRewards(ExecuteParams memory _params) internal {\\n        Dispute storage dispute = disputes[_params.disputeID];\\n        Round storage round = dispute.rounds[_params.round];\\n        IDisputeKit disputeKit = disputeKits[round.disputeKitID];\\n\\n        // [0, 1] value that determines how coherent the juror was in this round, in basis points.\\n        (uint256 pnkCoherence, uint256 feeCoherence) = disputeKit.getDegreeOfCoherenceReward(\\n            _params.disputeID,\\n            _params.round,\\n            _params.repartition % _params.numberOfVotesInRound,\\n            _params.feePerJurorInRound,\\n            _params.pnkAtStakePerJurorInRound\\n        );\\n\\n        // Extra check to guard against degree exceeding 1, though it should be ensured by the dispute kit.\\n        if (pnkCoherence > ONE_BASIS_POINT) {\\n            pnkCoherence = ONE_BASIS_POINT;\\n        }\\n        if (feeCoherence > ONE_BASIS_POINT) {\\n            feeCoherence = ONE_BASIS_POINT;\\n        }\\n\\n        address account = round.drawnJurors[_params.repartition % _params.numberOfVotesInRound];\\n        uint256 pnkLocked = _applyCoherence(round.pnkAtStakePerJuror, pnkCoherence);\\n\\n        // Release the rest of the PNKs of the juror for this round.\\n        sortitionModule.unlockStake(account, pnkLocked);\\n\\n        // Compute the rewards\\n        uint256 pnkReward = _applyCoherence(_params.pnkPenaltiesInRound / _params.coherentCount, pnkCoherence);\\n        round.sumPnkRewardPaid += pnkReward;\\n        uint256 feeReward = _applyCoherence(round.totalFeesForJurors / _params.coherentCount, feeCoherence);\\n        round.sumFeeRewardPaid += feeReward;\\n\\n        if (feeReward != 0) {\\n            // Transfer the fee reward\\n            _transferFeeToken(round.feeToken, payable(account), feeReward);\\n        }\\n        if (pnkReward != 0) {\\n            // Stake the PNK reward if possible, bypasses delayed stakes and other checks done by validateStake()\\n            if (!sortitionModule.setStakeReward(account, dispute.courtID, pnkReward)) {\\n                pinakion.safeTransfer(account, pnkReward);\\n            }\\n        }\\n        if (pnkReward != 0 || feeReward != 0) {\\n            emit JurorRewardPenalty(\\n                account,\\n                _params.disputeID,\\n                _params.round,\\n                pnkCoherence,\\n                feeCoherence,\\n                int256(pnkReward),\\n                int256(feeReward),\\n                round.feeToken\\n            );\\n        }\\n\\n        // Transfer any residual rewards to the owner. It may happen due to partial coherence of the jurors.\\n        if (_params.repartition == _params.numberOfVotesInRound * 2 - 1) {\\n            uint256 leftoverPnkReward = _params.pnkPenaltiesInRound - round.sumPnkRewardPaid;\\n            uint256 leftoverFeeReward = round.totalFeesForJurors - round.sumFeeRewardPaid;\\n            if (leftoverPnkReward != 0 || leftoverFeeReward != 0) {\\n                if (leftoverPnkReward != 0) {\\n                    pinakion.safeTransfer(owner, leftoverPnkReward);\\n                }\\n                if (leftoverFeeReward != 0) {\\n                    _transferFeeToken(round.feeToken, payable(owner), leftoverFeeReward);\\n                }\\n                emit LeftoverRewardSent(\\n                    _params.disputeID,\\n                    _params.round,\\n                    leftoverPnkReward,\\n                    leftoverFeeReward,\\n                    round.feeToken\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @notice Executes a specified dispute's ruling.\\n    /// @param _disputeID The ID of the dispute.\\n    function executeRuling(uint256 _disputeID) external {\\n        Dispute storage dispute = disputes[_disputeID];\\n        if (dispute.period != Period.execution) revert NotExecutionPeriod();\\n        if (dispute.ruled) revert RulingAlreadyExecuted();\\n\\n        (uint256 winningChoice, , ) = currentRuling(_disputeID);\\n        dispute.ruled = true;\\n        emit Ruling(dispute.arbitrated, _disputeID, winningChoice);\\n        dispute.arbitrated.rule(_disputeID, winningChoice);\\n    }\\n\\n    // ************************************* //\\n    // *           Public Views            * //\\n    // ************************************* //\\n\\n    /// @inheritdoc IArbitratorV2\\n    function arbitrationCost(bytes memory _extraData) public view override returns (uint256 cost) {\\n        (uint96 courtID, uint256 minJurors, ) = _extraDataToCourtIDMinJurorsDisputeKit(_extraData);\\n        cost = courts[courtID].feeForJuror * minJurors;\\n    }\\n\\n    /// @inheritdoc IArbitratorV2\\n    function arbitrationCost(bytes calldata _extraData, IERC20 _feeToken) public view override returns (uint256 cost) {\\n        cost = convertEthToTokenAmount(_feeToken, arbitrationCost(_extraData));\\n    }\\n\\n    /// @notice Gets the cost of appealing a specified dispute.\\n    /// @param _disputeID The ID of the dispute.\\n    /// @return cost The appeal cost.\\n    function appealCost(uint256 _disputeID) public view returns (uint256 cost) {\\n        Dispute storage dispute = disputes[_disputeID];\\n        Round storage round = dispute.rounds[dispute.rounds.length - 1];\\n        Court storage court = courts[dispute.courtID];\\n\\n        (, uint256 newDisputeKitID, bool courtJump, ) = _getCourtAndDisputeKitJumps(dispute, round, court, _disputeID);\\n\\n        uint256 nbVotesAfterAppeal = disputeKits[newDisputeKitID].getNbVotesAfterAppeal(\\n            disputeKits[round.disputeKitID],\\n            round.nbVotes\\n        );\\n\\n        if (courtJump) {\\n            // Jump to parent court.\\n            if (dispute.courtID == GENERAL_COURT) {\\n                // TODO: Handle the forking when appealed in General court.\\n                cost = NON_PAYABLE_AMOUNT; // Get the cost of the parent court.\\n            } else {\\n                cost = courts[court.parent].feeForJuror * nbVotesAfterAppeal;\\n            }\\n        } else {\\n            // Stay in current court.\\n            cost = court.feeForJuror * nbVotesAfterAppeal;\\n        }\\n    }\\n\\n    /// @notice Gets the start and the end of a specified dispute's current appeal period.\\n    /// @param _disputeID The ID of the dispute.\\n    /// @return start The start of the appeal period.\\n    /// @return end The end of the appeal period.\\n    function appealPeriod(uint256 _disputeID) external view returns (uint256 start, uint256 end) {\\n        Dispute storage dispute = disputes[_disputeID];\\n        if (dispute.period == Period.appeal) {\\n            start = dispute.lastPeriodChange;\\n            end = dispute.lastPeriodChange + courts[dispute.courtID].timesPerPeriod[uint256(Period.appeal)];\\n        } else {\\n            start = 0;\\n            end = 0;\\n        }\\n    }\\n\\n    /// @inheritdoc IArbitratorV2\\n    function currentRuling(uint256 _disputeID) public view returns (uint256 ruling, bool tied, bool overridden) {\\n        Dispute storage dispute = disputes[_disputeID];\\n        Round storage round = dispute.rounds[dispute.rounds.length - 1];\\n        IDisputeKit disputeKit = disputeKits[round.disputeKitID];\\n        (ruling, tied, overridden) = disputeKit.currentRuling(_disputeID);\\n    }\\n\\n    /// @notice Gets the round info for a specified dispute and round.\\n    /// @dev This function must not be called from a non-view function because it returns a dynamic array which might be very large, theoretically exceeding the block gas limit.\\n    /// @param _disputeID The ID of the dispute.\\n    /// @param _round The round to get the info for.\\n    /// @return round The round info.\\n    function getRoundInfo(uint256 _disputeID, uint256 _round) external view returns (Round memory) {\\n        return disputes[_disputeID].rounds[_round];\\n    }\\n\\n    /// @notice Gets the PNK at stake per juror for a specified dispute and round.\\n    /// @param _disputeID The ID of the dispute.\\n    /// @param _round The round to get the info for.\\n    /// @return pnkAtStakePerJuror The PNK at stake per juror.\\n    function getPnkAtStakePerJuror(uint256 _disputeID, uint256 _round) external view returns (uint256) {\\n        return disputes[_disputeID].rounds[_round].pnkAtStakePerJuror;\\n    }\\n\\n    /// @notice Gets the number of rounds for a specified dispute.\\n    /// @param _disputeID The ID of the dispute.\\n    /// @return The number of rounds.\\n    function getNumberOfRounds(uint256 _disputeID) external view returns (uint256) {\\n        return disputes[_disputeID].rounds.length;\\n    }\\n\\n    /// @notice Checks if a given dispute kit is supported by a given court.\\n    /// @param _courtID The ID of the court to check the support for.\\n    /// @param _disputeKitID The ID of the dispute kit to check the support for.\\n    /// @return Whether the dispute kit is supported or not.\\n    function isSupported(uint96 _courtID, uint256 _disputeKitID) external view returns (bool) {\\n        return courts[_courtID].supportedDisputeKits[_disputeKitID];\\n    }\\n\\n    /// @notice Gets the timesPerPeriod array for a given court.\\n    /// @param _courtID The ID of the court to get the times from.\\n    /// @return timesPerPeriod The timesPerPeriod array for the given court.\\n    function getTimesPerPeriod(uint96 _courtID) external view returns (uint256[4] memory timesPerPeriod) {\\n        timesPerPeriod = courts[_courtID].timesPerPeriod;\\n    }\\n\\n    // ************************************* //\\n    // *   Public Views for Dispute Kits   * //\\n    // ************************************* //\\n\\n    /// @notice Gets the number of votes permitted for the specified dispute in the latest round.\\n    /// @param _disputeID The ID of the dispute.\\n    function getNumberOfVotes(uint256 _disputeID) external view returns (uint256) {\\n        Dispute storage dispute = disputes[_disputeID];\\n        return dispute.rounds[dispute.rounds.length - 1].nbVotes;\\n    }\\n\\n    /// @notice Returns true if the dispute kit will be switched to a parent DK.\\n    /// @param _disputeID The ID of the dispute.\\n    /// @return Whether DK will be switched or not.\\n    function isDisputeKitJumping(uint256 _disputeID) external view returns (bool) {\\n        Dispute storage dispute = disputes[_disputeID];\\n        Round storage round = dispute.rounds[dispute.rounds.length - 1];\\n        Court storage court = courts[dispute.courtID];\\n\\n        if (!_isCourtJumping(round, court, _disputeID)) {\\n            return false;\\n        }\\n\\n        // Jump if the parent court doesn't support the current DK.\\n        return !courts[court.parent].supportedDisputeKits[round.disputeKitID];\\n    }\\n\\n    /// @notice Returns the length of disputeKits array.\\n    /// @return disputeKits length.\\n    function getDisputeKitsLength() external view returns (uint256) {\\n        return disputeKits.length;\\n    }\\n\\n    /// @notice Converts ETH into tokens.\\n    /// @param _toToken The token to convert ETH into.\\n    /// @param _amountInEth ETH amount.\\n    /// @return Amount of tokens.\\n    function convertEthToTokenAmount(IERC20 _toToken, uint256 _amountInEth) public view returns (uint256) {\\n        return (_amountInEth * 10 ** currencyRates[_toToken].rateDecimals) / currencyRates[_toToken].rateInEth;\\n    }\\n\\n    // ************************************* //\\n    // *            Internal               * //\\n    // ************************************* //\\n\\n    /// @notice Returns true if the round is jumping to a parent court.\\n    /// @param _round The round to check.\\n    /// @param _court The court to check.\\n    /// @return Whether the round is jumping to a parent court or not.\\n    function _isCourtJumping(\\n        Round storage _round,\\n        Court storage _court,\\n        uint256 _disputeID\\n    ) internal view returns (bool) {\\n        return\\n            disputeKits[_round.disputeKitID].earlyCourtJump(_disputeID) || _round.nbVotes >= _court.jurorsForCourtJump;\\n    }\\n\\n    /// @notice Checks whether a dispute will jump to new court/DK, and returns new court and DK.\\n    /// @param _dispute Dispute data.\\n    /// @param _round Round ID.\\n    /// @param _court Current court ID.\\n    /// @param _disputeID Dispute ID.\\n    /// @return newCourtID Court ID after jump.\\n    /// @return newDisputeKitID Dispute kit ID after jump.\\n    /// @return courtJump Whether the dispute jumps to a new court or not.\\n    /// @return disputeKitJump Whether the dispute jumps to a new dispute kit or not.\\n    function _getCourtAndDisputeKitJumps(\\n        Dispute storage _dispute,\\n        Round storage _round,\\n        Court storage _court,\\n        uint256 _disputeID\\n    ) internal view returns (uint96 newCourtID, uint256 newDisputeKitID, bool courtJump, bool disputeKitJump) {\\n        newCourtID = _dispute.courtID;\\n        newDisputeKitID = _round.disputeKitID;\\n\\n        if (!_isCourtJumping(_round, _court, _disputeID)) return (newCourtID, newDisputeKitID, false, false);\\n\\n        // Jump to parent court.\\n        newCourtID = courts[newCourtID].parent;\\n        courtJump = true;\\n\\n        if (!courts[newCourtID].supportedDisputeKits[newDisputeKitID]) {\\n            // The current Dispute Kit is not compatible with the new court, jump to another Dispute Kit.\\n            newDisputeKitID = disputeKits[_round.disputeKitID].getJumpDisputeKitID();\\n            if (newDisputeKitID == NULL_DISPUTE_KIT || !courts[newCourtID].supportedDisputeKits[newDisputeKitID]) {\\n                // The new Dispute Kit is not defined or still not compatible, fall back to `DisputeKitClassic` which is always supported.\\n                newDisputeKitID = DISPUTE_KIT_CLASSIC;\\n            }\\n            disputeKitJump = true;\\n        }\\n    }\\n\\n    /// @notice Internal function to transfer fee tokens (ETH or ERC20)\\n    /// @param _feeToken The token to transfer (NATIVE_CURRENCY for ETH).\\n    /// @param _recipient The recipient address.\\n    /// @param _amount The amount to transfer.\\n    function _transferFeeToken(IERC20 _feeToken, address payable _recipient, uint256 _amount) internal {\\n        if (_feeToken == NATIVE_CURRENCY) {\\n            _recipient.safeSend(_amount, wNative);\\n        } else {\\n            _feeToken.safeTransfer(_recipient, _amount);\\n        }\\n    }\\n\\n    /// @notice Applies degree of coherence to an amount\\n    /// @param _amount The base amount to apply coherence to.\\n    /// @param _coherence The degree of coherence in basis points.\\n    /// @return The amount after applying the degree of coherence.\\n    function _applyCoherence(uint256 _amount, uint256 _coherence) internal pure returns (uint256) {\\n        return (_amount * _coherence) / ONE_BASIS_POINT;\\n    }\\n\\n    /// @notice Calculates PNK at stake per juror based on court parameters\\n    /// @param _minStake The minimum stake for the court.\\n    /// @param _alpha The alpha parameter for the court in basis points.\\n    /// @return The amount of PNK at stake per juror.\\n    function _calculatePnkAtStake(uint256 _minStake, uint256 _alpha) internal pure returns (uint256) {\\n        return (_minStake * _alpha) / ONE_BASIS_POINT;\\n    }\\n\\n    /// @notice Toggles the dispute kit support for a given court.\\n    /// @param _courtID The ID of the court to toggle the support for.\\n    /// @param _disputeKitID The ID of the dispute kit to toggle the support for.\\n    /// @param _enable Whether to enable or disable the support. Note that classic dispute kit should always be enabled.\\n    function _enableDisputeKit(uint96 _courtID, uint256 _disputeKitID, bool _enable) internal {\\n        courts[_courtID].supportedDisputeKits[_disputeKitID] = _enable;\\n        emit DisputeKitEnabled(_courtID, _disputeKitID, _enable);\\n    }\\n\\n    /// @notice If called only once then set _onError to Revert, otherwise set it to Return\\n    /// @param _account The account to set the stake for.\\n    /// @param _courtID The ID of the court to set the stake for.\\n    /// @param _newStake The new stake.\\n    /// @param _noDelay True if the stake change should not be delayed.\\n    /// @param _onError Whether to revert or return false on error.\\n    /// @return Whether the stake was successfully set or not.\\n    function _setStake(\\n        address _account,\\n        uint96 _courtID,\\n        uint256 _newStake,\\n        bool _noDelay,\\n        OnError _onError\\n    ) internal returns (bool) {\\n        if (_courtID == FORKING_COURT || _courtID >= courts.length) {\\n            _stakingFailed(_onError, StakingResult.CannotStakeInThisCourt); // Staking directly into the forking court is not allowed.\\n            return false;\\n        }\\n        if (_newStake != 0 && _newStake < courts[_courtID].minStake) {\\n            _stakingFailed(_onError, StakingResult.CannotStakeLessThanMinStake); // Staking less than the minimum stake is not allowed.\\n            return false;\\n        }\\n        (uint256 pnkDeposit, uint256 pnkWithdrawal, StakingResult stakingResult) = sortitionModule.validateStake(\\n            _account,\\n            _courtID,\\n            _newStake,\\n            _noDelay\\n        );\\n        if (stakingResult != StakingResult.Successful && stakingResult != StakingResult.Delayed) {\\n            _stakingFailed(_onError, stakingResult);\\n            return false;\\n        } else if (stakingResult == StakingResult.Delayed) {\\n            return true;\\n        }\\n        if (pnkDeposit > 0) {\\n            if (!pinakion.safeTransferFrom(_account, address(this), pnkDeposit)) {\\n                _stakingFailed(_onError, StakingResult.StakingTransferFailed);\\n                return false;\\n            }\\n        }\\n        if (pnkWithdrawal > 0) {\\n            if (!pinakion.safeTransfer(_account, pnkWithdrawal)) {\\n                _stakingFailed(_onError, StakingResult.UnstakingTransferFailed);\\n                return false;\\n            }\\n        }\\n        sortitionModule.setStake(_account, _courtID, pnkDeposit, pnkWithdrawal, _newStake);\\n\\n        return true;\\n    }\\n\\n    /// @notice It may revert depending on the _onError parameter.\\n    function _stakingFailed(OnError _onError, StakingResult _result) internal pure {\\n        if (_onError == OnError.Return) return;\\n        if (_result == StakingResult.StakingTransferFailed) revert StakingTransferFailed();\\n        if (_result == StakingResult.UnstakingTransferFailed) revert UnstakingTransferFailed();\\n        if (_result == StakingResult.CannotStakeInMoreCourts) revert StakingInTooManyCourts();\\n        if (_result == StakingResult.CannotStakeInThisCourt) revert StakingNotPossibleInThisCourt();\\n        if (_result == StakingResult.CannotStakeLessThanMinStake) revert StakingLessThanCourtMinStake();\\n        if (_result == StakingResult.CannotStakeZeroWhenNoStake) revert StakingZeroWhenNoStake();\\n        if (_result == StakingResult.CannotStakeMoreThanMaxStakePerJuror) revert StakingMoreThanMaxStakePerJuror();\\n        if (_result == StakingResult.CannotStakeMoreThanMaxTotalStaked) revert StakingMoreThanMaxTotalStaked();\\n    }\\n\\n    /// @notice Gets a court ID, the minimum number of jurors and an ID of a dispute kit from a specified extra data bytes array.\\n    /// @dev If `_extraData` contains an incorrect value then this value will be switched to default.\\n    /// @param _extraData The extra data bytes array. The first 32 bytes are the court ID, the next are the minimum number of jurors and the last are the dispute kit ID.\\n    /// @return courtID The court ID.\\n    /// @return minJurors The minimum number of jurors required.\\n    /// @return disputeKitID The ID of the dispute kit.\\n    function _extraDataToCourtIDMinJurorsDisputeKit(\\n        bytes memory _extraData\\n    ) internal view returns (uint96 courtID, uint256 minJurors, uint256 disputeKitID) {\\n        // Note that if the extradata doesn't contain 32 bytes for the dispute kit ID it'll return the default 0 index.\\n        if (_extraData.length >= 64) {\\n            assembly {\\n                // solium-disable-line security/no-inline-assembly\\n                courtID := mload(add(_extraData, 0x20))\\n                minJurors := mload(add(_extraData, 0x40))\\n                disputeKitID := mload(add(_extraData, 0x60))\\n            }\\n            if (courtID == FORKING_COURT || courtID >= courts.length) {\\n                courtID = GENERAL_COURT;\\n            }\\n            if (minJurors == 0) {\\n                minJurors = DEFAULT_NB_OF_JURORS;\\n            }\\n            if (disputeKitID == NULL_DISPUTE_KIT || disputeKitID >= disputeKits.length) {\\n                disputeKitID = DISPUTE_KIT_CLASSIC; // 0 index is not used.\\n            }\\n        } else {\\n            courtID = GENERAL_COURT;\\n            minJurors = DEFAULT_NB_OF_JURORS;\\n            disputeKitID = DISPUTE_KIT_CLASSIC;\\n        }\\n    }\\n\\n    // ************************************* //\\n    // *              Errors               * //\\n    // ************************************* //\\n\\n    error OwnerOnly();\\n    error GuardianOrOwnerOnly();\\n    error DisputeKitOnly();\\n    error SortitionModuleOnly();\\n    error UnsuccessfulCall();\\n    error InvalidDisputKitParent();\\n    error MinStakeLowerThanParentCourt();\\n    error UnsupportedDisputeKit();\\n    error InvalidForkingCourtAsParent();\\n    error WrongDisputeKitIndex();\\n    error CannotDisableClassicDK();\\n    error NotEligibleForStaking();\\n    error StakingMoreThanMaxStakePerJuror();\\n    error StakingMoreThanMaxTotalStaked();\\n    error StakingInTooManyCourts();\\n    error StakingNotPossibleInThisCourt();\\n    error StakingLessThanCourtMinStake();\\n    error StakingTransferFailed();\\n    error UnstakingTransferFailed();\\n    error ArbitrableNotWhitelisted();\\n    error ArbitrationFeesNotEnough();\\n    error DisputeKitNotSupportedByCourt();\\n    error MustSupportDisputeKitClassic();\\n    error TokenNotAccepted();\\n    error EvidenceNotPassedAndNotAppeal();\\n    error DisputeStillDrawing();\\n    error CommitPeriodNotPassed();\\n    error VotePeriodNotPassed();\\n    error AppealPeriodNotPassed();\\n    error NotEvidencePeriod();\\n    error AppealFeesNotEnough();\\n    error DisputeNotAppealable();\\n    error NotExecutionPeriod();\\n    error RulingAlreadyExecuted();\\n    error DisputePeriodIsFinal();\\n    error TransferFailed();\\n    error WhenNotPausedOnly();\\n    error WhenPausedOnly();\\n    error StakingZeroWhenNoStake();\\n}\\n\",\"keccak256\":\"0xcb6d1b26b8a595effc86f8d19a42aef42a20c23c28d361b084c62e0a332e3cf3\",\"license\":\"MIT\"},\"src/arbitration/dispute-kits/DisputeKitClassic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport {DisputeKitClassicBase, KlerosCore} from \\\"./DisputeKitClassicBase.sol\\\";\\n\\n/// @title DisputeKitClassic\\n/// @notice Dispute kit implementation of the Kleros v1 features including:\\n/// - a drawing system: proportional to staked PNK,\\n/// - a vote aggregation system: plurality,\\n/// - an incentive system: equal split between coherent votes,\\n/// - an appeal system: fund 2 choices only, vote on any choice.\\ncontract DisputeKitClassic is DisputeKitClassicBase {\\n    string public constant override version = \\\"2.0.0\\\";\\n\\n    // ************************************* //\\n    // *            Constructor            * //\\n    // ************************************* //\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Initializer.\\n    /// @param _owner The owner's address.\\n    /// @param _core The KlerosCore arbitrator.\\n    /// @param _wNative The wrapped native token address, typically wETH.\\n    /// @param _jumpDisputeKitID The ID of the dispute kit to switch to after the court jump.\\n    function initialize(\\n        address _owner,\\n        KlerosCore _core,\\n        address _wNative,\\n        uint256 _jumpDisputeKitID\\n    ) external initializer {\\n        __DisputeKitClassicBase_initialize(_owner, _core, _wNative, _jumpDisputeKitID);\\n    }\\n\\n    // ************************ //\\n    // *      Governance      * //\\n    // ************************ //\\n\\n    /// @dev Access Control to perform implementation upgrades (UUPS Proxiable)\\n    ///      Only the owner can perform upgrades (`onlyByOwner`)\\n    function _authorizeUpgrade(address) internal view override onlyByOwner {\\n        // NOP\\n    }\\n}\\n\",\"keccak256\":\"0xf87fdd5b448a31b915bd881760a7c1ac1ad697d051d1357b5831476125256237\",\"license\":\"MIT\"},\"src/arbitration/dispute-kits/DisputeKitClassicBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport {KlerosCore, IDisputeKit, ISortitionModule} from \\\"../KlerosCore.sol\\\";\\nimport {Initializable} from \\\"../../proxy/Initializable.sol\\\";\\nimport {UUPSProxiable} from \\\"../../proxy/UUPSProxiable.sol\\\";\\nimport {SafeSend} from \\\"../../libraries/SafeSend.sol\\\";\\nimport {ONE_BASIS_POINT, DISPUTE_KIT_CLASSIC} from \\\"../../libraries/Constants.sol\\\";\\n\\n/// @title DisputeKitClassicBase\\n/// @notice Abstract Dispute kit classic implementation of the Kleros v1 features including:\\n/// - a drawing system: proportional to staked PNK,\\n/// - a vote aggregation system: plurality,\\n/// - an incentive system: equal split between coherent votes,\\n/// - an appeal system: fund 2 choices only, vote on any choice.\\nabstract contract DisputeKitClassicBase is IDisputeKit, Initializable, UUPSProxiable {\\n    using SafeSend for address payable;\\n\\n    // ************************************* //\\n    // *             Structs               * //\\n    // ************************************* //\\n\\n    struct Dispute {\\n        Round[] rounds; // Rounds of the dispute. 0 is the default round, and [1, ..n] are the appeal rounds.\\n        uint256 numberOfChoices; // The number of choices jurors have when voting. This does not include choice `0` which is reserved for \\\"refuse to arbitrate\\\".\\n        bool jumped; // True if dispute jumped to a parent dispute kit and won't be handled by this DK anymore.\\n        mapping(uint256 => uint256) coreRoundIDToLocal; // Maps id of the round in the core contract to the index of the round of related local dispute.\\n        bytes extraData; // Extradata for the dispute.\\n        uint256[10] __gap; // Reserved slots for future upgrades.\\n    }\\n\\n    struct Round {\\n        Vote[] votes; // Former votes[_appeal][].\\n        uint256 winningChoice; // The choice with the most votes. Note that in the case of a tie, it is the choice that reached the tied number of votes first.\\n        mapping(uint256 => uint256) counts; // The sum of votes for each choice in the form `counts[choice]`.\\n        bool tied; // True if there is a tie, false otherwise.\\n        uint256 totalVoted; // Former uint[_appeal] votesInEachRound.\\n        uint256 totalCommitted; // Former commitsInRound.\\n        mapping(uint256 choiceId => uint256) paidFees; // Tracks the fees paid for each choice in this round.\\n        mapping(uint256 choiceId => bool) hasPaid; // True if this choice was fully funded, false otherwise.\\n        mapping(address account => mapping(uint256 choiceId => uint256)) contributions; // Maps contributors to their contributions for each choice.\\n        uint256 feeRewards; // Sum of reimbursable appeal fees available to the parties that made contributions to the ruling that ultimately wins a dispute.\\n        uint256[] fundedChoices; // Stores the choices that are fully funded.\\n        mapping(address drawnAddress => bool) alreadyDrawn; // True if the address has already been drawn, false by default.\\n        uint256[10] __gap; // Reserved slots for future upgrades.\\n    }\\n\\n    struct Vote {\\n        bool voted; // True if the vote has been cast.\\n        address account; // The address of the juror.\\n        bytes32 commit; // The commit of the juror. For courts with hidden votes.\\n        uint256 choice; // The choice of the juror.\\n        uint256[10] __gap; // Reserved slots for future upgrades.\\n    }\\n\\n    // ************************************* //\\n    // *             Storage               * //\\n    // ************************************* //\\n\\n    uint256 public constant WINNER_STAKE_MULTIPLIER = 10000; // Multiplier of the appeal cost that the winner has to pay as fee stake for a round in basis points. Default is 1x of appeal fee.\\n    uint256 public constant LOSER_STAKE_MULTIPLIER = 20000; // Multiplier of the appeal cost that the loser has to pay as fee stake for a round in basis points. Default is 2x of appeal fee.\\n    uint256 public constant LOSER_APPEAL_PERIOD_MULTIPLIER = 5000; // Multiplier of the appeal period for the choice that wasn't voted for in the previous round, in basis points. Default is 1/2 of original appeal period.\\n\\n    address public owner; // The owner of the contract.\\n    KlerosCore public core; // The Kleros Core arbitrator\\n    Dispute[] public disputes; // Array of the locally created disputes.\\n    mapping(uint256 => uint256) public coreDisputeIDToLocal; // Maps the dispute ID in Kleros Core to the local dispute ID.\\n    bool public singleDrawPerJuror; // Whether each juror can only draw once per dispute, false by default.\\n    mapping(uint256 coreDisputeID => bool) public coreDisputeIDToActive; // True if this dispute kit is active for this core dispute ID.\\n    address public wNative; // The wrapped native token for safeSend().\\n    uint256 public jumpDisputeKitID; // The ID of the dispute kit in Kleros Core disputeKits array that the dispute should switch to after the court jump, in case the new court doesn't support this dispute kit.\\n\\n    uint256[50] private __gap; // Reserved slots for future upgrades.\\n\\n    // ************************************* //\\n    // *              Events               * //\\n    // ************************************* //\\n\\n    /// @notice To be emitted when a dispute is created.\\n    /// @param _coreDisputeID The identifier of the dispute in the Arbitrator contract.\\n    /// @param _numberOfChoices The number of choices available in the dispute.\\n    /// @param _extraData The extra data for the dispute.\\n    event DisputeCreation(uint256 indexed _coreDisputeID, uint256 _numberOfChoices, bytes _extraData);\\n\\n    /// @notice To be emitted when a vote commitment is cast.\\n    /// @param _coreDisputeID The identifier of the dispute in the Arbitrator contract.\\n    /// @param _juror The address of the juror casting the vote commitment.\\n    /// @param _voteIDs The identifiers of the votes in the dispute.\\n    /// @param _commit The commitment of the juror.\\n    event CommitCast(uint256 indexed _coreDisputeID, address indexed _juror, uint256[] _voteIDs, bytes32 _commit);\\n\\n    /// @notice To be emitted when a funding contribution is made.\\n    /// @param _coreDisputeID The identifier of the dispute in the Arbitrator contract.\\n    /// @param _coreRoundID The identifier of the round in the Arbitrator contract.\\n    /// @param _choice The choice that is being funded.\\n    /// @param _contributor The address of the contributor.\\n    /// @param _amount The amount contributed.\\n    event Contribution(\\n        uint256 indexed _coreDisputeID,\\n        uint256 indexed _coreRoundID,\\n        uint256 _choice,\\n        address indexed _contributor,\\n        uint256 _amount\\n    );\\n\\n    /// @notice To be emitted when the contributed funds are withdrawn.\\n    /// @param _coreDisputeID The identifier of the dispute in the Arbitrator contract.\\n    /// @param _coreRoundID The identifier of the round in the Arbitrator contract.\\n    /// @param _choice The choice that is being funded.\\n    /// @param _contributor The address of the contributor.\\n    /// @param _amount The amount withdrawn.\\n    event Withdrawal(\\n        uint256 indexed _coreDisputeID,\\n        uint256 indexed _coreRoundID,\\n        uint256 _choice,\\n        address indexed _contributor,\\n        uint256 _amount\\n    );\\n\\n    /// @notice To be emitted when a choice is fully funded for an appeal.\\n    /// @param _coreDisputeID The identifier of the dispute in the Arbitrator contract.\\n    /// @param _coreRoundID The identifier of the round in the Arbitrator contract.\\n    /// @param _choice The choice that is being funded.\\n    event ChoiceFunded(uint256 indexed _coreDisputeID, uint256 indexed _coreRoundID, uint256 indexed _choice);\\n\\n    // ************************************* //\\n    // *              Modifiers            * //\\n    // ************************************* //\\n\\n    modifier onlyByOwner() {\\n        if (owner != msg.sender) revert OwnerOnly();\\n        _;\\n    }\\n\\n    modifier onlyByCore() {\\n        if (address(core) != msg.sender) revert KlerosCoreOnly();\\n        _;\\n    }\\n\\n    modifier notJumped(uint256 _coreDisputeID) {\\n        if (disputes[coreDisputeIDToLocal[_coreDisputeID]].jumped) revert DisputeJumpedToParentDK();\\n        _;\\n    }\\n\\n    // ************************************* //\\n    // *            Constructor            * //\\n    // ************************************* //\\n\\n    /// @notice Initializer.\\n    /// @param _owner The owner's address.\\n    /// @param _core The KlerosCore arbitrator.\\n    /// @param _wNative The wrapped native token address, typically wETH.\\n    /// @param _jumpDisputeKitID The ID of the dispute kit to switch to after the court jump.\\n    function __DisputeKitClassicBase_initialize(\\n        address _owner,\\n        KlerosCore _core,\\n        address _wNative,\\n        uint256 _jumpDisputeKitID\\n    ) internal onlyInitializing {\\n        owner = _owner;\\n        core = _core;\\n        wNative = _wNative;\\n        jumpDisputeKitID = _jumpDisputeKitID;\\n    }\\n\\n    // ************************ //\\n    // *      Governance      * //\\n    // ************************ //\\n\\n    /// @notice Allows the owner to call anything on behalf of the contract.\\n    /// @param _destination The destination of the call.\\n    /// @param _amount The value sent with the call.\\n    /// @param _data The data sent with the call.\\n    function executeOwnerProposal(address _destination, uint256 _amount, bytes memory _data) external onlyByOwner {\\n        (bool success, ) = _destination.call{value: _amount}(_data);\\n        if (!success) revert UnsuccessfulCall();\\n    }\\n\\n    /// @notice Changes the `owner` storage variable.\\n    /// @param _owner The new value for the `owner` storage variable.\\n    function changeOwner(address payable _owner) external onlyByOwner {\\n        owner = _owner;\\n    }\\n\\n    /// @notice Changes the `core` storage variable.\\n    /// @param _core The new value for the `core` storage variable.\\n    function changeCore(address _core) external onlyByOwner {\\n        core = KlerosCore(_core);\\n    }\\n\\n    /// @notice Changes the dispute kit ID used for the jump.\\n    /// @param _jumpDisputeKitID The new value for the `jumpDisputeKitID` storage variable.\\n    function changeJumpDisputeKitID(uint256 _jumpDisputeKitID) external onlyByOwner {\\n        jumpDisputeKitID = _jumpDisputeKitID;\\n    }\\n\\n    // ************************************* //\\n    // *         State Modifiers           * //\\n    // ************************************* //\\n\\n    /// @inheritdoc IDisputeKit\\n    function createDispute(\\n        uint256 _coreDisputeID,\\n        uint256 _numberOfChoices,\\n        bytes calldata _extraData,\\n        uint256 /*_nbVotes*/\\n    ) external override onlyByCore {\\n        uint256 localDisputeID = disputes.length;\\n        Dispute storage dispute = disputes.push();\\n        dispute.numberOfChoices = _numberOfChoices;\\n        dispute.extraData = _extraData;\\n        dispute.jumped = false; // Possibly true if this DK has jumped in a previous round.\\n\\n        // New round in the Core should be created before the dispute creation in DK.\\n        dispute.coreRoundIDToLocal[core.getNumberOfRounds(_coreDisputeID) - 1] = dispute.rounds.length;\\n\\n        Round storage round = dispute.rounds.push();\\n        round.tied = true;\\n\\n        coreDisputeIDToLocal[_coreDisputeID] = localDisputeID;\\n        coreDisputeIDToActive[_coreDisputeID] = true;\\n        emit DisputeCreation(_coreDisputeID, _numberOfChoices, _extraData);\\n    }\\n\\n    /// @inheritdoc IDisputeKit\\n    function draw(\\n        uint256 _coreDisputeID,\\n        uint256 _nonce\\n    ) external override onlyByCore notJumped(_coreDisputeID) returns (address drawnAddress, uint96 fromSubcourtID) {\\n        uint256 localDisputeID = coreDisputeIDToLocal[_coreDisputeID];\\n        Dispute storage dispute = disputes[localDisputeID];\\n        uint256 localRoundID = dispute.rounds.length - 1;\\n        Round storage round = dispute.rounds[localRoundID];\\n\\n        ISortitionModule sortitionModule = core.sortitionModule();\\n        (uint96 courtID, , , , ) = core.disputes(_coreDisputeID);\\n        (drawnAddress, fromSubcourtID) = sortitionModule.draw(courtID, _coreDisputeID, _nonce);\\n        if (drawnAddress == address(0)) {\\n            // Sortition can return 0 address if no one has staked yet.\\n            return (drawnAddress, fromSubcourtID);\\n        }\\n\\n        if (_postDrawCheck(round, _coreDisputeID, drawnAddress)) {\\n            Vote storage vote = round.votes.push();\\n            vote.account = drawnAddress;\\n            round.alreadyDrawn[drawnAddress] = true;\\n        } else {\\n            drawnAddress = address(0);\\n        }\\n    }\\n\\n    /// @notice Sets the caller's commit for the specified votes.\\n    ///\\n    /// @dev It can be called multiple times during the commit period, each call overrides the commits of the previous one.\\n    /// `O(n)` where `n` is the number of votes.\\n    ///\\n    /// @param _coreDisputeID The ID of the dispute in Kleros Core.\\n    /// @param _voteIDs The IDs of the votes.\\n    /// @param _commit The commitment hash.\\n    function castCommit(uint256 _coreDisputeID, uint256[] calldata _voteIDs, bytes32 _commit) external {\\n        _castCommit(_coreDisputeID, _voteIDs, _commit);\\n    }\\n\\n    function _castCommit(\\n        uint256 _coreDisputeID,\\n        uint256[] calldata _voteIDs,\\n        bytes32 _commit\\n    ) internal notJumped(_coreDisputeID) {\\n        (, , KlerosCore.Period period, , ) = core.disputes(_coreDisputeID);\\n        if (period != KlerosCore.Period.commit) revert NotCommitPeriod();\\n        if (_commit == bytes32(0)) revert EmptyCommit();\\n        if (!coreDisputeIDToActive[_coreDisputeID]) revert NotActiveForCoreDisputeID();\\n\\n        Dispute storage dispute = disputes[coreDisputeIDToLocal[_coreDisputeID]];\\n        Round storage round = dispute.rounds[dispute.rounds.length - 1];\\n        for (uint256 i = 0; i < _voteIDs.length; i++) {\\n            if (round.votes[_voteIDs[i]].account != msg.sender) revert JurorHasToOwnTheVote();\\n            round.votes[_voteIDs[i]].commit = _commit;\\n        }\\n        round.totalCommitted += _voteIDs.length;\\n        emit CommitCast(_coreDisputeID, msg.sender, _voteIDs, _commit);\\n    }\\n\\n    /// @notice Sets the caller's choices for the specified votes.\\n    ///\\n    /// @dev `O(n)` where `n` is the number of votes.\\n    ///\\n    /// @param _coreDisputeID The ID of the dispute in Kleros Core.\\n    /// @param _voteIDs The IDs of the votes.\\n    /// @param _choice The choice.\\n    /// @param _salt The salt for the commit if the votes were hidden.\\n    /// @param _justification Justification of the choice.\\n    function castVote(\\n        uint256 _coreDisputeID,\\n        uint256[] calldata _voteIDs,\\n        uint256 _choice,\\n        uint256 _salt,\\n        string memory _justification\\n    ) external {\\n        _castVote(_coreDisputeID, _voteIDs, _choice, _salt, _justification, msg.sender);\\n    }\\n\\n    function _castVote(\\n        uint256 _coreDisputeID,\\n        uint256[] calldata _voteIDs,\\n        uint256 _choice,\\n        uint256 _salt,\\n        string memory _justification,\\n        address _juror\\n    ) internal notJumped(_coreDisputeID) {\\n        (, , KlerosCore.Period period, , ) = core.disputes(_coreDisputeID);\\n        if (period != KlerosCore.Period.vote) revert NotVotePeriod();\\n        if (_voteIDs.length == 0) revert EmptyVoteIDs();\\n        if (!coreDisputeIDToActive[_coreDisputeID]) revert NotActiveForCoreDisputeID();\\n\\n        uint256 localDisputeID = coreDisputeIDToLocal[_coreDisputeID];\\n        Dispute storage dispute = disputes[localDisputeID];\\n        if (_choice > dispute.numberOfChoices) revert ChoiceOutOfBounds();\\n\\n        uint256 localRoundID = dispute.rounds.length - 1;\\n        Round storage round = dispute.rounds[localRoundID];\\n        {\\n            (uint96 courtID, , , , ) = core.disputes(_coreDisputeID);\\n            (, bool hiddenVotes, , , , ) = core.courts(courtID);\\n            bytes32 actualVoteHash = hashVote(_choice, _salt, _justification);\\n\\n            //  Save the votes.\\n            for (uint256 i = 0; i < _voteIDs.length; i++) {\\n                if (round.votes[_voteIDs[i]].account != _juror) revert JurorHasToOwnTheVote();\\n                if (hiddenVotes && _getExpectedVoteHash(localDisputeID, localRoundID, _voteIDs[i]) != actualVoteHash)\\n                    revert HashDoesNotMatchHiddenVoteCommitment();\\n                if (round.votes[_voteIDs[i]].voted) revert VoteAlreadyCast();\\n                round.votes[_voteIDs[i]].choice = _choice;\\n                round.votes[_voteIDs[i]].voted = true;\\n            }\\n        } // Workaround stack too deep\\n\\n        round.totalVoted += _voteIDs.length;\\n\\n        round.counts[_choice] += _voteIDs.length;\\n        if (_choice == round.winningChoice) {\\n            if (round.tied) round.tied = false;\\n        } else {\\n            // Voted for another choice.\\n            if (round.counts[_choice] == round.counts[round.winningChoice]) {\\n                // Tie.\\n                if (!round.tied) round.tied = true;\\n            } else if (round.counts[_choice] > round.counts[round.winningChoice]) {\\n                // New winner.\\n                round.winningChoice = _choice;\\n                round.tied = false;\\n            }\\n        }\\n        emit VoteCast(_coreDisputeID, _juror, _voteIDs, _choice, _justification);\\n    }\\n\\n    /// @notice Manages contributions, and appeals a dispute if at least two choices are fully funded.\\n    /// Note that the surplus deposit will be reimbursed.\\n    /// @param _coreDisputeID Index of the dispute in Kleros Core.\\n    /// @param _choice A choice that receives funding.\\n    function fundAppeal(uint256 _coreDisputeID, uint256 _choice) external payable notJumped(_coreDisputeID) {\\n        Dispute storage dispute = disputes[coreDisputeIDToLocal[_coreDisputeID]];\\n        if (_choice > dispute.numberOfChoices) revert ChoiceOutOfBounds();\\n        if (!coreDisputeIDToActive[_coreDisputeID]) revert NotActiveForCoreDisputeID();\\n\\n        (uint256 appealPeriodStart, uint256 appealPeriodEnd) = core.appealPeriod(_coreDisputeID);\\n        if (block.timestamp < appealPeriodStart || block.timestamp >= appealPeriodEnd) revert AppealPeriodIsOver();\\n\\n        uint256 multiplier;\\n        (uint256 ruling, , ) = this.currentRuling(_coreDisputeID);\\n        if (ruling == _choice) {\\n            multiplier = WINNER_STAKE_MULTIPLIER;\\n        } else {\\n            if (\\n                block.timestamp - appealPeriodStart >=\\n                ((appealPeriodEnd - appealPeriodStart) * LOSER_APPEAL_PERIOD_MULTIPLIER) / ONE_BASIS_POINT\\n            ) {\\n                revert AppealPeriodIsOverForLoser();\\n            }\\n            multiplier = LOSER_STAKE_MULTIPLIER;\\n        }\\n\\n        Round storage round = dispute.rounds[dispute.rounds.length - 1];\\n        uint256 coreRoundID = core.getNumberOfRounds(_coreDisputeID) - 1;\\n\\n        if (round.hasPaid[_choice]) revert AppealFeeIsAlreadyPaid();\\n        uint256 appealCost = core.appealCost(_coreDisputeID);\\n        uint256 totalCost = appealCost + (appealCost * multiplier) / ONE_BASIS_POINT;\\n\\n        // Take up to the amount necessary to fund the current round at the current costs.\\n        uint256 contribution;\\n        if (totalCost > round.paidFees[_choice]) {\\n            contribution = totalCost - round.paidFees[_choice] > msg.value // Overflows and underflows will be managed on the compiler level.\\n                ? msg.value\\n                : totalCost - round.paidFees[_choice];\\n            emit Contribution(_coreDisputeID, coreRoundID, _choice, msg.sender, contribution);\\n        }\\n\\n        round.contributions[msg.sender][_choice] += contribution;\\n        round.paidFees[_choice] += contribution;\\n        if (round.paidFees[_choice] >= totalCost) {\\n            round.feeRewards += round.paidFees[_choice];\\n            round.fundedChoices.push(_choice);\\n            round.hasPaid[_choice] = true;\\n            emit ChoiceFunded(_coreDisputeID, coreRoundID, _choice);\\n        }\\n\\n        if (round.fundedChoices.length > 1) {\\n            // At least two sides are fully funded.\\n            round.feeRewards = round.feeRewards - appealCost;\\n\\n            if (core.isDisputeKitJumping(_coreDisputeID)) {\\n                // Don't create a new round in case of a jump, and remove local dispute from the flow.\\n                dispute.jumped = true;\\n            } else {\\n                // Don't subtract 1 from length since both round arrays haven't been updated yet.\\n                dispute.coreRoundIDToLocal[coreRoundID + 1] = dispute.rounds.length;\\n\\n                Round storage newRound = dispute.rounds.push();\\n                newRound.tied = true;\\n            }\\n            core.appeal{value: appealCost}(_coreDisputeID, dispute.numberOfChoices, dispute.extraData);\\n        }\\n\\n        if (msg.value > contribution) payable(msg.sender).safeSend(msg.value - contribution, wNative);\\n    }\\n\\n    /// @notice Allows those contributors who attempted to fund an appeal round to withdraw any reimbursable fees or rewards after the dispute gets resolved.\\n    /// @dev Withdrawals are not possible if the core contract is paused.\\n    /// @param _coreDisputeID Index of the dispute in Kleros Core contract.\\n    /// @param _beneficiary The address whose rewards to withdraw.\\n    /// @param _coreRoundID The round in the Kleros Core contract the caller wants to withdraw from.\\n    /// @param _choice The ruling option that the caller wants to withdraw from.\\n    /// @return amount The withdrawn amount.\\n    function withdrawFeesAndRewards(\\n        uint256 _coreDisputeID,\\n        address payable _beneficiary,\\n        uint256 _coreRoundID,\\n        uint256 _choice\\n    ) external returns (uint256 amount) {\\n        (, , , bool isRuled, ) = core.disputes(_coreDisputeID);\\n        if (!isRuled) revert DisputeNotResolved();\\n        if (core.paused()) revert CoreIsPaused();\\n        if (!coreDisputeIDToActive[_coreDisputeID]) revert NotActiveForCoreDisputeID();\\n\\n        Dispute storage dispute = disputes[coreDisputeIDToLocal[_coreDisputeID]];\\n        Round storage round = dispute.rounds[dispute.coreRoundIDToLocal[_coreRoundID]];\\n        (uint256 finalRuling, , ) = core.currentRuling(_coreDisputeID);\\n\\n        if (!round.hasPaid[_choice]) {\\n            // Allow to reimburse if funding was unsuccessful for this ruling option.\\n            amount = round.contributions[_beneficiary][_choice];\\n        } else {\\n            // Funding was successful for this ruling option.\\n            if (_choice == finalRuling) {\\n                // This ruling option is the ultimate winner.\\n                amount = round.paidFees[_choice] > 0\\n                    ? (round.contributions[_beneficiary][_choice] * round.feeRewards) / round.paidFees[_choice]\\n                    : 0;\\n            } else if (!round.hasPaid[finalRuling]) {\\n                // The ultimate winner was not funded in this round. In this case funded ruling option(s) are reimbursed.\\n                amount =\\n                    (round.contributions[_beneficiary][_choice] * round.feeRewards) /\\n                    (round.paidFees[round.fundedChoices[0]] + round.paidFees[round.fundedChoices[1]]);\\n            }\\n        }\\n        round.contributions[_beneficiary][_choice] = 0;\\n\\n        if (amount != 0) {\\n            _beneficiary.safeSend(amount, wNative);\\n            emit Withdrawal(_coreDisputeID, _coreRoundID, _choice, _beneficiary, amount);\\n        }\\n    }\\n\\n    // ************************************* //\\n    // *           Public Views            * //\\n    // ************************************* //\\n\\n    /// @notice Computes the hash of a vote using ABI encoding\\n    /// @dev The unused parameters may be used by overriding contracts.\\n    /// @param _choice The choice being voted for\\n    /// @param _salt A random salt for commitment\\n    /// @return bytes32 The hash of the encoded vote parameters\\n    function hashVote(\\n        uint256 _choice,\\n        uint256 _salt,\\n        string memory /*_justification*/\\n    ) public view virtual returns (bytes32) {\\n        return keccak256(abi.encodePacked(_choice, _salt));\\n    }\\n\\n    /// @notice Returns the rulings that were fully funded in the latest appeal round.\\n    /// @param _coreDisputeID The ID of the dispute in Kleros Core.\\n    /// @return fundedChoices Fully funded rulings.\\n    function getFundedChoices(uint256 _coreDisputeID) public view returns (uint256[] memory fundedChoices) {\\n        Dispute storage dispute = disputes[coreDisputeIDToLocal[_coreDisputeID]];\\n        Round storage lastRound = dispute.rounds[dispute.rounds.length - 1];\\n        return lastRound.fundedChoices;\\n    }\\n\\n    /// @inheritdoc IDisputeKit\\n    function currentRuling(\\n        uint256 _coreDisputeID\\n    ) external view override returns (uint256 ruling, bool tied, bool overridden) {\\n        Dispute storage dispute = disputes[coreDisputeIDToLocal[_coreDisputeID]];\\n        Round storage round = dispute.rounds[dispute.rounds.length - 1];\\n        tied = round.tied;\\n        ruling = tied ? 0 : round.winningChoice;\\n        (, , KlerosCore.Period period, , ) = core.disputes(_coreDisputeID);\\n        // Override the final ruling if only one side funded the appeals.\\n        if (period == KlerosCore.Period.execution) {\\n            uint256[] memory fundedChoices = getFundedChoices(_coreDisputeID);\\n            if (fundedChoices.length == 1) {\\n                ruling = fundedChoices[0];\\n                tied = false;\\n                overridden = true;\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IDisputeKit\\n    function getDegreeOfCoherenceReward(\\n        uint256 _coreDisputeID,\\n        uint256 _coreRoundID,\\n        uint256 _voteID,\\n        uint256 /* _feePerJuror */,\\n        uint256 /* _pnkAtStakePerJuror */\\n    ) external view override returns (uint256 pnkCoherence, uint256 feeCoherence) {\\n        uint256 coherence = _getDegreeOfCoherence(_coreDisputeID, _coreRoundID, _voteID);\\n        return (coherence, coherence);\\n    }\\n\\n    /// @inheritdoc IDisputeKit\\n    function getDegreeOfCoherencePenalty(\\n        uint256 _coreDisputeID,\\n        uint256 _coreRoundID,\\n        uint256 _voteID,\\n        uint256 /* _feePerJuror */,\\n        uint256 /* _pnkAtStakePerJuror */\\n    ) external view override returns (uint256 pnkCoherence) {\\n        return _getDegreeOfCoherence(_coreDisputeID, _coreRoundID, _voteID);\\n    }\\n\\n    function _getDegreeOfCoherence(\\n        uint256 _coreDisputeID,\\n        uint256 _coreRoundID,\\n        uint256 _voteID\\n    ) internal view returns (uint256 coherence) {\\n        // In this contract this degree can be either 0 or 1, but in other dispute kits this value can be something in between.\\n        Dispute storage dispute = disputes[coreDisputeIDToLocal[_coreDisputeID]];\\n        Vote storage vote = dispute.rounds[dispute.coreRoundIDToLocal[_coreRoundID]].votes[_voteID];\\n        (uint256 winningChoice, bool tied, ) = core.currentRuling(_coreDisputeID);\\n\\n        if (vote.voted && (vote.choice == winningChoice || tied)) {\\n            return ONE_BASIS_POINT;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /// @inheritdoc IDisputeKit\\n    function getCoherentCount(uint256 _coreDisputeID, uint256 _coreRoundID) external view override returns (uint256) {\\n        Dispute storage dispute = disputes[coreDisputeIDToLocal[_coreDisputeID]];\\n        Round storage currentRound = dispute.rounds[dispute.coreRoundIDToLocal[_coreRoundID]];\\n        (uint256 winningChoice, bool tied, ) = core.currentRuling(_coreDisputeID);\\n\\n        if (currentRound.totalVoted == 0 || (!tied && currentRound.counts[winningChoice] == 0)) {\\n            return 0;\\n        } else if (tied) {\\n            return currentRound.totalVoted;\\n        } else {\\n            return currentRound.counts[winningChoice];\\n        }\\n    }\\n\\n    /// @inheritdoc IDisputeKit\\n    function areCommitsAllCast(uint256 _coreDisputeID) external view override returns (bool) {\\n        Dispute storage dispute = disputes[coreDisputeIDToLocal[_coreDisputeID]];\\n        Round storage round = dispute.rounds[dispute.rounds.length - 1];\\n        return round.totalCommitted == round.votes.length;\\n    }\\n\\n    /// @inheritdoc IDisputeKit\\n    function areVotesAllCast(uint256 _coreDisputeID) external view override returns (bool) {\\n        Dispute storage dispute = disputes[coreDisputeIDToLocal[_coreDisputeID]];\\n        Round storage round = dispute.rounds[dispute.rounds.length - 1];\\n\\n        (uint96 courtID, , , , ) = core.disputes(_coreDisputeID);\\n        (, bool hiddenVotes, , , , ) = core.courts(courtID);\\n        uint256 expectedTotalVoted = hiddenVotes ? round.totalCommitted : round.votes.length;\\n\\n        return round.totalVoted == expectedTotalVoted;\\n    }\\n\\n    /// @inheritdoc IDisputeKit\\n    function isAppealFunded(uint256 _coreDisputeID) external view override returns (bool) {\\n        (uint256 appealPeriodStart, uint256 appealPeriodEnd) = core.appealPeriod(_coreDisputeID);\\n\\n        uint256[] memory fundedChoices = getFundedChoices(_coreDisputeID);\\n        // Uses block.timestamp from the current tx when called by the core contract.\\n        return (fundedChoices.length == 0 &&\\n            block.timestamp - appealPeriodStart >=\\n            ((appealPeriodEnd - appealPeriodStart) * LOSER_APPEAL_PERIOD_MULTIPLIER) / ONE_BASIS_POINT);\\n    }\\n\\n    /// @inheritdoc IDisputeKit\\n    function earlyCourtJump(uint256 /* _coreDisputeID */) external pure override returns (bool) {\\n        return false;\\n    }\\n\\n    /// @inheritdoc IDisputeKit\\n    function getNbVotesAfterAppeal(\\n        IDisputeKit /* _previousDisputeKit */,\\n        uint256 _currentNbVotes\\n    ) external pure override returns (uint256) {\\n        return (_currentNbVotes * 2) + 1;\\n    }\\n\\n    /// @inheritdoc IDisputeKit\\n    function getJumpDisputeKitID() external view override returns (uint256) {\\n        // Fall back to classic DK in case the jump ID is not defined.\\n        return jumpDisputeKitID == 0 ? DISPUTE_KIT_CLASSIC : jumpDisputeKitID;\\n    }\\n\\n    /// @inheritdoc IDisputeKit\\n    function isVoteActive(\\n        uint256 _coreDisputeID,\\n        uint256 _coreRoundID,\\n        uint256 _voteID\\n    ) external view override returns (bool) {\\n        Dispute storage dispute = disputes[coreDisputeIDToLocal[_coreDisputeID]];\\n        Vote storage vote = dispute.rounds[dispute.coreRoundIDToLocal[_coreRoundID]].votes[_voteID];\\n        return vote.voted;\\n    }\\n\\n    /// @inheritdoc IDisputeKit\\n    function getRoundInfo(\\n        uint256 _coreDisputeID,\\n        uint256 _coreRoundID,\\n        uint256 _choice\\n    )\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 winningChoice,\\n            bool tied,\\n            uint256 totalVoted,\\n            uint256 totalCommitted,\\n            uint256 nbVoters,\\n            uint256 choiceCount\\n        )\\n    {\\n        Dispute storage dispute = disputes[coreDisputeIDToLocal[_coreDisputeID]];\\n        Round storage round = dispute.rounds[dispute.coreRoundIDToLocal[_coreRoundID]];\\n        return (\\n            round.winningChoice,\\n            round.tied,\\n            round.totalVoted,\\n            round.totalCommitted,\\n            round.votes.length,\\n            round.counts[_choice]\\n        );\\n    }\\n\\n    /// @notice Returns the number of rounds in a dispute.\\n    /// @param _localDisputeID The ID of the dispute in the Dispute Kit.\\n    /// @return The number of rounds in the dispute.\\n    function getNumberOfRounds(uint256 _localDisputeID) external view returns (uint256) {\\n        return disputes[_localDisputeID].rounds.length;\\n    }\\n\\n    /// @notice Returns the local dispute ID and round ID for a given core dispute ID and core round ID.\\n    /// @param _coreDisputeID The ID of the dispute in Kleros Core.\\n    /// @param _coreRoundID The ID of the round in Kleros Core.\\n    /// @return localDisputeID The ID of the dispute in the Dispute Kit.\\n    /// @return localRoundID The ID of the round in the Dispute Kit.\\n    function getLocalDisputeRoundID(\\n        uint256 _coreDisputeID,\\n        uint256 _coreRoundID\\n    ) external view returns (uint256 localDisputeID, uint256 localRoundID) {\\n        localDisputeID = coreDisputeIDToLocal[_coreDisputeID];\\n        localRoundID = disputes[localDisputeID].coreRoundIDToLocal[_coreRoundID];\\n    }\\n\\n    /// @inheritdoc IDisputeKit\\n    function getVoteInfo(\\n        uint256 _coreDisputeID,\\n        uint256 _coreRoundID,\\n        uint256 _voteID\\n    ) external view override returns (address account, bytes32 commit, uint256 choice, bool voted) {\\n        Dispute storage dispute = disputes[coreDisputeIDToLocal[_coreDisputeID]];\\n        Vote storage vote = dispute.rounds[dispute.coreRoundIDToLocal[_coreRoundID]].votes[_voteID];\\n        return (vote.account, vote.commit, vote.choice, vote.voted);\\n    }\\n\\n    // ************************************* //\\n    // *            Internal               * //\\n    // ************************************* //\\n\\n    /// @notice Returns the expected vote hash for a given vote.\\n    /// @param _localDisputeID The ID of the dispute in the Dispute Kit.\\n    /// @param _localRoundID The ID of the round in the Dispute Kit.\\n    /// @param _voteID The ID of the vote.\\n    /// @return The expected vote hash.\\n    function _getExpectedVoteHash(\\n        uint256 _localDisputeID,\\n        uint256 _localRoundID,\\n        uint256 _voteID\\n    ) internal view virtual returns (bytes32) {\\n        return disputes[_localDisputeID].rounds[_localRoundID].votes[_voteID].commit;\\n    }\\n\\n    /// @notice Checks that the chosen address satisfies certain conditions for being drawn.\\n    ///\\n    /// @dev No need to check the minStake requirement here because of the implicit staking in parent courts.\\n    /// minStake is checked directly during staking process however it's possible for the juror to get drawn\\n    /// while having < minStake if it is later increased by governance.\\n    /// This issue is expected and harmless.\\n    ///\\n    /// @param _coreDisputeID ID of the dispute in the core contract.\\n    /// @param _juror Chosen address.\\n    /// @return result Whether the address passes the check or not.\\n    function _postDrawCheck(\\n        Round storage /*_round*/,\\n        uint256 _coreDisputeID,\\n        address _juror\\n    ) internal view virtual returns (bool result) {\\n        if (singleDrawPerJuror) {\\n            uint256 localDisputeID = coreDisputeIDToLocal[_coreDisputeID];\\n            Dispute storage dispute = disputes[localDisputeID];\\n            Round storage round = dispute.rounds[dispute.rounds.length - 1];\\n            result = !round.alreadyDrawn[_juror];\\n        } else {\\n            result = true;\\n        }\\n    }\\n\\n    // ************************************* //\\n    // *              Errors               * //\\n    // ************************************* //\\n\\n    error OwnerOnly();\\n    error KlerosCoreOnly();\\n    error DisputeJumpedToParentDK();\\n    error UnsuccessfulCall();\\n    error NotCommitPeriod();\\n    error EmptyCommit();\\n    error NotActiveForCoreDisputeID();\\n    error JurorHasToOwnTheVote();\\n    error NotVotePeriod();\\n    error EmptyVoteIDs();\\n    error ChoiceOutOfBounds();\\n    error HashDoesNotMatchHiddenVoteCommitment();\\n    error VoteAlreadyCast();\\n    error AppealPeriodIsOver();\\n    error AppealPeriodIsOverForLoser();\\n    error AppealFeeIsAlreadyPaid();\\n    error DisputeNotResolved();\\n    error CoreIsPaused();\\n}\\n\",\"keccak256\":\"0x15d38f814fc59844571eddbfddad77730cc541f8b86cd094139f4c8771dde011\",\"license\":\"MIT\"},\"src/arbitration/interfaces/IArbitrableV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./IArbitratorV2.sol\\\";\\n\\n/// @title IArbitrableV2\\n/// @notice Arbitrable interface.\\n/// @dev When developing arbitrable contracts, we need to:\\n/// - Define the action taken when a ruling is received by the contract.\\n/// - Allow dispute creation which calls `arbitrator.createDispute{value: _fee}(_choices,_extraData)`.\\ninterface IArbitrableV2 {\\n    // ************************************* //\\n    // *              Events               * //\\n    // ************************************* //\\n\\n    /// @notice To be emitted when a dispute is created to link the correct template to the disputeID.\\n    /// @param _arbitrator The arbitrator of the contract.\\n    /// @param _arbitratorDisputeID The identifier of the dispute in the Arbitrator contract.\\n    /// @param _externalDisputeID An identifier created outside Kleros by the protocol requesting arbitration.\\n    /// @param _templateId The identifier of the dispute template.\\n    event DisputeRequest(\\n        IArbitratorV2 indexed _arbitrator,\\n        uint256 indexed _arbitratorDisputeID,\\n        uint256 _externalDisputeID,\\n        uint256 _templateId\\n    );\\n\\n    /// @notice To be raised when a ruling is given.\\n    /// @param _arbitrator The arbitrator giving the ruling.\\n    /// @param _disputeID The identifier of the dispute in the Arbitrator contract.\\n    /// @param _ruling The ruling which was given.\\n    event Ruling(IArbitratorV2 indexed _arbitrator, uint256 indexed _disputeID, uint256 _ruling);\\n\\n    // ************************************* //\\n    // *         State Modifiers           * //\\n    // ************************************* //\\n\\n    /// @notice Give a ruling for a dispute.\\n    ///\\n    /// @dev This is a callback function for the arbitrator to provide the ruling to this contract.\\n    /// Only the arbitrator must be allowed to call this function.\\n    /// Ruling 0 is reserved for \\\"Not able/wanting to make a decision\\\".\\n    ///\\n    /// @param _disputeID The identifier of the dispute in the Arbitrator contract.\\n    /// @param _ruling Ruling given by the arbitrator.\\n    function rule(uint256 _disputeID, uint256 _ruling) external;\\n}\\n\",\"keccak256\":\"0x3afa29a93847399c8705103350b69bb70706b2075ca41b39d523b007e69e23db\",\"license\":\"MIT\"},\"src/arbitration/interfaces/IArbitratorV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IArbitrableV2.sol\\\";\\n\\n/// @title Arbitrator\\n/// @notice Arbitrator interface for the Kleros V2 protocol.\\n/// @dev Unlike the ERC-792 this standard is not concerned with appeals, so each arbitrator can implement an appeal system that suits it the most.\\ninterface IArbitratorV2 {\\n    // ************************************* //\\n    // *              Events               * //\\n    // ************************************* //\\n\\n    /// @notice To be emitted when a dispute is created.\\n    /// @param _disputeID The identifier of the dispute in the Arbitrator contract.\\n    /// @param _arbitrable The contract which created the dispute.\\n    event DisputeCreation(uint256 indexed _disputeID, IArbitrableV2 indexed _arbitrable);\\n\\n    /// @notice To be raised when a ruling is given.\\n    /// @param _arbitrable The arbitrable receiving the ruling.\\n    /// @param _disputeID The identifier of the dispute in the Arbitrator contract.\\n    /// @param _ruling The ruling which was given.\\n    event Ruling(IArbitrableV2 indexed _arbitrable, uint256 indexed _disputeID, uint256 _ruling);\\n\\n    /// @notice To be emitted when an ERC20 token is added or removed as a method to pay fees.\\n    /// @param _token The ERC20 token.\\n    /// @param _accepted Whether the token is accepted or not.\\n    event AcceptedFeeToken(IERC20 indexed _token, bool indexed _accepted);\\n\\n    /// @notice To be emitted when the fee for a particular ERC20 token is updated.\\n    /// @param _feeToken The ERC20 token.\\n    /// @param _rateInEth The new rate of the fee token in ETH.\\n    /// @param _rateDecimals The new decimals of the fee token rate.\\n    event NewCurrencyRate(IERC20 indexed _feeToken, uint64 _rateInEth, uint8 _rateDecimals);\\n\\n    // ************************************* //\\n    // *         State Modifiers           * //\\n    // ************************************* //\\n\\n    /// @notice Create a dispute and pay for the fees in the native currency, typically ETH.\\n    /// @dev Must be called by the arbitrable contract and pay at least `arbitrationCost(_extraData)` in ETH.\\n    /// @param _numberOfChoices The number of choices the arbitrator can choose from in this dispute.\\n    /// @param _extraData Additional info about the dispute. We use it to pass the ID of the dispute's court (first 32 bytes), the minimum number of jurors required (next 32 bytes) and the ID of the specific dispute kit (last 32 bytes).\\n    /// @return disputeID The identifier of the dispute created.\\n    function createDispute(\\n        uint256 _numberOfChoices,\\n        bytes calldata _extraData\\n    ) external payable returns (uint256 disputeID);\\n\\n    /// @notice Create a dispute and pay for the fees in a supported ERC20 token.\\n    /// @dev Must be called by the arbitrable contract and pay at least `arbitrationCost(_extraData)` in the supported ERC20 token.\\n    /// @param _numberOfChoices The number of choices the arbitrator can choose from in this dispute.\\n    /// @param _extraData Additional info about the dispute. We use it to pass the ID of the dispute's court (first 32 bytes), the minimum number of jurors required (next 32 bytes) and the ID of the specific dispute kit (last 32 bytes).\\n    /// @param _feeToken The ERC20 token used to pay fees.\\n    /// @param _feeAmount Amount of the ERC20 token used to pay fees.\\n    /// @return disputeID The identifier of the dispute created.\\n    function createDispute(\\n        uint256 _numberOfChoices,\\n        bytes calldata _extraData,\\n        IERC20 _feeToken,\\n        uint256 _feeAmount\\n    ) external returns (uint256 disputeID);\\n\\n    // ************************************* //\\n    // *           Public Views            * //\\n    // ************************************* //\\n\\n    /// @notice Compute the cost of arbitration denominated in the native currency, typically ETH.\\n    /// @dev It is recommended not to increase it often, as it can be highly time and gas consuming for the arbitrated contracts to cope with fee augmentation.\\n    /// @param _extraData Additional info about the dispute. We use it to pass the ID of the dispute's court (first 32 bytes), the minimum number of jurors required (next 32 bytes) and the ID of the specific dispute kit (last 32 bytes).\\n    /// @return cost The arbitration cost in ETH.\\n    function arbitrationCost(bytes calldata _extraData) external view returns (uint256 cost);\\n\\n    /// @notice Compute the cost of arbitration denominated in `_feeToken`.\\n    /// @dev It is recommended not to increase it often, as it can be highly time and gas consuming for the arbitrated contracts to cope with fee augmentation.\\n    /// @param _extraData Additional info about the dispute. We use it to pass the ID of the dispute's court (first 32 bytes), the minimum number of jurors required (next 32 bytes) and the ID of the specific dispute kit (last 32 bytes).\\n    /// @param _feeToken The ERC20 token used to pay fees.\\n    /// @return cost The arbitration cost in `_feeToken`.\\n    function arbitrationCost(bytes calldata _extraData, IERC20 _feeToken) external view returns (uint256 cost);\\n\\n    /// @notice Gets the current ruling of a specified dispute.\\n    /// @param _disputeID The ID of the dispute.\\n    /// @return ruling The current ruling.\\n    /// @return tied Whether it's a tie or not.\\n    /// @return overridden Whether the ruling was overridden by appeal funding or not.\\n    function currentRuling(uint256 _disputeID) external view returns (uint256 ruling, bool tied, bool overridden);\\n}\\n\",\"keccak256\":\"0x65ba87c5309cd6e6562e569f79778ca423c9be7b0a44b9407e5bd2bdf8fdc3b0\",\"license\":\"MIT\"},\"src/arbitration/interfaces/IDisputeKit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./IArbitratorV2.sol\\\";\\n\\n/// @title IDisputeKit\\n/// @notice An abstraction of the Dispute Kits intended for interfacing with KlerosCore.\\n/// @dev It does not intend to abstract the interactions with the user (such as voting or appeal funding) to allow for implementation-specific parameters.\\ninterface IDisputeKit {\\n    // ************************************ //\\n    // *             Events               * //\\n    // ************************************ //\\n\\n    /// @notice Emitted when casting a vote to provide the justification of juror's choice.\\n    /// @param _coreDisputeID The identifier of the dispute in the Arbitrator contract.\\n    /// @param _juror Address of the juror.\\n    /// @param _voteIDs The identifiers of the votes in the dispute.\\n    /// @param _choice The choice juror voted for.\\n    /// @param _justification Justification of the choice.\\n    event VoteCast(\\n        uint256 indexed _coreDisputeID,\\n        address indexed _juror,\\n        uint256[] _voteIDs,\\n        uint256 indexed _choice,\\n        string _justification\\n    );\\n\\n    // ************************************* //\\n    // *         State Modifiers           * //\\n    // ************************************* //\\n\\n    /// @notice Creates a local dispute and maps it to the dispute ID in the Core contract.\\n    /// @dev Access restricted to Kleros Core only.\\n    /// @param _coreDisputeID The ID of the dispute in Kleros Core, not in the Dispute Kit.\\n    /// @param _numberOfChoices Number of choices of the dispute\\n    /// @param _extraData Additional info about the dispute, for possible use in future dispute kits.\\n    /// @param _nbVotes Maximal number of votes this dispute can get. Added for future-proofing.\\n    function createDispute(\\n        uint256 _coreDisputeID,\\n        uint256 _numberOfChoices,\\n        bytes calldata _extraData,\\n        uint256 _nbVotes\\n    ) external;\\n\\n    /// @notice Draws the juror from the sortition tree. The drawn address is picked up by Kleros Core.\\n    /// @dev Access restricted to Kleros Core only.\\n    /// @param _coreDisputeID The ID of the dispute in Kleros Core, not in the Dispute Kit.\\n    /// @param _nonce Nonce.\\n    /// @return drawnAddress The drawn address.\\n    function draw(\\n        uint256 _coreDisputeID,\\n        uint256 _nonce\\n    ) external returns (address drawnAddress, uint96 fromSubcourtID);\\n\\n    // ************************************* //\\n    // *           Public Views            * //\\n    // ************************************* //\\n\\n    /// @notice Gets the current ruling of a specified dispute.\\n    /// @param _coreDisputeID The ID of the dispute in Kleros Core, not in the Dispute Kit.\\n    /// @return ruling The current ruling.\\n    /// @return tied Whether it's a tie or not.\\n    /// @return overridden Whether the ruling was overridden by appeal funding or not.\\n    function currentRuling(uint256 _coreDisputeID) external view returns (uint256 ruling, bool tied, bool overridden);\\n\\n    /// @notice Gets the degree of coherence of a particular voter.\\n    /// @dev This function is called by Kleros Core in order to determine the amount of the reward.\\n    /// @param _coreDisputeID The ID of the dispute in Kleros Core, not in the Dispute Kit.\\n    /// @param _coreRoundID The ID of the round in Kleros Core, not in the Dispute Kit.\\n    /// @param _voteID The ID of the vote.\\n    /// @param _feePerJuror The fee per juror.\\n    /// @param _pnkAtStakePerJuror The PNK at stake per juror.\\n    /// @return pnkCoherence The degree of coherence in basis points for the dispute PNK reward.\\n    /// @return feeCoherence The degree of coherence in basis points for the dispute fee reward.\\n    function getDegreeOfCoherenceReward(\\n        uint256 _coreDisputeID,\\n        uint256 _coreRoundID,\\n        uint256 _voteID,\\n        uint256 _feePerJuror,\\n        uint256 _pnkAtStakePerJuror\\n    ) external view returns (uint256 pnkCoherence, uint256 feeCoherence);\\n\\n    /// @notice Gets the degree of coherence of a particular voter.\\n    /// @dev This function is called by Kleros Core in order to determine the amount of the penalty.\\n    /// @param _coreDisputeID The ID of the dispute in Kleros Core, not in the Dispute Kit.\\n    /// @param _coreRoundID The ID of the round in Kleros Core, not in the Dispute Kit.\\n    /// @param _voteID The ID of the vote.\\n    /// @param _feePerJuror The fee per juror.\\n    /// @param _pnkAtStakePerJuror The PNK at stake per juror.\\n    /// @return pnkCoherence The degree of coherence in basis points for the dispute PNK reward.\\n    function getDegreeOfCoherencePenalty(\\n        uint256 _coreDisputeID,\\n        uint256 _coreRoundID,\\n        uint256 _voteID,\\n        uint256 _feePerJuror,\\n        uint256 _pnkAtStakePerJuror\\n    ) external view returns (uint256 pnkCoherence);\\n\\n    /// @notice Gets the number of jurors who are eligible to a reward in this round.\\n    /// @param _coreDisputeID The ID of the dispute in Kleros Core, not in the Dispute Kit.\\n    /// @param _coreRoundID The ID of the round in Kleros Core, not in the Dispute Kit.\\n    /// @return The number of coherent jurors.\\n    function getCoherentCount(uint256 _coreDisputeID, uint256 _coreRoundID) external view returns (uint256);\\n\\n    /// @notice Returns true if all of the jurors have cast their commits for the last round.\\n    /// @param _coreDisputeID The ID of the dispute in Kleros Core, not in the Dispute Kit.\\n    /// @return Whether all of the jurors have cast their commits for the last round.\\n    function areCommitsAllCast(uint256 _coreDisputeID) external view returns (bool);\\n\\n    /// @notice Returns true if all of the jurors have cast their votes for the last round.\\n    /// @dev This function is to be called directly by the core contract and is not for off-chain usage.\\n    /// @param _coreDisputeID The ID of the dispute in Kleros Core, not in the Dispute Kit.\\n    /// @return Whether all of the jurors have cast their votes for the last round.\\n    function areVotesAllCast(uint256 _coreDisputeID) external view returns (bool);\\n\\n    /// @notice Returns true if the appeal funding is finished prematurely (e.g. when losing side didn't fund).\\n    /// @dev This function is to be called directly by the core contract and is not for off-chain usage.\\n    /// @param _coreDisputeID The ID of the dispute in Kleros Core, not in the Dispute Kit.\\n    /// @return Whether the appeal funding is finished.\\n    function isAppealFunded(uint256 _coreDisputeID) external view returns (bool);\\n\\n    /// @dev Returns true if the dispute is jumping to a parent court.\\n    /// @param _coreDisputeID The ID of the dispute in Kleros Core, not in the Dispute Kit.\\n    /// @return Whether the dispute is jumping to a parent court or not.\\n    function earlyCourtJump(uint256 _coreDisputeID) external view returns (bool);\\n\\n    /// @notice Returns the number of votes after the appeal.\\n    /// @param _previousDisputeKit The previous Dispute Kit.\\n    /// @param _currentNbVotes The number of votes before the appeal.\\n    /// @return The number of votes after the appeal.\\n    function getNbVotesAfterAppeal(\\n        IDisputeKit _previousDisputeKit,\\n        uint256 _currentNbVotes\\n    ) external view returns (uint256);\\n\\n    /// @notice Returns the dispute kit ID to be used after court jump by Kleros Core.\\n    /// @return The ID of the dispute kit in Kleros Core disputeKits array.\\n    function getJumpDisputeKitID() external view returns (uint256);\\n\\n    /// @notice Returns true if the specified voter was active in this round.\\n    /// @param _coreDisputeID The ID of the dispute in Kleros Core, not in the Dispute Kit.\\n    /// @param _coreRoundID The ID of the round in Kleros Core, not in the Dispute Kit.\\n    /// @param _voteID The ID of the voter.\\n    /// @return Whether the voter was active or not.\\n    function isVoteActive(uint256 _coreDisputeID, uint256 _coreRoundID, uint256 _voteID) external view returns (bool);\\n\\n    /// @notice Returns the info of the specified round in the core contract.\\n    /// @param _coreDisputeID The ID of the dispute in Kleros Core, not in the Dispute Kit.\\n    /// @param _coreRoundID The ID of the round in Kleros Core, not in the Dispute Kit.\\n    /// @param _choice The choice to query.\\n    /// @return winningChoice The winning choice of this round.\\n    /// @return tied Whether it's a tie or not.\\n    /// @return totalVoted Number of jurors who cast the vote already.\\n    /// @return totalCommited Number of jurors who cast the commit already (only relevant for hidden votes).\\n    /// @return nbVoters Total number of voters in this round.\\n    /// @return choiceCount Number of votes cast for the queried choice.\\n    function getRoundInfo(\\n        uint256 _coreDisputeID,\\n        uint256 _coreRoundID,\\n        uint256 _choice\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 winningChoice,\\n            bool tied,\\n            uint256 totalVoted,\\n            uint256 totalCommited,\\n            uint256 nbVoters,\\n            uint256 choiceCount\\n        );\\n\\n    /// @notice Returns the vote information for a given vote ID.\\n    /// @param _coreDisputeID The ID of the dispute in Kleros Core.\\n    /// @param _coreRoundID The ID of the round in Kleros Core.\\n    /// @param _voteID The ID of the vote.\\n    /// @return account The address of the juror who cast the vote.\\n    /// @return commit The commit of the vote.\\n    /// @return choice The choice that got the vote.\\n    /// @return voted Whether the vote was cast or not.\\n    function getVoteInfo(\\n        uint256 _coreDisputeID,\\n        uint256 _coreRoundID,\\n        uint256 _voteID\\n    ) external view returns (address account, bytes32 commit, uint256 choice, bool voted);\\n}\\n\",\"keccak256\":\"0x1f12d2574dffd9bf83cf33a54aa4abbbfa4203251a0f962edd8e5c3b370408bc\",\"license\":\"MIT\"},\"src/arbitration/interfaces/ISortitionModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../../libraries/Constants.sol\\\";\\n\\n/// @title ISortitionModule\\n/// @notice Interface for the SortitionModule contract.\\ninterface ISortitionModule {\\n    // ************************************* //\\n    // *              Enums                * //\\n    // ************************************* //\\n\\n    enum Phase {\\n        staking, // Stake sum trees can be updated. Pass after `minStakingTime` passes and there is at least one dispute without jurors.\\n        generating, // Waiting for a random number. Pass as soon as it is ready.\\n        drawing // Jurors can be drawn. Pass after all disputes have jurors or `maxDrawingTime` passes.\\n    }\\n\\n    // ************************************* //\\n    // *              Events               * //\\n    // ************************************* //\\n\\n    /// @notice Emitted when the phase is changed.\\n    /// @param _phase The new phase.\\n    event NewPhase(Phase _phase);\\n\\n    // ************************************* //\\n    // *         State Modifiers           * //\\n    // ************************************* //\\n\\n    /// @notice Passes the phase.\\n    function passPhase() external;\\n\\n    /// @notice Executes the next delayed stakes.\\n    /// @param _iterations The number of delayed stakes to execute.\\n    function executeDelayedStakes(uint256 _iterations) external;\\n\\n    /// @notice Create a sortition sum tree at the specified key.\\n    /// @param _courtID The ID of the court.\\n    /// @param _extraData Extra data that contains the number of children each node in the tree should have.\\n    function createTree(uint96 _courtID, bytes memory _extraData) external;\\n\\n    /// @notice Validate the specified juror's new stake for a court.\\n    /// @dev No state changes should be made when returning stakingResult != Successful, otherwise delayed stakes might break invariants.\\n    /// @param _account The address of the juror.\\n    /// @param _courtID The ID of the court.\\n    /// @param _newStake The new stake.\\n    /// @param _noDelay True if the stake change should not be delayed.\\n    /// @return pnkDeposit The amount of PNK to be deposited.\\n    /// @return pnkWithdrawal The amount of PNK to be withdrawn.\\n    /// @return stakingResult The result of the staking operation.\\n    function validateStake(\\n        address _account,\\n        uint96 _courtID,\\n        uint256 _newStake,\\n        bool _noDelay\\n    ) external returns (uint256 pnkDeposit, uint256 pnkWithdrawal, StakingResult stakingResult);\\n\\n    /// @notice Update the state of the stakes, called by KC at the end of setStake flow.\\n    ///\\n    /// @dev `O(n + p * log_k(j))` where\\n    /// `n` is the number of courts the juror has staked in,\\n    /// `p` is the depth of the court tree,\\n    /// `k` is the minimum number of children per node of one of these courts' sortition sum tree,\\n    /// and `j` is the maximum number of jurors that ever staked in one of these courts simultaneously.\\n    ///\\n    /// @param _account The address of the juror.\\n    /// @param _courtID The ID of the court.\\n    /// @param _pnkDeposit The amount of PNK to be deposited.\\n    /// @param _pnkWithdrawal The amount of PNK to be withdrawn.\\n    /// @param _newStake The new stake.\\n    function setStake(\\n        address _account,\\n        uint96 _courtID,\\n        uint256 _pnkDeposit,\\n        uint256 _pnkWithdrawal,\\n        uint256 _newStake\\n    ) external;\\n\\n    /// @notice Update the state of the stakes with a PNK reward deposit, called by KC during rewards execution.\\n    ///\\n    /// @dev `O(n + p * log_k(j))` where\\n    /// `n` is the number of courts the juror has staked in,\\n    /// `p` is the depth of the court tree,\\n    /// `k` is the minimum number of children per node of one of these courts' sortition sum tree,\\n    /// and `j` is the maximum number of jurors that ever staked in one of these courts simultaneously.\\n    ///\\n    /// @param _account The address of the juror.\\n    /// @param _courtID The ID of the court.\\n    /// @param _penalty The amount of PNK to be deducted.\\n    /// @return pnkBalance The updated total PNK balance of the juror, including the penalty.\\n    /// @return newCourtStake The updated stake of the juror in the court.\\n    /// @return availablePenalty The amount of PNK that was actually deducted.\\n    function setStakePenalty(\\n        address _account,\\n        uint96 _courtID,\\n        uint256 _penalty\\n    ) external returns (uint256 pnkBalance, uint256 newCourtStake, uint256 availablePenalty);\\n\\n    /// @notice Update the state of the stakes with a PNK reward deposit, called by KC during rewards execution.\\n    ///\\n    /// @dev `O(n + p * log_k(j))` where\\n    /// `O(n + p * log_k(j))` where\\n    /// `n` is the number of courts the juror has staked in,\\n    /// `p` is the depth of the court tree,\\n    /// `k` is the minimum number of children per node of one of these courts' sortition sum tree,\\n    /// and `j` is the maximum number of jurors that ever staked in one of these courts simultaneously.\\n    ///\\n    /// @param _account The address of the juror.\\n    /// @param _courtID The ID of the court.\\n    /// @param _reward The amount of PNK to be deposited as a reward.\\n    /// @return success True if the reward was added successfully.\\n    function setStakeReward(address _account, uint96 _courtID, uint256 _reward) external returns (bool success);\\n\\n    /// @notice Unstakes the inactive juror from all courts.\\n    ///\\n    /// @dev `O(n * (p * log_k(j)) )` where\\n    /// `O(n * (p * log_k(j)) )` where\\n    /// `n` is the number of courts the juror has staked in,\\n    /// `p` is the depth of the court tree,\\n    /// `k` is the minimum number of children per node of one of these courts' sortition sum tree,\\n    /// and `j` is the maximum number of jurors that ever staked in one of these courts simultaneously.\\n    ///\\n    /// @param _account The juror to unstake.\\n    function forcedUnstakeAllCourts(address _account) external;\\n\\n    /// @notice Unstakes the inactive juror from a specific court.\\n    ///\\n    /// @dev `O(n * (p * log_k(j)) )` where\\n    /// `n` is the number of courts the juror has staked in,\\n    /// `p` is the depth of the court tree,\\n    /// `k` is the minimum number of children per node of one of these courts' sortition sum tree,\\n    /// and `j` is the maximum number of jurors that ever staked in one of these courts simultaneously.\\n    ///\\n    /// @param _account The juror to unstake.\\n    /// @param _courtID The ID of the court.\\n    function forcedUnstake(address _account, uint96 _courtID) external;\\n\\n    /// @notice Locks the tokens of the drawn juror.\\n    /// @param _account The address of the juror.\\n    /// @param _relativeAmount The amount to lock.\\n    function lockStake(address _account, uint256 _relativeAmount) external;\\n\\n    /// @notice Unlocks the tokens of the drawn juror.\\n    /// @param _account The address of the juror.\\n    /// @param _relativeAmount The amount to unlock.\\n    function unlockStake(address _account, uint256 _relativeAmount) external;\\n\\n    /// @notice Triggers the state changes after dispute creation.\\n    /// @param _disputeID The ID of the dispute.\\n    /// @param _roundID The ID of the round.\\n    function createDisputeHook(uint256 _disputeID, uint256 _roundID) external;\\n\\n    /// @notice Triggers the state changes after drawing.\\n    /// @param _disputeID The ID of the dispute.\\n    /// @param _roundID The ID of the round.\\n    function postDrawHook(uint256 _disputeID, uint256 _roundID) external;\\n\\n    /// @notice Gives back the locked PNKs in case the juror fully unstaked earlier.\\n    ///\\n    /// @dev that since locked and staked PNK are async it is possible for the juror to have positive staked PNK balance\\n    /// while having 0 stake in courts and 0 locked tokens (eg. when the juror fully unstaked during dispute and later got his tokens unlocked).\\n    /// In this case the juror can use this function to withdraw the leftover tokens.\\n    /// Also note that if the juror has some leftover PNK while not fully unstaked he'll have to manually unstake from all courts to trigger this function.\\n    ///\\n    /// @param _account The juror whose PNK to withdraw.\\n    function withdrawLeftoverPNK(address _account) external;\\n\\n    // ************************************* //\\n    // *           Public Views            * //\\n    // ************************************* //\\n\\n    /// @notice Draw an ID from a tree using a number.\\n    ///\\n    /// @dev that this function reverts if the sum of all values in the tree is 0.\\n    /// `O(k * log_k(n))` where\\n    /// `k` is the maximum number of children per node in the tree,\\n    ///  and `n` is the maximum number of nodes ever appended.\\n    ///\\n    /// @param _courtID The ID of the court.\\n    /// @param _coreDisputeID Index of the dispute in Kleros Core.\\n    /// @param _nonce Nonce to hash with random number.\\n    /// @return drawnAddress The drawn address.\\n    function draw(\\n        uint96 _courtID,\\n        uint256 _coreDisputeID,\\n        uint256 _nonce\\n    ) external view returns (address drawnAddress, uint96 fromSubcourtID);\\n\\n    /// @notice Gets the balance of a juror in a court.\\n    /// @param _juror The address of the juror.\\n    /// @param _courtID The ID of the court.\\n    /// @return totalStakedPnk The total amount of tokens staked including locked tokens and penalty deductions. Equivalent to the effective stake in the General court.\\n    /// @return totalLocked The total amount of tokens locked in disputes.\\n    /// @return stakedInCourt The amount of tokens staked in the specified court including locked tokens and penalty deductions.\\n    /// @return nbCourts The number of courts the juror has directly staked in.\\n    function getJurorBalance(\\n        address _juror,\\n        uint96 _courtID\\n    ) external view returns (uint256 totalStakedPnk, uint256 totalLocked, uint256 stakedInCourt, uint256 nbCourts);\\n\\n    /// @notice Gets the court identifiers where a specific `_juror` has staked.\\n    /// @param _juror The address of the juror.\\n    function getJurorCourtIDs(address _juror) external view returns (uint96[] memory);\\n\\n    /// @notice Checks if the juror is staked in any court.\\n    /// @param _juror The address of the juror.\\n    /// @return Whether the juror is staked or not.\\n    function isJurorStaked(address _juror) external view returns (bool);\\n\\n    /// @notice Checks if the juror has any leftover PNK in the contract.\\n    /// @param _juror The address of the juror.\\n    /// @return Whether the juror has leftover PNK.\\n    function getJurorLeftoverPNK(address _juror) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3eeff4281ddf3c731c6503094bbbcc80d8015e3a60a27c8cadadfffdf1bf5437\",\"license\":\"MIT\"},\"src/libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// Courts\\nuint96 constant FORKING_COURT = 0; // Index of the forking court.\\nuint96 constant GENERAL_COURT = 1; // Index of the default (general) court.\\n\\n// Dispute Kits\\nuint256 constant NULL_DISPUTE_KIT = 0; // Null pattern to indicate a top-level DK which has no parent.\\nuint256 constant DISPUTE_KIT_CLASSIC = 1; // Index of the default DK. 0 index is skipped.\\n\\n// Sortition Module\\nuint256 constant MAX_STAKE_PATHS = 4; // The maximum number of stake paths a juror can have.\\nuint256 constant DEFAULT_K = 6; // Default number of children per node.\\n\\n// Defaults\\nuint256 constant DEFAULT_NB_OF_JURORS = 3; // The default number of jurors in a dispute.\\nIERC20 constant NATIVE_CURRENCY = IERC20(address(0)); // The native currency, such as ETH on Arbitrum, Optimism and Ethereum L1.\\n\\n// Units\\nuint256 constant ONE_BASIS_POINT = 10000;\\n\\nenum OnError {\\n    Revert,\\n    Return\\n}\\n\\nenum StakingResult {\\n    Successful,\\n    Delayed,\\n    StakingTransferFailed,\\n    UnstakingTransferFailed,\\n    CannotStakeInMoreCourts,\\n    CannotStakeInThisCourt,\\n    CannotStakeLessThanMinStake,\\n    CannotStakeMoreThanMaxStakePerJuror,\\n    CannotStakeMoreThanMaxTotalStaked,\\n    CannotStakeZeroWhenNoStake\\n}\\n\",\"keccak256\":\"0xb8c96c842259ca1384e8450dfb214f0fcd604829c84293dd3f8981f3421b66c9\",\"license\":\"MIT\"},\"src/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/a7a94c77463acea95d979aae1580fb0ddc3b6a1e/contracts/token/ERC20/utils/SafeERC20.sol\\n\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title SafeERC20\\n///\\n/// @notice Wrappers around ERC20 operations\\n///\\n/// @dev Throws on failure (when the token contract returns false).\\n/// Tokens that return no value (and instead revert or throw on failure) are also supported.\\n/// Non-reverting calls are assumed to be successful.\\n/// To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n/// which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\nlibrary SafeERC20 {\\n    /// @notice Increases the allowance granted to `spender` by the caller.\\n    /// @param _token Token to transfer.\\n    /// @param _spender The address which will spend the funds.\\n    /// @param _addedValue The amount of tokens to increase the allowance by.\\n    function increaseAllowance(IERC20 _token, address _spender, uint256 _addedValue) internal returns (bool) {\\n        _token.approve(_spender, _token.allowance(address(this), _spender) + _addedValue);\\n        return true;\\n    }\\n\\n    /// @notice Calls transfer() without reverting.\\n    /// @param _token Token to transfer.\\n    /// @param _to Recipient address.\\n    /// @param _value Amount transferred.\\n    /// @return Whether transfer succeeded or not.\\n    function safeTransfer(IERC20 _token, address _to, uint256 _value) internal returns (bool) {\\n        (bool success, bytes memory data) = address(_token).call(abi.encodeCall(IERC20.transfer, (_to, _value)));\\n        return (success && (data.length == 0 || abi.decode(data, (bool))));\\n    }\\n\\n    /// @notice Calls transferFrom() without reverting.\\n    /// @param _token Token to transfer.\\n    /// @param _from Sender address.\\n    /// @param _to Recipient address.\\n    /// @param _value Amount transferred.\\n    /// @return Whether transfer succeeded or not.\\n    function safeTransferFrom(IERC20 _token, address _from, address _to, uint256 _value) internal returns (bool) {\\n        (bool success, bytes memory data) = address(_token).call(\\n            abi.encodeCall(IERC20.transferFrom, (_from, _to, _value))\\n        );\\n        return (success && (data.length == 0 || abi.decode(data, (bool))));\\n    }\\n}\\n\",\"keccak256\":\"0x36b92f984484f9dfd63a40ccb1c1e23cde0085db36ec8adb7afe7e98ef667bd7\",\"license\":\"MIT\"},\"src/libraries/SafeSend.sol\":{\"content\":\"/**\\n * @authors: [@andreimvp]\\n * @reviewers: [@divyangchauhan, @wadader, @fcanela, @unknownunknown1]\\n * @auditors: []\\n * @bounties: []\\n * SPDX-License-Identifier: MIT\\n */\\n\\npragma solidity ^0.8.24;\\n\\ninterface WethLike {\\n    function deposit() external payable;\\n\\n    function transfer(address dst, uint256 wad) external;\\n}\\n\\nlibrary SafeSend {\\n    function safeSend(address payable _to, uint256 _value, address _wethLike) internal {\\n        if (_to.send(_value)) return;\\n\\n        WethLike(_wethLike).deposit{value: _value}();\\n        WethLike(_wethLike).transfer(_to, _value); /// forge-lint: disable-line(erc20-unchecked-transfer)\\n    }\\n}\\n\",\"keccak256\":\"0xd4d5b25d0eb7f7965ea7a9e3d3d6bc13368de9aaf882543a75dc9c57c85e9283\",\"license\":\"MIT\"},\"src/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol) <https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.9.0/contracts/proxy/utils/Initializable.sol>\\n\\npragma solidity ^0.8.24;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to the proxy constructor\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1))\\n    bytes32 private constant _INITIALIZABLE_STORAGE =\\n        0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0e;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error AlreadyInitialized();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `initializer()`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n        if (!(isTopLevelCall && initialized < 1) && !(address(this).code.length == 0 && initialized == 1)) {\\n            revert AlreadyInitialized();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert AlreadyInitialized();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert AlreadyInitialized();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := _INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdad09e5f773fa6940dbd8c28480f602a7eaa3c70d3da9d06df140187cbf5dad4\",\"license\":\"MIT\"},\"src/proxy/UUPSProxiable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\n/// @title UUPS Proxiable\\n/// @author Simon Malatrait <simon.malatrait@grenoble-inp.org>\\n/// @notice This contract implements an upgradeability mechanism designed for UUPS proxies.\\n///\\n/// @dev Adapted from <https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.9.0/contracts/proxy/utils/UUPSUpgradeable.sol>\\n/// The functions included here can perform an upgrade of an UUPS Proxy, when this contract is set as the implementation behind such a proxy.\\n///\\n/// IMPORTANT: A UUPS proxy requires its upgradeability functions to be in the implementation as opposed to the transparent proxy.\\n/// This means that if the proxy is upgraded to an implementation that does not support this interface, it will no longer be upgradeable.\\n///\\n/// A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n/// reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n/// `UUPSProxiable` with a custom implementation of upgrades.\\n///\\n/// The `_authorizeUpgrade` function must be overridden to include access restriction to the upgrade mechanism.\\nabstract contract UUPSProxiable {\\n    // ************************************* //\\n    // *             Event                 * //\\n    // ************************************* //\\n\\n    /// @notice Emitted when the `implementation` has been successfully upgraded.\\n    /// @param newImplementation Address of the new implementation the proxy is now forwarding calls to.\\n    event Upgraded(address indexed newImplementation);\\n\\n    // ************************************* //\\n    // *             Error                 * //\\n    // ************************************* //\\n\\n    /// @notice The call is from an unauthorized context.\\n    error UUPSUnauthorizedCallContext();\\n\\n    /// @notice The storage `slot` is unsupported as a UUID.\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /// @notice The `implementation` is not UUPS-compliant\\n    error InvalidImplementation(address implementation);\\n\\n    /// Failed Delegated call\\n    error FailedDelegateCall();\\n\\n    // ************************************* //\\n    // *             Storage               * //\\n    // ************************************* //\\n\\n    /// @dev Storage slot with the address of the current implementation.\\n    /// @dev This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n    /// @dev validated in the constructor.\\n    /// @dev NOTE: bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1)\\n    bytes32 private constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /// @dev Storage variable of the proxiable contract address.\\n    /// @dev It is used to check whether or not the current call is from the proxy.\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    // ************************************* //\\n    // *             Governance            * //\\n    // ************************************* //\\n\\n    /// @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract.\\n    /// @dev Called by {upgradeToAndCall}.\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    // ************************************* //\\n    // *         State Modifiers           * //\\n    // ************************************* //\\n\\n    /// @notice Upgrade mechanism including access control and UUPS-compliance.\\n    /// @param newImplementation Address of the new implementation contract.\\n    /// @param data Data used in a delegate call to `newImplementation` if non-empty. This will typically be an encoded\\n    /// function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n    /// @dev Reverts if the execution is not performed via delegatecall or the execution\\n    /// context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual {\\n        _authorizeUpgrade(newImplementation);\\n\\n        // Check that the execution is being performed through a delegatecall call and that the execution context is\\n        // a proxy contract with an implementation (as defined in ERC1967) pointing to self.\\n        if (address(this) == __self || _getImplementation() != __self) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n\\n        try UUPSProxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            // Store the new implementation address to the implementation storage slot.\\n            assembly {\\n                sstore(IMPLEMENTATION_SLOT, newImplementation)\\n            }\\n            emit Upgraded(newImplementation);\\n\\n            if (data.length != 0) {\\n                // The return data is not checked (checking, in case of success, that the newImplementation code is non-empty if the return data is empty) because the authorized callee is trusted.\\n                /// @custom:oz-upgrades-unsafe-allow delegatecall\\n                (bool success, ) = newImplementation.delegatecall(data);\\n                if (!success) {\\n                    revert FailedDelegateCall();\\n                }\\n            }\\n        } catch {\\n            revert InvalidImplementation(newImplementation);\\n        }\\n    }\\n\\n    // ************************************* //\\n    // *           Public Views            * //\\n    // ************************************* //\\n\\n    /// @notice Implementation of the ERC1822 `proxiableUUID` function. This returns the storage slot used by the\\n    /// implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n    ///\\n    /// @dev IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n    /// bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n    /// function revert if invoked through a proxy. This is guaranteed by the if statement.\\n    function proxiableUUID() external view virtual returns (bytes32) {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n        return IMPLEMENTATION_SLOT;\\n    }\\n\\n    /// @notice Returns the version of the implementation.\\n    /// @return Version string.\\n    function version() external view virtual returns (string memory);\\n\\n    // ************************************* //\\n    // *           Internal Views          * //\\n    // ************************************* //\\n\\n    function _getImplementation() internal view returns (address implementation) {\\n        assembly {\\n            implementation := sload(IMPLEMENTATION_SLOT)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa369061748e8a7b02873d597d4c78a2a09328111f04a97428b1c209e82cf5414\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a080604052346100c157306080525f5160206133bf5f395f51905f525460ff8160401c166100b3576002600160401b03196001600160401b03821601610060575b6040516132f990816100c682396080518181816117f601526118a60152f35b6001600160401b0319166001600160401b039081175f5160206133bf5f395f51905f525581527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a15f80610041565b62dc149f60e41b5f5260045ffd5b5f80fdfe6080806040526004361015610012575f80fd5b5f905f3560e01c9081630855bbe914612836575080630baa64d1146127e25780631200aabc146127b8578063149a5dc0146127a55780631c3db16d146126755780631cc3423a146126335780632621b9a2146126115780632d68efc9146125eb578063362c34791461222d5780634b2f0ea014611ad65780634e514a1b14611ab95780634f1ef2861461185557806352d1902d146117db57806354fd4d501461177a578063564a565d1461166e5780635c92e2f6146113fc57806365540b961461139a57806369f3f041146113095780636a8c9194146112725780636d4cd8ea1461111e57806372d610d9146110e35780637c04034e14610b915780638da5cb5b14610b6b5780638e42646014610b145780639146cd4714610aaf5780639d61ab6e14610a86578063a0d216d114610a68578063a6f9dae114610a11578063a7cc08fe14610997578063b34bfaa81461097a578063b6ede5401461067a578063b70020d61461064b578063ba66fde7146105f4578063be467604146105d7578063cf756fdf14610380578063d2b8035a146102ee578063da3beb8c146102cc578063e349ad30146102af578063f2f4eb2614610288578063f32ab92714610246578063f8abee10146102175763fc6f8f16146101ec575f80fd5b3461021457602036600319011261021457602061020a6004356129ee565b5054604051908152f35b80fd5b50346102145760203660031901126102145760ff60406020926004358152600584522054166040519015158152f35b50346102145760409081610259366129b4565b92908152600360205260038282205493610272856129ee565b5090835201602052205482519182526020820152f35b503461021457806003193601126102145760206001600160a01b0360015416604051908152f35b503461021457806003193601126102145760206040516127108152f35b50346102145760206102e66102e0366129b4565b90612fd2565b604051908152f35b5034610214576102fd366129b4565b916001600160a01b0360015416330361037257818152600360205260ff600261032960408420546129ee565b500154166103635760406bffffffffffffffffffffffff61034a8585612cec565b6001600160a01b03849392935193168352166020820152f35b8063070f7fa560e51b60049252fd5b80628448c760e31b60049252fd5b50346102145760803660031901126102145761039a61299e565b6024356001600160a01b0381168091036105d3576044356001600160a01b0381168091036105cf577ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0e549160ff8360401c16159267ffffffffffffffff811684806105c5575b1590816105a7575b5061057f5767ffffffffffffffff1981166001177ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0e5583610540575b507ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0e549360ff8560401c1615610518576001600160a01b03166001600160a01b03198654161785556001600160a01b031960015416176001556001600160a01b031960065416176006556064356007556104bc575080f35b68ff000000000000000019167ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0e557fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2602060405160018152a180f35b6004867fd7e6bcf8000000000000000000000000000000000000000000000000000000008152fd5b68ffffffffffffffffff191668010000000000000001177ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0e555f610444565b6004867f0dc149f0000000000000000000000000000000000000000000000000000000008152fd5b303b159150816105ba575b50155f610408565b60019150145f6105b2565b5060018110610400565b8380fd5b8280fd5b503461021457806003193601126102145760206040516113888152f35b50346102145760ff61063e604061063860209461061036612a73565b94918391935260038852610626828220546129ee565b50928152600383018852205490612ae1565b50612cd3565b5054166040519015158152f35b50346102145780600319360112610214575060075480610672575060206001604051908152f35b6020906102e6565b50346102145760803660031901126102145760043560443560243567ffffffffffffffff82116105cf57366023830112156105cf57816004013567ffffffffffffffff8111610976573660248285010111610976576001600160a01b0360015416330361096857600254680100000000000000008110156109545760018101600255610705816129ee565b508360018201556004810161071a8154612a0a565b601f811161090f575b508388601f82116001146108a6578991610898575b508460011b905f198660031b1c19161790555b6002810160ff1981541690558054602460206001600160a01b036001541660405192838092637e37c78b60e11b82528c60048301525afa90811561088d578991610857575b505f198101908111610843576107dd606095937fd3106f74c2d30a4b9230e756a3e78bde53865d40f6af4c479bb010ebaab58108989795936003938c5283820160205260408c2055612bca565b5001600160ff1982541617905586885260036020526040882055858752600560205260408720600160ff1982541617905580602460405195869485526040602086015282604086015201848401378181018301879052601f01601f19168101030190a280f35b602489634e487b7160e01b81526011600452fd5b90506020813d602011610885575b816108726020938361291c565b8101031261088157515f610790565b5f80fd5b3d9150610865565b6040513d8b823e3d90fd5b60249150870101355f610738565b828a5260208a20915085601f1981168b5b8a8282106108f2575050106108d6575b5050600184811b01905561074b565b8701602401355f19600387901b60f8161c191690555f806108c7565b8401602401358555600190940193602093840193899350016108b7565b81895260208920601f860160051c8101916020871061094a575b601f0160051c01905b81811061093f5750610723565b898155600101610932565b9091508190610929565b602486634e487b7160e01b81526041600452fd5b600485628448c760e31b8152fd5b8480fd5b50346102145780600319360112610214576020604051614e208152f35b5034610214576109db60406106386080936109b136612a73565b94918391935260036020526109c8828220546129ee565b5092815260038301602052205490612ae1565b5060ff815460026001840154930154604051936001600160a01b038360081c168552602085015260408401521615156060820152f35b503461021457602036600319011261021457610a2b61299e565b815490336001600160a01b03831603610a59576001600160a01b036001600160a01b03199116911617815580f35b600483630b2db9b760e31b8152fd5b50346102145780600319360112610214576020600754604051908152f35b5034610214576040610aa2610a9a366128fa565b5050916130b9565b8151908082526020820152f35b5034610214576040366003190112610214576004356001600160a01b0381160361021457602435908160011b9180830460021490151715610b005760018201809211610b0057602082604051908152f35b80634e487b7160e01b602492526011600452fd5b503461021457602036600319011261021457610b2e61299e565b6001600160a01b038254163303610b5c576001600160a01b03166001600160a01b0319600154161760015580f35b600482630b2db9b760e31b8152fd5b50346102145780600319360112610214576001600160a01b036020915416604051908152f35b50346102145760a03660031901126102145760043560243567ffffffffffffffff81116105d357610bc6903690600401612a42565b90916044359260843567ffffffffffffffff81116110df57610bec90369060040161295a565b92828652600360205260ff6002610c0660408920546129ee565b500154166110d0576001600160a01b036001541660405163564a565d60e01b815284600482015260a081602481855afa9081156110c55788916110a1575b50600581101561108d5760020361106557811561103d57838752600560205260ff6040882054161561102e578387526003602052604087205490610c87826129ee565b50906001820154881161101f5781545f1981019290831161100b5782610cac91612ae1565b509260405163564a565d60e01b815287600482015260a081602481865afa908b8215610fff5760c0926bffffffffffffffffffffffff9260249291610fcc575b506040519586938492630fad06e960e11b84521660048301525afa918215610fc1578a92610f8a575b50610d226064358a612b6e565b908a5b868110610e6b575050505050908160047fa000893c71384499023d2d7b21234f7b9e80c78e0330f357dcd667ff578bd3a4949301610d64838254612bbd565b905560028101908789528160205260408920610d81848254612bbd565b90558760018201928354908183145f14610de7575050506003915001805460ff8116610dda575b50505b610dd4610dc5604051938493604085526040850191613286565b828103602084015233966129ca565b0390a480f35b60ff191690555f80610da8565b828c528060205260408c2054828d528160205260408d2054145f14610e31575050506003915001805460ff811615610e21575b5050610dab565b60ff191660011790555f80610e1a565b828c528060205260408c2054918c5260205260408b205410610e56575b505050610dab565b600392550160ff1981541690555f8087610e4e565b610e80610e7982898b613276565b3587612cd3565b506001600160a01b0333915460081c1603610f7b578380610f4b575b610f235760ff610eb7610eb0838a8c613276565b3588612cd3565b505416610efb57808b6002610ed9610ed26001958c8e613276565b358a612cd3565b500155610eea610eb0828a8c613276565b50805460ff19168317905501610d25565b60048c7fb3808bab000000000000000000000000000000000000000000000000000000008152fd5b60048c7f953075a3000000000000000000000000000000000000000000000000000000008152fd5b50826001610f71610f5d848b8d613276565b3561063889610f6b886129ee565b50612ae1565b5001541415610e9c565b60048c638016bef760e01b8152fd5b610fad91925060c03d60c011610fba575b610fa5818361291c565b810190612c97565b505050509050905f610d15565b503d610f9b565b6040513d8c823e3d90fd5b610fee915060a03d60a011610ff8575b610fe6818361291c565b810190612b20565b505050505f610cec565b503d610fdc565b604051903d90823e3d90fd5b60248a634e487b7160e01b81526011600452fd5b600489637cd5012560e11b8152fd5b6004876333f97f8960e01b8152fd5b6004877fb7a08e6e000000000000000000000000000000000000000000000000000000008152fd5b6004877febd6a5e7000000000000000000000000000000000000000000000000000000008152fd5b602488634e487b7160e01b81526021600452fd5b6110ba915060a03d60a011610ff857610fe6818361291c565b50509150505f610c44565b6040513d8a823e3d90fd5b60048663070f7fa560e51b8152fd5b8580fd5b5034610214576020366003190112610214576001600160a01b03815416330361110f5760043560075580f35b80630b2db9b760e31b60049252fd5b503461021457602036600319011261021457600435808252600360205261114860408320546129ee565b5080545f1981019190821161125e579061116191612ae1565b50906001600160a01b0360015416906040519063564a565d60e01b8252600482015260a081602481855afa80156112535760246bffffffffffffffffffffffff9160c0938791611230575b506040519485938492630fad06e960e11b84521660048301525afa908115611225579260209381926111fe575b5050156111f45760046005820154915b015414604051908152f35b60048154916111e9565b61121891925060c03d60c011610fba57610fa5818361291c565b505050509050905f6111d9565b6040513d85823e3d90fd5b611249915060a03d60a011610ff857610fe6818361291c565b505050505f6111ac565b6040513d86823e3d90fd5b602484634e487b7160e01b81526011600452fd5b50346102145760603660031901126102145761128c61299e565b60443567ffffffffffffffff81116105d3576112ac90369060040161295a565b906001600160a01b038354163303610a5957818392916020849351920190602435905af16112d8612bf0565b50156112e15780f35b807f44125e5e0000000000000000000000000000000000000000000000000000000060049252fd5b50346102145761134a60c09161131e36612a73565b93918352600360205261133460408420546129ee565b5090835260038101602052604083205490612ae1565b509160018301549260ff60038201541692604060048301549160026005850154948054968352016020522054936040519586521515602086015260408501526060840152608083015260a0820152f35b5034610214576020366003190112610214576113b7600435612c1f565b90604051918291602083016020845282518091526020604085019301915b8181106113e3575050500390f35b82518452859450602093840193909201916001016113d5565b50346102145760603660031901126102145760043560243567ffffffffffffffff81116105d357611431903690600401612a42565b60449291923592828552600360205260ff600261145160408820546129ee565b5001541661165f57602460a06001600160a01b03600154166040519283809263564a565d60e01b82528860048301525afa908115611654578691611630575b50600581101561161c576001036115f45783156115cc57828552600560205260ff604086205416156115bd5782855260036020526114d160408620546129ee565b5080545f198101919082116115a957906114ea91612ae1565b50855b83811061154d57507f05cc2f1c94966f1c961b410a50f3d3ffb64501346753a258177097ea23707f089291600561153e920161152a848254612bbd565b905560405192604084526040840191613286565b9360208201528033940390a380f35b61156261155b828686613276565b3583612cd3565b506001600160a01b0333915460081c160361159a578086600161159161158a82958989613276565b3586612cd3565b500155016114ed565b600487638016bef760e01b8152fd5b602487634e487b7160e01b81526011600452fd5b6004856333f97f8960e01b8152fd5b6004857f37b5b73d000000000000000000000000000000000000000000000000000000008152fd5b6004857f97ab7f79000000000000000000000000000000000000000000000000000000008152fd5b602486634e487b7160e01b81526021600452fd5b611649915060a03d60a011610ff857610fe6818361291c565b50509150505f611490565b6040513d88823e3d90fd5b60048563070f7fa560e51b8152fd5b50346102145760203660031901126102145760043560025481101561177657611696906129ee565b5090600182015490600460ff60028501541693019060405191818154916116bc83612a0a565b808652926001811690811561174c575060011461170b575b505050906116e78161170793038261291c565b6040519384938452151560208401526060604084015260608301906129ca565b0390f35b815260208120939250905b808210611732575090915081016020016116e7826117076116d4565b919260018160209254838588010152019101909291611716565b869550611707969350602092506116e794915060ff191682840152151560051b82010192936116d4565b5080fd5b50346102145780600319360112610214575061170760405161179d60408261291c565b600581527f322e302e3000000000000000000000000000000000000000000000000000000060208201526040519182916020835260208301906129ca565b50346102145780600319360112610214576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036118465760206040517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152f35b8063703e46dd60e11b60049252fd5b5060403660031901126102145761186a61299e565b9060243567ffffffffffffffff81116117765761188b90369060040161295a565b6001600160a01b038254163303610b5c576001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016803014908115611a84575b50611a75576001600160a01b03831690604051937f52d1902d000000000000000000000000000000000000000000000000000000008552602085600481865afa80958596611a41575b5061194b57602484847f0c760937000000000000000000000000000000000000000000000000000000008252600452fd5b90917f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8503611a1557839450817f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8480a2815190816119ce575b5050505080f35b6020849301905af46119de612bf0565b50156119ed57805f80806119c7565b807f736436ba0000000000000000000000000000000000000000000000000000000060049252fd5b602484867faa1d49a4000000000000000000000000000000000000000000000000000000008252600452fd5b9095506020813d602011611a6d575b81611a5d6020938361291c565b810103126109765751945f61191a565b3d9150611a50565b60048263703e46dd60e11b8152fd5b90506001600160a01b037f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc541614155f6118d1565b503461021457602036600319011261021457602090604051908152f35b50611ae0366129b4565b90805f52600360205260ff6002611afa60405f20546129ee565b5001541661221e57805f526003602052611b1760405f20546129ee565b509060018201908154841161220f57805f52600560205260ff60405f20541615612200576001600160a01b036001541660405163afe15cfb60e01b8152826004820152604081602481855afa908115611e61575f905f926121ce575b5080421080156121c4575b61219c57604051631c3db16d60e01b8152846004820152606081602481305afa8015611e615788915f9161216b575b5003612106575050612710945b84545f1981019081116120be57611bd19086612ae1565b5060405191637e37c78b60e11b8352846004840152602083602481875afa928315611e61575f936120d2575b505f1983018381116120be576007830198825f528960205260ff60405f205416612096576020602496604051978880927f59ec827e0000000000000000000000000000000000000000000000000000000082528b60048301525afa958615611e61575f96612060575b50612710611c77611c7e9288612ab0565b0486612bbd565b985f996006850190845f528160205260405f20548111611fea575b6001600160a01b0333165f526008860160205260405f20855f5260205260405f20611cc58d8254612bbd565b9055845f528160205260405f20611cdd8d8254612bbd565b9055845f528160205260405f20541015611f34575b505050506001600a82015411611d37575b505050505050803411611d14575080f35b611d21611d349134612aa3565b6001600160a01b03600654169033613173565b80f35b600901611d45838254612aa3565b9055602460206001600160a01b0360015416604051928380927f19b815290000000000000000000000000000000000000000000000000000000082528860048301525afa908115611e61575f91611efa575b5015611ecc575060028401805460ff191660011790555b60046001600160a01b036001541693549401833b15610881576040519485937fc356990200000000000000000000000000000000000000000000000000000000855260048501526024840152606060448401525f90805490611e0f82612a0a565b918260648701526001811690815f14611ea75750600114611e6c575b50505f939183809203925af18015611e6157611e4c575b8080808080611d03565b611e599192505f9061291c565b5f905f611e42565b6040513d5f823e3d90fd5b5f908152602081209092505b818310611e8d57505082016084018183611e2b565b805460848489010152869450602090920191600101611e78565b60ff191660848088019190915292151560051b86019092019250839150849050611e2b565b8454905f526003850160205260405f20556003611ee885612bca565b5001805460ff19166001179055611dae565b90506020813d602011611f2c575b81611f156020938361291c565b8101031261088157611f2690612b13565b5f611d97565b3d9150611f08565b835f5260205260405f2054611f4e60098601918254612bbd565b9055600a8401805468010000000000000000811015611fd65760018101808355811015611fc25784915f5260205f200155825f5260205260405f20600160ff19825416179055857fed764996238e4c1c873ae3af7ae2f00f1f6f4f10b9ac7d4bbea4a764c5dea0095f80a45f808080611cf2565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52604160045260245ffd5b9a50835f528060205261200160405f20548c612aa3565b34101561204557349a5b8b604051908682526020820152848a7fcae597f39a3ad75c2e10d46b031f023c5c2babcd58ca0491b122acda3968d4c060403394a4611c99565b835f528060205261205a60405f20548c612aa3565b9a61200b565b9095506020813d60201161208e575b8161207c6020938361291c565b81010312610881575194612710611c66565b3d915061206f565b7fbcdf54db000000000000000000000000000000000000000000000000000000005f5260045ffd5b634e487b7160e01b5f52601160045260245ffd5b9092506020813d6020116120fe575b816120ee6020938361291c565b810103126108815751915f611bfd565b3d91506120e1565b8061211461211a9242612aa3565b92612aa3565b61138881029080820461138814901517156120be576127109004111561214357614e2094611bba565b7f508aa06c000000000000000000000000000000000000000000000000000000005f5260045ffd5b61218d915060603d606011612195575b612185818361291c565b810190612b94565b50505f611bad565b503d61217b565b7f13e72a50000000000000000000000000000000000000000000000000000000005f5260045ffd5b5081421015611b7e565b90506121f2915060403d6040116121f9575b6121ea818361291c565b810190612a8d565b905f611b73565b503d6121e0565b6333f97f8960e01b5f5260045ffd5b637cd5012560e11b5f5260045ffd5b63070f7fa560e51b5f5260045ffd5b34610881576080366003190112610881576024356004356001600160a01b03821680830361088157604435606435925f936001600160a01b03600154169460405163564a565d60e01b815283600482015260a0816024818a5afa908115611e61575f916125c7575b501561259f576040517f5c975abb0000000000000000000000000000000000000000000000000000000081526020816004818a5afa908115611e61575f91612565575b5061253d57825f52600560205260ff60405f2054161561220057825f5260036020526024606061232461230e60405f20546129ee565b50875f526003810160205260405f205490612ae1565b509760405192838092631c3db16d60e01b82528860048301525afa908115611e61575f9161251c575b506007870190835f528160205260ff60405f205416155f146123ff57505050602095845f5260088601875260405f20825f528752600860405f2054965b865f5201875260405f20825f5287525f6040812055856123af575b8686604051908152f35b7f54b3cab3cb5c4aca3209db1151caff092e878011202e43a36782d4ebe0b963ae916123ea604092886001600160a01b036006541691613173565b81519081528688820152a482808080806123a5565b83810361246d5750505060209560068601825f5280885260405f205415155f146124645761245e600891875f528289018a5260405f20855f528a5261244d60405f205460098b015490612ab0565b90855f528a5260405f205490612ac3565b9661238a565b5060085f61245e565b5f9792975260205260ff60405f2054161561248e575b95600860209761238a565b9450835f526008850160205260405f20815f526020526124b760405f2054600987015490612ab0565b956006860196600a870197885415611fc257885f5260205f20545f528060205260405f205491895460011015611fc25761250c6008936125129360209c5f5260018d5f2001545f528c5260405f205490612bbd565b90612ac3565b9691975050612483565b612535915060603d60601161219557612185818361291c565b50508861234d565b7f88226c22000000000000000000000000000000000000000000000000000000005f5260045ffd5b90506020813d602011612597575b816125806020938361291c565b810103126108815761259190612b13565b886122d8565b3d9150612573565b7f8a7dc9ee000000000000000000000000000000000000000000000000000000005f5260045ffd5b6125e0915060a03d60a011610ff857610fe6818361291c565b509250505088612295565b34610881575f3660031901126108815760206001600160a01b0360065416604051908152f35b34610881575f36600319011261088157602060ff600454166040519015158152f35b346108815760603660031901126108815760443567ffffffffffffffff81116108815761266490369060040161295a565b5060206102e6602435600435612b6e565b34610881576020366003190112610881576004355f90805f5260036020526126a060405f20546129ee565b5080545f1981019081116120be576126b791612ae1565b50600381015460ff169290831561279c57505f5b91602460a06001600160a01b03600154166040519283809263564a565d60e01b82528660048301525afa908115611e61575f91612778575b5060058110156127645760041461272f575b506060926040519283521515602083015215156040820152f35b61273890612c1f565b9283516001811461274b575b5092612715565b9250505015611fc2576020015160609060015f84612744565b634e487b7160e01b5f52602160045260245ffd5b612791915060a03d60a011610ff857610fe6818361291c565b505091505085612703565b600101546126cb565b346108815760206102e6610a9a366128fa565b34610881576020366003190112610881576004355f526003602052602060405f2054604051908152f35b34610881576020366003190112610881576004355f52600360205261280a60405f20546129ee565b5080545f198101919082116120be5760209161282591612ae1565b506005810154905414604051908152f35b3461088157602036600319011261088157600435906040816024816001600160a01b036001541663afe15cfb60e01b82528660048301525afa918215611e61575f915f936128d3575b5061288990612c1f565b5115908161289f575b6020826040519015158152f35b6128ae91506121148142612aa3565b9061138882029180830461138814901517156120be5761271060209204111582612892565b6128f2919350612889925060403d6040116121f9576121ea818361291c565b92909161287f565b60a0906003190112610881576004359060243590604435906064359060843590565b90601f8019910116810190811067ffffffffffffffff821117611fd657604052565b67ffffffffffffffff8111611fd657601f01601f191660200190565b81601f82011215610881576020813591016129748261293e565b92612982604051948561291c565b8284528282011161088157815f92602092838601378301015290565b600435906001600160a01b038216820361088157565b6040906003190112610881576004359060243590565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b600254811015611fc25760025f52600f60205f20910201905f90565b90600182811c92168015612a38575b6020831014612a2457565b634e487b7160e01b5f52602260045260245ffd5b91607f1691612a19565b9181601f840112156108815782359167ffffffffffffffff8311610881576020808501948460051b01011161088157565b606090600319011261088157600435906024359060443590565b9190826040910312610881576020825192015190565b919082039182116120be57565b818102929181159184041417156120be57565b8115612acd570490565b634e487b7160e01b5f52601260045260245ffd5b8054821015611fc2575f52601660205f20910201905f90565b51906bffffffffffffffffffffffff8216820361088157565b5190811515820361088157565b908160a091031261088157612b3481612afa565b9160208201516001600160a01b038116810361088157916040810151600581101561088157916080612b6860608401612b13565b92015190565b906040519060208201928352604082015260408152612b8e60608261291c565b51902090565b9081606091031261088157805191612bba6040612bb360208501612b13565b9301612b13565b90565b919082018092116120be57565b805468010000000000000000811015611fd657612bec91600182018155612ae1565b9091565b3d15612c1a573d90612c018261293e565b91612c0f604051938461291c565b82523d5f602084013e565b606090565b5f526003602052612c3360405f20546129ee565b5080545f198101919082116120be57600a91612c4e91612ae1565b5001604051808260208294549384815201905f5260205f20925f5b818110612c7e575050612bba9250038261291c565b8454835260019485019486945060209093019201612c69565b91908260c091031261088157612cac82612afa565b91612cb960208201612b13565b9160408201519160608101519160a0608083015192015190565b8054821015611fc2575f52600d60205f20910201905f90565b9091815f526003602052612d0360405f20546129ee565b5080545f1981019081116120be57612d1a91612ae1565b506001600160a01b03600154166040517f2e1daf2f000000000000000000000000000000000000000000000000000000008152602081600481855afa908115611e61575f91612f8d575b5060a06024926040519384809263564a565d60e01b82528960048301525afa918215611e61576040926bffffffffffffffffffffffff926064925f92612f5f575b506001600160a01b03908551998a9586947fd045e0020000000000000000000000000000000000000000000000000000000086521660048501528960248501526044840152165afa928315611e61575f945f94612f0c575b5083856001600160a01b03811615612f0457505060045460ff1615612efc575f526003602052612e3060405f20546129ee565b5080545f198101919082116120be57600b91612e4b91612ae1565b506001600160a01b0386165f520160205260ff60405f205416155b15612ef65780549068010000000000000000821015611fd657612e91826001600b9401835582612cd3565b5080547fffffffffffffffffffffff0000000000000000000000000000000000000000ff74ffffffffffffffffffffffffffffffffffffffff008860081b1691161790556001600160a01b0385165f520160205260405f20600160ff19825416179055565b505f9250565b506001612e66565b955093505050565b945092506040843d604011612f57575b81612f296040938361291c565b81010312610881578351936001600160a01b0385168503610881576020612f509101612afa565b925f612dfd565b3d9150612f1c565b6001600160a01b03919250612f829060a03d60a011610ff857610fe6818361291c565b505050509190612da5565b90506020813d602011612fca575b81612fa86020938361291c565b810103126108815751906001600160a01b0382168203610881579060a0612d64565b3d9150612f9b565b9061300290825f526003602052612fec60405f20546129ee565b50905f526003810160205260405f205490612ae1565b5060606001600160a01b036001541692602460405180958193631c3db16d60e01b835260048301525afa918215611e61575f905f93613094575b5060048201549283158015613075575b1561305957505050505f90565b1561306357505090565b600292505f520160205260405f205490565b508015801561304c5750815f526002830160205260405f20541561304c565b90506130b091925060603d60601161219557612185818361291c565b5091905f61303c565b916106386130d692845f526003602052612fec60405f20546129ee565b509060606001600160a01b036001541691602460405180948193631c3db16d60e01b835260048301525afa908115611e61575f905f92613150575b5060ff8354169283613131575b5050505f1461312d5761271090565b5f90565b600201541491508115613148575b505f808061311e565b90505f61313f565b905061316b915060603d60601161219557612185818361291c565b50905f613111565b6001600160a01b0316905f925f8284811561326c575b5f92839283928392f1613266576001600160a01b031691823b15610881576040517fd0e30db00000000000000000000000000000000000000000000000000000000081525f8160048186885af18015611e6157613251575b50823b156105cf5790604484928360405195869485937fa9059cbb000000000000000000000000000000000000000000000000000000008552600485015260248401525af1801561324657613234575050565b61323f82809261291c565b6102145750565b6040513d84823e3d90fd5b61325e9194505f9061291c565b5f925f6131e1565b50505050565b6108fc9250613189565b9190811015611fc25760051b0190565b90918281527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83116108815760209260051b80928483013701019056fea2646970667358221220b5aaba208006c2770b2a559bb6595fe7390db7c206ee67f59edf25055757c98c64736f6c634300081e0033f0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0e",
  "deployedBytecode": "0x6080806040526004361015610012575f80fd5b5f905f3560e01c9081630855bbe914612836575080630baa64d1146127e25780631200aabc146127b8578063149a5dc0146127a55780631c3db16d146126755780631cc3423a146126335780632621b9a2146126115780632d68efc9146125eb578063362c34791461222d5780634b2f0ea014611ad65780634e514a1b14611ab95780634f1ef2861461185557806352d1902d146117db57806354fd4d501461177a578063564a565d1461166e5780635c92e2f6146113fc57806365540b961461139a57806369f3f041146113095780636a8c9194146112725780636d4cd8ea1461111e57806372d610d9146110e35780637c04034e14610b915780638da5cb5b14610b6b5780638e42646014610b145780639146cd4714610aaf5780639d61ab6e14610a86578063a0d216d114610a68578063a6f9dae114610a11578063a7cc08fe14610997578063b34bfaa81461097a578063b6ede5401461067a578063b70020d61461064b578063ba66fde7146105f4578063be467604146105d7578063cf756fdf14610380578063d2b8035a146102ee578063da3beb8c146102cc578063e349ad30146102af578063f2f4eb2614610288578063f32ab92714610246578063f8abee10146102175763fc6f8f16146101ec575f80fd5b3461021457602036600319011261021457602061020a6004356129ee565b5054604051908152f35b80fd5b50346102145760203660031901126102145760ff60406020926004358152600584522054166040519015158152f35b50346102145760409081610259366129b4565b92908152600360205260038282205493610272856129ee565b5090835201602052205482519182526020820152f35b503461021457806003193601126102145760206001600160a01b0360015416604051908152f35b503461021457806003193601126102145760206040516127108152f35b50346102145760206102e66102e0366129b4565b90612fd2565b604051908152f35b5034610214576102fd366129b4565b916001600160a01b0360015416330361037257818152600360205260ff600261032960408420546129ee565b500154166103635760406bffffffffffffffffffffffff61034a8585612cec565b6001600160a01b03849392935193168352166020820152f35b8063070f7fa560e51b60049252fd5b80628448c760e31b60049252fd5b50346102145760803660031901126102145761039a61299e565b6024356001600160a01b0381168091036105d3576044356001600160a01b0381168091036105cf577ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0e549160ff8360401c16159267ffffffffffffffff811684806105c5575b1590816105a7575b5061057f5767ffffffffffffffff1981166001177ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0e5583610540575b507ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0e549360ff8560401c1615610518576001600160a01b03166001600160a01b03198654161785556001600160a01b031960015416176001556001600160a01b031960065416176006556064356007556104bc575080f35b68ff000000000000000019167ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0e557fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2602060405160018152a180f35b6004867fd7e6bcf8000000000000000000000000000000000000000000000000000000008152fd5b68ffffffffffffffffff191668010000000000000001177ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0e555f610444565b6004867f0dc149f0000000000000000000000000000000000000000000000000000000008152fd5b303b159150816105ba575b50155f610408565b60019150145f6105b2565b5060018110610400565b8380fd5b8280fd5b503461021457806003193601126102145760206040516113888152f35b50346102145760ff61063e604061063860209461061036612a73565b94918391935260038852610626828220546129ee565b50928152600383018852205490612ae1565b50612cd3565b5054166040519015158152f35b50346102145780600319360112610214575060075480610672575060206001604051908152f35b6020906102e6565b50346102145760803660031901126102145760043560443560243567ffffffffffffffff82116105cf57366023830112156105cf57816004013567ffffffffffffffff8111610976573660248285010111610976576001600160a01b0360015416330361096857600254680100000000000000008110156109545760018101600255610705816129ee565b508360018201556004810161071a8154612a0a565b601f811161090f575b508388601f82116001146108a6578991610898575b508460011b905f198660031b1c19161790555b6002810160ff1981541690558054602460206001600160a01b036001541660405192838092637e37c78b60e11b82528c60048301525afa90811561088d578991610857575b505f198101908111610843576107dd606095937fd3106f74c2d30a4b9230e756a3e78bde53865d40f6af4c479bb010ebaab58108989795936003938c5283820160205260408c2055612bca565b5001600160ff1982541617905586885260036020526040882055858752600560205260408720600160ff1982541617905580602460405195869485526040602086015282604086015201848401378181018301879052601f01601f19168101030190a280f35b602489634e487b7160e01b81526011600452fd5b90506020813d602011610885575b816108726020938361291c565b8101031261088157515f610790565b5f80fd5b3d9150610865565b6040513d8b823e3d90fd5b60249150870101355f610738565b828a5260208a20915085601f1981168b5b8a8282106108f2575050106108d6575b5050600184811b01905561074b565b8701602401355f19600387901b60f8161c191690555f806108c7565b8401602401358555600190940193602093840193899350016108b7565b81895260208920601f860160051c8101916020871061094a575b601f0160051c01905b81811061093f5750610723565b898155600101610932565b9091508190610929565b602486634e487b7160e01b81526041600452fd5b600485628448c760e31b8152fd5b8480fd5b50346102145780600319360112610214576020604051614e208152f35b5034610214576109db60406106386080936109b136612a73565b94918391935260036020526109c8828220546129ee565b5092815260038301602052205490612ae1565b5060ff815460026001840154930154604051936001600160a01b038360081c168552602085015260408401521615156060820152f35b503461021457602036600319011261021457610a2b61299e565b815490336001600160a01b03831603610a59576001600160a01b036001600160a01b03199116911617815580f35b600483630b2db9b760e31b8152fd5b50346102145780600319360112610214576020600754604051908152f35b5034610214576040610aa2610a9a366128fa565b5050916130b9565b8151908082526020820152f35b5034610214576040366003190112610214576004356001600160a01b0381160361021457602435908160011b9180830460021490151715610b005760018201809211610b0057602082604051908152f35b80634e487b7160e01b602492526011600452fd5b503461021457602036600319011261021457610b2e61299e565b6001600160a01b038254163303610b5c576001600160a01b03166001600160a01b0319600154161760015580f35b600482630b2db9b760e31b8152fd5b50346102145780600319360112610214576001600160a01b036020915416604051908152f35b50346102145760a03660031901126102145760043560243567ffffffffffffffff81116105d357610bc6903690600401612a42565b90916044359260843567ffffffffffffffff81116110df57610bec90369060040161295a565b92828652600360205260ff6002610c0660408920546129ee565b500154166110d0576001600160a01b036001541660405163564a565d60e01b815284600482015260a081602481855afa9081156110c55788916110a1575b50600581101561108d5760020361106557811561103d57838752600560205260ff6040882054161561102e578387526003602052604087205490610c87826129ee565b50906001820154881161101f5781545f1981019290831161100b5782610cac91612ae1565b509260405163564a565d60e01b815287600482015260a081602481865afa908b8215610fff5760c0926bffffffffffffffffffffffff9260249291610fcc575b506040519586938492630fad06e960e11b84521660048301525afa918215610fc1578a92610f8a575b50610d226064358a612b6e565b908a5b868110610e6b575050505050908160047fa000893c71384499023d2d7b21234f7b9e80c78e0330f357dcd667ff578bd3a4949301610d64838254612bbd565b905560028101908789528160205260408920610d81848254612bbd565b90558760018201928354908183145f14610de7575050506003915001805460ff8116610dda575b50505b610dd4610dc5604051938493604085526040850191613286565b828103602084015233966129ca565b0390a480f35b60ff191690555f80610da8565b828c528060205260408c2054828d528160205260408d2054145f14610e31575050506003915001805460ff811615610e21575b5050610dab565b60ff191660011790555f80610e1a565b828c528060205260408c2054918c5260205260408b205410610e56575b505050610dab565b600392550160ff1981541690555f8087610e4e565b610e80610e7982898b613276565b3587612cd3565b506001600160a01b0333915460081c1603610f7b578380610f4b575b610f235760ff610eb7610eb0838a8c613276565b3588612cd3565b505416610efb57808b6002610ed9610ed26001958c8e613276565b358a612cd3565b500155610eea610eb0828a8c613276565b50805460ff19168317905501610d25565b60048c7fb3808bab000000000000000000000000000000000000000000000000000000008152fd5b60048c7f953075a3000000000000000000000000000000000000000000000000000000008152fd5b50826001610f71610f5d848b8d613276565b3561063889610f6b886129ee565b50612ae1565b5001541415610e9c565b60048c638016bef760e01b8152fd5b610fad91925060c03d60c011610fba575b610fa5818361291c565b810190612c97565b505050509050905f610d15565b503d610f9b565b6040513d8c823e3d90fd5b610fee915060a03d60a011610ff8575b610fe6818361291c565b810190612b20565b505050505f610cec565b503d610fdc565b604051903d90823e3d90fd5b60248a634e487b7160e01b81526011600452fd5b600489637cd5012560e11b8152fd5b6004876333f97f8960e01b8152fd5b6004877fb7a08e6e000000000000000000000000000000000000000000000000000000008152fd5b6004877febd6a5e7000000000000000000000000000000000000000000000000000000008152fd5b602488634e487b7160e01b81526021600452fd5b6110ba915060a03d60a011610ff857610fe6818361291c565b50509150505f610c44565b6040513d8a823e3d90fd5b60048663070f7fa560e51b8152fd5b8580fd5b5034610214576020366003190112610214576001600160a01b03815416330361110f5760043560075580f35b80630b2db9b760e31b60049252fd5b503461021457602036600319011261021457600435808252600360205261114860408320546129ee565b5080545f1981019190821161125e579061116191612ae1565b50906001600160a01b0360015416906040519063564a565d60e01b8252600482015260a081602481855afa80156112535760246bffffffffffffffffffffffff9160c0938791611230575b506040519485938492630fad06e960e11b84521660048301525afa908115611225579260209381926111fe575b5050156111f45760046005820154915b015414604051908152f35b60048154916111e9565b61121891925060c03d60c011610fba57610fa5818361291c565b505050509050905f6111d9565b6040513d85823e3d90fd5b611249915060a03d60a011610ff857610fe6818361291c565b505050505f6111ac565b6040513d86823e3d90fd5b602484634e487b7160e01b81526011600452fd5b50346102145760603660031901126102145761128c61299e565b60443567ffffffffffffffff81116105d3576112ac90369060040161295a565b906001600160a01b038354163303610a5957818392916020849351920190602435905af16112d8612bf0565b50156112e15780f35b807f44125e5e0000000000000000000000000000000000000000000000000000000060049252fd5b50346102145761134a60c09161131e36612a73565b93918352600360205261133460408420546129ee565b5090835260038101602052604083205490612ae1565b509160018301549260ff60038201541692604060048301549160026005850154948054968352016020522054936040519586521515602086015260408501526060840152608083015260a0820152f35b5034610214576020366003190112610214576113b7600435612c1f565b90604051918291602083016020845282518091526020604085019301915b8181106113e3575050500390f35b82518452859450602093840193909201916001016113d5565b50346102145760603660031901126102145760043560243567ffffffffffffffff81116105d357611431903690600401612a42565b60449291923592828552600360205260ff600261145160408820546129ee565b5001541661165f57602460a06001600160a01b03600154166040519283809263564a565d60e01b82528860048301525afa908115611654578691611630575b50600581101561161c576001036115f45783156115cc57828552600560205260ff604086205416156115bd5782855260036020526114d160408620546129ee565b5080545f198101919082116115a957906114ea91612ae1565b50855b83811061154d57507f05cc2f1c94966f1c961b410a50f3d3ffb64501346753a258177097ea23707f089291600561153e920161152a848254612bbd565b905560405192604084526040840191613286565b9360208201528033940390a380f35b61156261155b828686613276565b3583612cd3565b506001600160a01b0333915460081c160361159a578086600161159161158a82958989613276565b3586612cd3565b500155016114ed565b600487638016bef760e01b8152fd5b602487634e487b7160e01b81526011600452fd5b6004856333f97f8960e01b8152fd5b6004857f37b5b73d000000000000000000000000000000000000000000000000000000008152fd5b6004857f97ab7f79000000000000000000000000000000000000000000000000000000008152fd5b602486634e487b7160e01b81526021600452fd5b611649915060a03d60a011610ff857610fe6818361291c565b50509150505f611490565b6040513d88823e3d90fd5b60048563070f7fa560e51b8152fd5b50346102145760203660031901126102145760043560025481101561177657611696906129ee565b5090600182015490600460ff60028501541693019060405191818154916116bc83612a0a565b808652926001811690811561174c575060011461170b575b505050906116e78161170793038261291c565b6040519384938452151560208401526060604084015260608301906129ca565b0390f35b815260208120939250905b808210611732575090915081016020016116e7826117076116d4565b919260018160209254838588010152019101909291611716565b869550611707969350602092506116e794915060ff191682840152151560051b82010192936116d4565b5080fd5b50346102145780600319360112610214575061170760405161179d60408261291c565b600581527f322e302e3000000000000000000000000000000000000000000000000000000060208201526040519182916020835260208301906129ca565b50346102145780600319360112610214576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036118465760206040517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152f35b8063703e46dd60e11b60049252fd5b5060403660031901126102145761186a61299e565b9060243567ffffffffffffffff81116117765761188b90369060040161295a565b6001600160a01b038254163303610b5c576001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016803014908115611a84575b50611a75576001600160a01b03831690604051937f52d1902d000000000000000000000000000000000000000000000000000000008552602085600481865afa80958596611a41575b5061194b57602484847f0c760937000000000000000000000000000000000000000000000000000000008252600452fd5b90917f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8503611a1557839450817f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8480a2815190816119ce575b5050505080f35b6020849301905af46119de612bf0565b50156119ed57805f80806119c7565b807f736436ba0000000000000000000000000000000000000000000000000000000060049252fd5b602484867faa1d49a4000000000000000000000000000000000000000000000000000000008252600452fd5b9095506020813d602011611a6d575b81611a5d6020938361291c565b810103126109765751945f61191a565b3d9150611a50565b60048263703e46dd60e11b8152fd5b90506001600160a01b037f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc541614155f6118d1565b503461021457602036600319011261021457602090604051908152f35b50611ae0366129b4565b90805f52600360205260ff6002611afa60405f20546129ee565b5001541661221e57805f526003602052611b1760405f20546129ee565b509060018201908154841161220f57805f52600560205260ff60405f20541615612200576001600160a01b036001541660405163afe15cfb60e01b8152826004820152604081602481855afa908115611e61575f905f926121ce575b5080421080156121c4575b61219c57604051631c3db16d60e01b8152846004820152606081602481305afa8015611e615788915f9161216b575b5003612106575050612710945b84545f1981019081116120be57611bd19086612ae1565b5060405191637e37c78b60e11b8352846004840152602083602481875afa928315611e61575f936120d2575b505f1983018381116120be576007830198825f528960205260ff60405f205416612096576020602496604051978880927f59ec827e0000000000000000000000000000000000000000000000000000000082528b60048301525afa958615611e61575f96612060575b50612710611c77611c7e9288612ab0565b0486612bbd565b985f996006850190845f528160205260405f20548111611fea575b6001600160a01b0333165f526008860160205260405f20855f5260205260405f20611cc58d8254612bbd565b9055845f528160205260405f20611cdd8d8254612bbd565b9055845f528160205260405f20541015611f34575b505050506001600a82015411611d37575b505050505050803411611d14575080f35b611d21611d349134612aa3565b6001600160a01b03600654169033613173565b80f35b600901611d45838254612aa3565b9055602460206001600160a01b0360015416604051928380927f19b815290000000000000000000000000000000000000000000000000000000082528860048301525afa908115611e61575f91611efa575b5015611ecc575060028401805460ff191660011790555b60046001600160a01b036001541693549401833b15610881576040519485937fc356990200000000000000000000000000000000000000000000000000000000855260048501526024840152606060448401525f90805490611e0f82612a0a565b918260648701526001811690815f14611ea75750600114611e6c575b50505f939183809203925af18015611e6157611e4c575b8080808080611d03565b611e599192505f9061291c565b5f905f611e42565b6040513d5f823e3d90fd5b5f908152602081209092505b818310611e8d57505082016084018183611e2b565b805460848489010152869450602090920191600101611e78565b60ff191660848088019190915292151560051b86019092019250839150849050611e2b565b8454905f526003850160205260405f20556003611ee885612bca565b5001805460ff19166001179055611dae565b90506020813d602011611f2c575b81611f156020938361291c565b8101031261088157611f2690612b13565b5f611d97565b3d9150611f08565b835f5260205260405f2054611f4e60098601918254612bbd565b9055600a8401805468010000000000000000811015611fd65760018101808355811015611fc25784915f5260205f200155825f5260205260405f20600160ff19825416179055857fed764996238e4c1c873ae3af7ae2f00f1f6f4f10b9ac7d4bbea4a764c5dea0095f80a45f808080611cf2565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52604160045260245ffd5b9a50835f528060205261200160405f20548c612aa3565b34101561204557349a5b8b604051908682526020820152848a7fcae597f39a3ad75c2e10d46b031f023c5c2babcd58ca0491b122acda3968d4c060403394a4611c99565b835f528060205261205a60405f20548c612aa3565b9a61200b565b9095506020813d60201161208e575b8161207c6020938361291c565b81010312610881575194612710611c66565b3d915061206f565b7fbcdf54db000000000000000000000000000000000000000000000000000000005f5260045ffd5b634e487b7160e01b5f52601160045260245ffd5b9092506020813d6020116120fe575b816120ee6020938361291c565b810103126108815751915f611bfd565b3d91506120e1565b8061211461211a9242612aa3565b92612aa3565b61138881029080820461138814901517156120be576127109004111561214357614e2094611bba565b7f508aa06c000000000000000000000000000000000000000000000000000000005f5260045ffd5b61218d915060603d606011612195575b612185818361291c565b810190612b94565b50505f611bad565b503d61217b565b7f13e72a50000000000000000000000000000000000000000000000000000000005f5260045ffd5b5081421015611b7e565b90506121f2915060403d6040116121f9575b6121ea818361291c565b810190612a8d565b905f611b73565b503d6121e0565b6333f97f8960e01b5f5260045ffd5b637cd5012560e11b5f5260045ffd5b63070f7fa560e51b5f5260045ffd5b34610881576080366003190112610881576024356004356001600160a01b03821680830361088157604435606435925f936001600160a01b03600154169460405163564a565d60e01b815283600482015260a0816024818a5afa908115611e61575f916125c7575b501561259f576040517f5c975abb0000000000000000000000000000000000000000000000000000000081526020816004818a5afa908115611e61575f91612565575b5061253d57825f52600560205260ff60405f2054161561220057825f5260036020526024606061232461230e60405f20546129ee565b50875f526003810160205260405f205490612ae1565b509760405192838092631c3db16d60e01b82528860048301525afa908115611e61575f9161251c575b506007870190835f528160205260ff60405f205416155f146123ff57505050602095845f5260088601875260405f20825f528752600860405f2054965b865f5201875260405f20825f5287525f6040812055856123af575b8686604051908152f35b7f54b3cab3cb5c4aca3209db1151caff092e878011202e43a36782d4ebe0b963ae916123ea604092886001600160a01b036006541691613173565b81519081528688820152a482808080806123a5565b83810361246d5750505060209560068601825f5280885260405f205415155f146124645761245e600891875f528289018a5260405f20855f528a5261244d60405f205460098b015490612ab0565b90855f528a5260405f205490612ac3565b9661238a565b5060085f61245e565b5f9792975260205260ff60405f2054161561248e575b95600860209761238a565b9450835f526008850160205260405f20815f526020526124b760405f2054600987015490612ab0565b956006860196600a870197885415611fc257885f5260205f20545f528060205260405f205491895460011015611fc25761250c6008936125129360209c5f5260018d5f2001545f528c5260405f205490612bbd565b90612ac3565b9691975050612483565b612535915060603d60601161219557612185818361291c565b50508861234d565b7f88226c22000000000000000000000000000000000000000000000000000000005f5260045ffd5b90506020813d602011612597575b816125806020938361291c565b810103126108815761259190612b13565b886122d8565b3d9150612573565b7f8a7dc9ee000000000000000000000000000000000000000000000000000000005f5260045ffd5b6125e0915060a03d60a011610ff857610fe6818361291c565b509250505088612295565b34610881575f3660031901126108815760206001600160a01b0360065416604051908152f35b34610881575f36600319011261088157602060ff600454166040519015158152f35b346108815760603660031901126108815760443567ffffffffffffffff81116108815761266490369060040161295a565b5060206102e6602435600435612b6e565b34610881576020366003190112610881576004355f90805f5260036020526126a060405f20546129ee565b5080545f1981019081116120be576126b791612ae1565b50600381015460ff169290831561279c57505f5b91602460a06001600160a01b03600154166040519283809263564a565d60e01b82528660048301525afa908115611e61575f91612778575b5060058110156127645760041461272f575b506060926040519283521515602083015215156040820152f35b61273890612c1f565b9283516001811461274b575b5092612715565b9250505015611fc2576020015160609060015f84612744565b634e487b7160e01b5f52602160045260245ffd5b612791915060a03d60a011610ff857610fe6818361291c565b505091505085612703565b600101546126cb565b346108815760206102e6610a9a366128fa565b34610881576020366003190112610881576004355f526003602052602060405f2054604051908152f35b34610881576020366003190112610881576004355f52600360205261280a60405f20546129ee565b5080545f198101919082116120be5760209161282591612ae1565b506005810154905414604051908152f35b3461088157602036600319011261088157600435906040816024816001600160a01b036001541663afe15cfb60e01b82528660048301525afa918215611e61575f915f936128d3575b5061288990612c1f565b5115908161289f575b6020826040519015158152f35b6128ae91506121148142612aa3565b9061138882029180830461138814901517156120be5761271060209204111582612892565b6128f2919350612889925060403d6040116121f9576121ea818361291c565b92909161287f565b60a0906003190112610881576004359060243590604435906064359060843590565b90601f8019910116810190811067ffffffffffffffff821117611fd657604052565b67ffffffffffffffff8111611fd657601f01601f191660200190565b81601f82011215610881576020813591016129748261293e565b92612982604051948561291c565b8284528282011161088157815f92602092838601378301015290565b600435906001600160a01b038216820361088157565b6040906003190112610881576004359060243590565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b600254811015611fc25760025f52600f60205f20910201905f90565b90600182811c92168015612a38575b6020831014612a2457565b634e487b7160e01b5f52602260045260245ffd5b91607f1691612a19565b9181601f840112156108815782359167ffffffffffffffff8311610881576020808501948460051b01011161088157565b606090600319011261088157600435906024359060443590565b9190826040910312610881576020825192015190565b919082039182116120be57565b818102929181159184041417156120be57565b8115612acd570490565b634e487b7160e01b5f52601260045260245ffd5b8054821015611fc2575f52601660205f20910201905f90565b51906bffffffffffffffffffffffff8216820361088157565b5190811515820361088157565b908160a091031261088157612b3481612afa565b9160208201516001600160a01b038116810361088157916040810151600581101561088157916080612b6860608401612b13565b92015190565b906040519060208201928352604082015260408152612b8e60608261291c565b51902090565b9081606091031261088157805191612bba6040612bb360208501612b13565b9301612b13565b90565b919082018092116120be57565b805468010000000000000000811015611fd657612bec91600182018155612ae1565b9091565b3d15612c1a573d90612c018261293e565b91612c0f604051938461291c565b82523d5f602084013e565b606090565b5f526003602052612c3360405f20546129ee565b5080545f198101919082116120be57600a91612c4e91612ae1565b5001604051808260208294549384815201905f5260205f20925f5b818110612c7e575050612bba9250038261291c565b8454835260019485019486945060209093019201612c69565b91908260c091031261088157612cac82612afa565b91612cb960208201612b13565b9160408201519160608101519160a0608083015192015190565b8054821015611fc2575f52600d60205f20910201905f90565b9091815f526003602052612d0360405f20546129ee565b5080545f1981019081116120be57612d1a91612ae1565b506001600160a01b03600154166040517f2e1daf2f000000000000000000000000000000000000000000000000000000008152602081600481855afa908115611e61575f91612f8d575b5060a06024926040519384809263564a565d60e01b82528960048301525afa918215611e61576040926bffffffffffffffffffffffff926064925f92612f5f575b506001600160a01b03908551998a9586947fd045e0020000000000000000000000000000000000000000000000000000000086521660048501528960248501526044840152165afa928315611e61575f945f94612f0c575b5083856001600160a01b03811615612f0457505060045460ff1615612efc575f526003602052612e3060405f20546129ee565b5080545f198101919082116120be57600b91612e4b91612ae1565b506001600160a01b0386165f520160205260ff60405f205416155b15612ef65780549068010000000000000000821015611fd657612e91826001600b9401835582612cd3565b5080547fffffffffffffffffffffff0000000000000000000000000000000000000000ff74ffffffffffffffffffffffffffffffffffffffff008860081b1691161790556001600160a01b0385165f520160205260405f20600160ff19825416179055565b505f9250565b506001612e66565b955093505050565b945092506040843d604011612f57575b81612f296040938361291c565b81010312610881578351936001600160a01b0385168503610881576020612f509101612afa565b925f612dfd565b3d9150612f1c565b6001600160a01b03919250612f829060a03d60a011610ff857610fe6818361291c565b505050509190612da5565b90506020813d602011612fca575b81612fa86020938361291c565b810103126108815751906001600160a01b0382168203610881579060a0612d64565b3d9150612f9b565b9061300290825f526003602052612fec60405f20546129ee565b50905f526003810160205260405f205490612ae1565b5060606001600160a01b036001541692602460405180958193631c3db16d60e01b835260048301525afa918215611e61575f905f93613094575b5060048201549283158015613075575b1561305957505050505f90565b1561306357505090565b600292505f520160205260405f205490565b508015801561304c5750815f526002830160205260405f20541561304c565b90506130b091925060603d60601161219557612185818361291c565b5091905f61303c565b916106386130d692845f526003602052612fec60405f20546129ee565b509060606001600160a01b036001541691602460405180948193631c3db16d60e01b835260048301525afa908115611e61575f905f92613150575b5060ff8354169283613131575b5050505f1461312d5761271090565b5f90565b600201541491508115613148575b505f808061311e565b90505f61313f565b905061316b915060603d60601161219557612185818361291c565b50905f613111565b6001600160a01b0316905f925f8284811561326c575b5f92839283928392f1613266576001600160a01b031691823b15610881576040517fd0e30db00000000000000000000000000000000000000000000000000000000081525f8160048186885af18015611e6157613251575b50823b156105cf5790604484928360405195869485937fa9059cbb000000000000000000000000000000000000000000000000000000008552600485015260248401525af1801561324657613234575050565b61323f82809261291c565b6102145750565b6040513d84823e3d90fd5b61325e9194505f9061291c565b5f925f6131e1565b50505050565b6108fc9250613189565b9190811015611fc25760051b0190565b90918281527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83116108815760209260051b80928483013701019056fea2646970667358221220b5aaba208006c2770b2a559bb6595fe7390db7c206ee67f59edf25055757c98c64736f6c634300081e0033",
  "devdoc": {
    "errors": {
      "AlreadyInitialized()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ]
    },
    "events": {
      "ChoiceFunded(uint256,uint256,uint256)": {
        "params": {
          "_choice": "The choice that is being funded.",
          "_coreDisputeID": "The identifier of the dispute in the Arbitrator contract.",
          "_coreRoundID": "The identifier of the round in the Arbitrator contract."
        }
      },
      "CommitCast(uint256,address,uint256[],bytes32)": {
        "params": {
          "_commit": "The commitment of the juror.",
          "_coreDisputeID": "The identifier of the dispute in the Arbitrator contract.",
          "_juror": "The address of the juror casting the vote commitment.",
          "_voteIDs": "The identifiers of the votes in the dispute."
        }
      },
      "Contribution(uint256,uint256,uint256,address,uint256)": {
        "params": {
          "_amount": "The amount contributed.",
          "_choice": "The choice that is being funded.",
          "_contributor": "The address of the contributor.",
          "_coreDisputeID": "The identifier of the dispute in the Arbitrator contract.",
          "_coreRoundID": "The identifier of the round in the Arbitrator contract."
        }
      },
      "DisputeCreation(uint256,uint256,bytes)": {
        "params": {
          "_coreDisputeID": "The identifier of the dispute in the Arbitrator contract.",
          "_extraData": "The extra data for the dispute.",
          "_numberOfChoices": "The number of choices available in the dispute."
        }
      },
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Upgraded(address)": {
        "params": {
          "newImplementation": "Address of the new implementation the proxy is now forwarding calls to."
        }
      },
      "VoteCast(uint256,address,uint256[],uint256,string)": {
        "params": {
          "_choice": "The choice juror voted for.",
          "_coreDisputeID": "The identifier of the dispute in the Arbitrator contract.",
          "_juror": "Address of the juror.",
          "_justification": "Justification of the choice.",
          "_voteIDs": "The identifiers of the votes in the dispute."
        }
      },
      "Withdrawal(uint256,uint256,uint256,address,uint256)": {
        "params": {
          "_amount": "The amount withdrawn.",
          "_choice": "The choice that is being funded.",
          "_contributor": "The address of the contributor.",
          "_coreDisputeID": "The identifier of the dispute in the Arbitrator contract.",
          "_coreRoundID": "The identifier of the round in the Arbitrator contract."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "areCommitsAllCast(uint256)": {
        "params": {
          "_coreDisputeID": "The ID of the dispute in Kleros Core, not in the Dispute Kit."
        },
        "returns": {
          "_0": "Whether all of the jurors have cast their commits for the last round."
        }
      },
      "areVotesAllCast(uint256)": {
        "details": "This function is to be called directly by the core contract and is not for off-chain usage.",
        "params": {
          "_coreDisputeID": "The ID of the dispute in Kleros Core, not in the Dispute Kit."
        },
        "returns": {
          "_0": "Whether all of the jurors have cast their votes for the last round."
        }
      },
      "castCommit(uint256,uint256[],bytes32)": {
        "details": "It can be called multiple times during the commit period, each call overrides the commits of the previous one. `O(n)` where `n` is the number of votes.",
        "params": {
          "_commit": "The commitment hash.",
          "_coreDisputeID": "The ID of the dispute in Kleros Core.",
          "_voteIDs": "The IDs of the votes."
        }
      },
      "castVote(uint256,uint256[],uint256,uint256,string)": {
        "details": "`O(n)` where `n` is the number of votes.",
        "params": {
          "_choice": "The choice.",
          "_coreDisputeID": "The ID of the dispute in Kleros Core.",
          "_justification": "Justification of the choice.",
          "_salt": "The salt for the commit if the votes were hidden.",
          "_voteIDs": "The IDs of the votes."
        }
      },
      "changeCore(address)": {
        "params": {
          "_core": "The new value for the `core` storage variable."
        }
      },
      "changeJumpDisputeKitID(uint256)": {
        "params": {
          "_jumpDisputeKitID": "The new value for the `jumpDisputeKitID` storage variable."
        }
      },
      "changeOwner(address)": {
        "params": {
          "_owner": "The new value for the `owner` storage variable."
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "createDispute(uint256,uint256,bytes,uint256)": {
        "details": "Access restricted to Kleros Core only.",
        "params": {
          "_coreDisputeID": "The ID of the dispute in Kleros Core, not in the Dispute Kit.",
          "_extraData": "Additional info about the dispute, for possible use in future dispute kits.",
          "_nbVotes": "Maximal number of votes this dispute can get. Added for future-proofing.",
          "_numberOfChoices": "Number of choices of the dispute"
        }
      },
      "currentRuling(uint256)": {
        "params": {
          "_coreDisputeID": "The ID of the dispute in Kleros Core, not in the Dispute Kit."
        },
        "returns": {
          "overridden": "Whether the ruling was overridden by appeal funding or not.",
          "ruling": "The current ruling.",
          "tied": "Whether it's a tie or not."
        }
      },
      "draw(uint256,uint256)": {
        "details": "Access restricted to Kleros Core only.",
        "params": {
          "_coreDisputeID": "The ID of the dispute in Kleros Core, not in the Dispute Kit.",
          "_nonce": "Nonce."
        },
        "returns": {
          "drawnAddress": "The drawn address."
        }
      },
      "earlyCourtJump(uint256)": {
        "details": "Returns true if the dispute is jumping to a parent court.",
        "params": {
          "_coreDisputeID": "The ID of the dispute in Kleros Core, not in the Dispute Kit."
        },
        "returns": {
          "_0": "Whether the dispute is jumping to a parent court or not."
        }
      },
      "executeOwnerProposal(address,uint256,bytes)": {
        "params": {
          "_amount": "The value sent with the call.",
          "_data": "The data sent with the call.",
          "_destination": "The destination of the call."
        }
      },
      "fundAppeal(uint256,uint256)": {
        "params": {
          "_choice": "A choice that receives funding.",
          "_coreDisputeID": "Index of the dispute in Kleros Core."
        }
      },
      "getCoherentCount(uint256,uint256)": {
        "params": {
          "_coreDisputeID": "The ID of the dispute in Kleros Core, not in the Dispute Kit.",
          "_coreRoundID": "The ID of the round in Kleros Core, not in the Dispute Kit."
        },
        "returns": {
          "_0": "The number of coherent jurors."
        }
      },
      "getDegreeOfCoherencePenalty(uint256,uint256,uint256,uint256,uint256)": {
        "details": "This function is called by Kleros Core in order to determine the amount of the penalty.",
        "params": {
          "_coreDisputeID": "The ID of the dispute in Kleros Core, not in the Dispute Kit.",
          "_coreRoundID": "The ID of the round in Kleros Core, not in the Dispute Kit.",
          "_feePerJuror": "The fee per juror.",
          "_pnkAtStakePerJuror": "The PNK at stake per juror.",
          "_voteID": "The ID of the vote."
        },
        "returns": {
          "pnkCoherence": "The degree of coherence in basis points for the dispute PNK reward."
        }
      },
      "getDegreeOfCoherenceReward(uint256,uint256,uint256,uint256,uint256)": {
        "details": "This function is called by Kleros Core in order to determine the amount of the reward.",
        "params": {
          "_coreDisputeID": "The ID of the dispute in Kleros Core, not in the Dispute Kit.",
          "_coreRoundID": "The ID of the round in Kleros Core, not in the Dispute Kit.",
          "_feePerJuror": "The fee per juror.",
          "_pnkAtStakePerJuror": "The PNK at stake per juror.",
          "_voteID": "The ID of the vote."
        },
        "returns": {
          "feeCoherence": "The degree of coherence in basis points for the dispute fee reward.",
          "pnkCoherence": "The degree of coherence in basis points for the dispute PNK reward."
        }
      },
      "getFundedChoices(uint256)": {
        "params": {
          "_coreDisputeID": "The ID of the dispute in Kleros Core."
        },
        "returns": {
          "fundedChoices": "Fully funded rulings."
        }
      },
      "getJumpDisputeKitID()": {
        "returns": {
          "_0": "The ID of the dispute kit in Kleros Core disputeKits array."
        }
      },
      "getLocalDisputeRoundID(uint256,uint256)": {
        "params": {
          "_coreDisputeID": "The ID of the dispute in Kleros Core.",
          "_coreRoundID": "The ID of the round in Kleros Core."
        },
        "returns": {
          "localDisputeID": "The ID of the dispute in the Dispute Kit.",
          "localRoundID": "The ID of the round in the Dispute Kit."
        }
      },
      "getNbVotesAfterAppeal(address,uint256)": {
        "params": {
          "_currentNbVotes": "The number of votes before the appeal.",
          "_previousDisputeKit": "The previous Dispute Kit."
        },
        "returns": {
          "_0": "The number of votes after the appeal."
        }
      },
      "getNumberOfRounds(uint256)": {
        "params": {
          "_localDisputeID": "The ID of the dispute in the Dispute Kit."
        },
        "returns": {
          "_0": "The number of rounds in the dispute."
        }
      },
      "getRoundInfo(uint256,uint256,uint256)": {
        "params": {
          "_choice": "The choice to query.",
          "_coreDisputeID": "The ID of the dispute in Kleros Core, not in the Dispute Kit.",
          "_coreRoundID": "The ID of the round in Kleros Core, not in the Dispute Kit."
        },
        "returns": {
          "choiceCount": "Number of votes cast for the queried choice.",
          "nbVoters": "Total number of voters in this round.",
          "tied": "Whether it's a tie or not.",
          "totalCommitted": "Number of jurors who cast the commit already (only relevant for hidden votes).",
          "totalVoted": "Number of jurors who cast the vote already.",
          "winningChoice": "The winning choice of this round."
        }
      },
      "getVoteInfo(uint256,uint256,uint256)": {
        "params": {
          "_coreDisputeID": "The ID of the dispute in Kleros Core.",
          "_coreRoundID": "The ID of the round in Kleros Core.",
          "_voteID": "The ID of the vote."
        },
        "returns": {
          "account": "The address of the juror who cast the vote.",
          "choice": "The choice that got the vote.",
          "commit": "The commit of the vote.",
          "voted": "Whether the vote was cast or not."
        }
      },
      "hashVote(uint256,uint256,string)": {
        "details": "The unused parameters may be used by overriding contracts.",
        "params": {
          "_choice": "The choice being voted for",
          "_salt": "A random salt for commitment"
        },
        "returns": {
          "_0": "bytes32 The hash of the encoded vote parameters"
        }
      },
      "initialize(address,address,address,uint256)": {
        "params": {
          "_core": "The KlerosCore arbitrator.",
          "_jumpDisputeKitID": "The ID of the dispute kit to switch to after the court jump.",
          "_owner": "The owner's address.",
          "_wNative": "The wrapped native token address, typically wETH."
        }
      },
      "isAppealFunded(uint256)": {
        "details": "This function is to be called directly by the core contract and is not for off-chain usage.",
        "params": {
          "_coreDisputeID": "The ID of the dispute in Kleros Core, not in the Dispute Kit."
        },
        "returns": {
          "_0": "Whether the appeal funding is finished."
        }
      },
      "isVoteActive(uint256,uint256,uint256)": {
        "params": {
          "_coreDisputeID": "The ID of the dispute in Kleros Core, not in the Dispute Kit.",
          "_coreRoundID": "The ID of the round in Kleros Core, not in the Dispute Kit.",
          "_voteID": "The ID of the voter."
        },
        "returns": {
          "_0": "Whether the voter was active or not."
        }
      },
      "proxiableUUID()": {
        "details": "IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the if statement."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Reverts if the execution is not performed via delegatecall or the execution context is not of a proxy with an ERC1967-compliant implementation pointing to self.",
        "params": {
          "data": "Data used in a delegate call to `newImplementation` if non-empty. This will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity constructor.",
          "newImplementation": "Address of the new implementation contract."
        }
      },
      "withdrawFeesAndRewards(uint256,address,uint256,uint256)": {
        "details": "Withdrawals are not possible if the core contract is paused.",
        "params": {
          "_beneficiary": "The address whose rewards to withdraw.",
          "_choice": "The ruling option that the caller wants to withdraw from.",
          "_coreDisputeID": "Index of the dispute in Kleros Core contract.",
          "_coreRoundID": "The round in the Kleros Core contract the caller wants to withdraw from."
        },
        "returns": {
          "amount": "The withdrawn amount."
        }
      }
    },
    "stateVariables": {
      "version": {
        "return": "Version string.",
        "returns": {
          "_0": "Version string."
        }
      }
    },
    "title": "DisputeKitClassic",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "FailedDelegateCall()": [
        {
          "notice": "Failed Delegated call"
        }
      ],
      "InvalidImplementation(address)": [
        {
          "notice": "The `implementation` is not UUPS-compliant"
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "notice": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "notice": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "ChoiceFunded(uint256,uint256,uint256)": {
        "notice": "To be emitted when a choice is fully funded for an appeal."
      },
      "CommitCast(uint256,address,uint256[],bytes32)": {
        "notice": "To be emitted when a vote commitment is cast."
      },
      "Contribution(uint256,uint256,uint256,address,uint256)": {
        "notice": "To be emitted when a funding contribution is made."
      },
      "DisputeCreation(uint256,uint256,bytes)": {
        "notice": "To be emitted when a dispute is created."
      },
      "Upgraded(address)": {
        "notice": "Emitted when the `implementation` has been successfully upgraded."
      },
      "VoteCast(uint256,address,uint256[],uint256,string)": {
        "notice": "Emitted when casting a vote to provide the justification of juror's choice."
      },
      "Withdrawal(uint256,uint256,uint256,address,uint256)": {
        "notice": "To be emitted when the contributed funds are withdrawn."
      }
    },
    "kind": "user",
    "methods": {
      "areCommitsAllCast(uint256)": {
        "notice": "Returns true if all of the jurors have cast their commits for the last round."
      },
      "areVotesAllCast(uint256)": {
        "notice": "Returns true if all of the jurors have cast their votes for the last round."
      },
      "castCommit(uint256,uint256[],bytes32)": {
        "notice": "Sets the caller's commit for the specified votes."
      },
      "castVote(uint256,uint256[],uint256,uint256,string)": {
        "notice": "Sets the caller's choices for the specified votes."
      },
      "changeCore(address)": {
        "notice": "Changes the `core` storage variable."
      },
      "changeJumpDisputeKitID(uint256)": {
        "notice": "Changes the dispute kit ID used for the jump."
      },
      "changeOwner(address)": {
        "notice": "Changes the `owner` storage variable."
      },
      "createDispute(uint256,uint256,bytes,uint256)": {
        "notice": "Creates a local dispute and maps it to the dispute ID in the Core contract."
      },
      "currentRuling(uint256)": {
        "notice": "Gets the current ruling of a specified dispute."
      },
      "draw(uint256,uint256)": {
        "notice": "Draws the juror from the sortition tree. The drawn address is picked up by Kleros Core."
      },
      "executeOwnerProposal(address,uint256,bytes)": {
        "notice": "Allows the owner to call anything on behalf of the contract."
      },
      "fundAppeal(uint256,uint256)": {
        "notice": "Manages contributions, and appeals a dispute if at least two choices are fully funded. Note that the surplus deposit will be reimbursed."
      },
      "getCoherentCount(uint256,uint256)": {
        "notice": "Gets the number of jurors who are eligible to a reward in this round."
      },
      "getDegreeOfCoherencePenalty(uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Gets the degree of coherence of a particular voter."
      },
      "getDegreeOfCoherenceReward(uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Gets the degree of coherence of a particular voter."
      },
      "getFundedChoices(uint256)": {
        "notice": "Returns the rulings that were fully funded in the latest appeal round."
      },
      "getJumpDisputeKitID()": {
        "notice": "Returns the dispute kit ID to be used after court jump by Kleros Core."
      },
      "getLocalDisputeRoundID(uint256,uint256)": {
        "notice": "Returns the local dispute ID and round ID for a given core dispute ID and core round ID."
      },
      "getNbVotesAfterAppeal(address,uint256)": {
        "notice": "Returns the number of votes after the appeal."
      },
      "getNumberOfRounds(uint256)": {
        "notice": "Returns the number of rounds in a dispute."
      },
      "getRoundInfo(uint256,uint256,uint256)": {
        "notice": "Returns the info of the specified round in the core contract."
      },
      "getVoteInfo(uint256,uint256,uint256)": {
        "notice": "Returns the vote information for a given vote ID."
      },
      "hashVote(uint256,uint256,string)": {
        "notice": "Computes the hash of a vote using ABI encoding"
      },
      "initialize(address,address,address,uint256)": {
        "notice": "Initializer."
      },
      "isAppealFunded(uint256)": {
        "notice": "Returns true if the appeal funding is finished prematurely (e.g. when losing side didn't fund)."
      },
      "isVoteActive(uint256,uint256,uint256)": {
        "notice": "Returns true if the specified voter was active in this round."
      },
      "proxiableUUID()": {
        "notice": "Implementation of the ERC1822 `proxiableUUID` function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade."
      },
      "upgradeToAndCall(address,bytes)": {
        "notice": "Upgrade mechanism including access control and UUPS-compliance."
      },
      "version()": {
        "notice": "Returns the version of the implementation."
      },
      "withdrawFeesAndRewards(uint256,address,uint256,uint256)": {
        "notice": "Allows those contributors who attempted to fund an appeal round to withdraw any reimbursable fees or rewards after the dispute gets resolved."
      }
    },
    "notice": "Dispute kit implementation of the Kleros v1 features including: - a drawing system: proportional to staked PNK, - a vote aggregation system: plurality, - an incentive system: equal split between coherent votes, - an appeal system: fund 2 choices only, vote on any choice.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 21251,
        "contract": "src/arbitration/dispute-kits/DisputeKitClassic.sol:DisputeKitClassic",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 21254,
        "contract": "src/arbitration/dispute-kits/DisputeKitClassic.sol:DisputeKitClassic",
        "label": "core",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(KlerosCore)15195"
      },
      {
        "astId": 21258,
        "contract": "src/arbitration/dispute-kits/DisputeKitClassic.sol:DisputeKitClassic",
        "label": "disputes",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(Dispute)21183_storage)dyn_storage"
      },
      {
        "astId": 21262,
        "contract": "src/arbitration/dispute-kits/DisputeKitClassic.sol:DisputeKitClassic",
        "label": "coreDisputeIDToLocal",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 21264,
        "contract": "src/arbitration/dispute-kits/DisputeKitClassic.sol:DisputeKitClassic",
        "label": "singleDrawPerJuror",
        "offset": 0,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 21268,
        "contract": "src/arbitration/dispute-kits/DisputeKitClassic.sol:DisputeKitClassic",
        "label": "coreDisputeIDToActive",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 21270,
        "contract": "src/arbitration/dispute-kits/DisputeKitClassic.sol:DisputeKitClassic",
        "label": "wNative",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 21272,
        "contract": "src/arbitration/dispute-kits/DisputeKitClassic.sol:DisputeKitClassic",
        "label": "jumpDisputeKitID",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 21276,
        "contract": "src/arbitration/dispute-kits/DisputeKitClassic.sol:DisputeKitClassic",
        "label": "__gap",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Dispute)21183_storage)dyn_storage": {
        "base": "t_struct(Dispute)21183_storage",
        "encoding": "dynamic_array",
        "label": "struct DisputeKitClassicBase.Dispute[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Round)21227_storage)dyn_storage": {
        "base": "t_struct(Round)21227_storage",
        "encoding": "dynamic_array",
        "label": "struct DisputeKitClassicBase.Round[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Vote)21240_storage)dyn_storage": {
        "base": "t_struct(Vote)21240_storage",
        "encoding": "dynamic_array",
        "label": "struct DisputeKitClassicBase.Vote[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)10_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[10]",
        "numberOfBytes": "320"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(KlerosCore)15195": {
        "encoding": "inplace",
        "label": "contract KlerosCore",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Dispute)21183_storage": {
        "encoding": "inplace",
        "label": "struct DisputeKitClassicBase.Dispute",
        "members": [
          {
            "astId": 21168,
            "contract": "src/arbitration/dispute-kits/DisputeKitClassic.sol:DisputeKitClassic",
            "label": "rounds",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(Round)21227_storage)dyn_storage"
          },
          {
            "astId": 21170,
            "contract": "src/arbitration/dispute-kits/DisputeKitClassic.sol:DisputeKitClassic",
            "label": "numberOfChoices",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 21172,
            "contract": "src/arbitration/dispute-kits/DisputeKitClassic.sol:DisputeKitClassic",
            "label": "jumped",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 21176,
            "contract": "src/arbitration/dispute-kits/DisputeKitClassic.sol:DisputeKitClassic",
            "label": "coreRoundIDToLocal",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 21178,
            "contract": "src/arbitration/dispute-kits/DisputeKitClassic.sol:DisputeKitClassic",
            "label": "extraData",
            "offset": 0,
            "slot": "4",
            "type": "t_bytes_storage"
          },
          {
            "astId": 21182,
            "contract": "src/arbitration/dispute-kits/DisputeKitClassic.sol:DisputeKitClassic",
            "label": "__gap",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)10_storage"
          }
        ],
        "numberOfBytes": "480"
      },
      "t_struct(Round)21227_storage": {
        "encoding": "inplace",
        "label": "struct DisputeKitClassicBase.Round",
        "members": [
          {
            "astId": 21187,
            "contract": "src/arbitration/dispute-kits/DisputeKitClassic.sol:DisputeKitClassic",
            "label": "votes",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(Vote)21240_storage)dyn_storage"
          },
          {
            "astId": 21189,
            "contract": "src/arbitration/dispute-kits/DisputeKitClassic.sol:DisputeKitClassic",
            "label": "winningChoice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 21193,
            "contract": "src/arbitration/dispute-kits/DisputeKitClassic.sol:DisputeKitClassic",
            "label": "counts",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 21195,
            "contract": "src/arbitration/dispute-kits/DisputeKitClassic.sol:DisputeKitClassic",
            "label": "tied",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 21197,
            "contract": "src/arbitration/dispute-kits/DisputeKitClassic.sol:DisputeKitClassic",
            "label": "totalVoted",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 21199,
            "contract": "src/arbitration/dispute-kits/DisputeKitClassic.sol:DisputeKitClassic",
            "label": "totalCommitted",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 21203,
            "contract": "src/arbitration/dispute-kits/DisputeKitClassic.sol:DisputeKitClassic",
            "label": "paidFees",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 21207,
            "contract": "src/arbitration/dispute-kits/DisputeKitClassic.sol:DisputeKitClassic",
            "label": "hasPaid",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_uint256,t_bool)"
          },
          {
            "astId": 21213,
            "contract": "src/arbitration/dispute-kits/DisputeKitClassic.sol:DisputeKitClassic",
            "label": "contributions",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
          },
          {
            "astId": 21215,
            "contract": "src/arbitration/dispute-kits/DisputeKitClassic.sol:DisputeKitClassic",
            "label": "feeRewards",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 21218,
            "contract": "src/arbitration/dispute-kits/DisputeKitClassic.sol:DisputeKitClassic",
            "label": "fundedChoices",
            "offset": 0,
            "slot": "10",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 21222,
            "contract": "src/arbitration/dispute-kits/DisputeKitClassic.sol:DisputeKitClassic",
            "label": "alreadyDrawn",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 21226,
            "contract": "src/arbitration/dispute-kits/DisputeKitClassic.sol:DisputeKitClassic",
            "label": "__gap",
            "offset": 0,
            "slot": "12",
            "type": "t_array(t_uint256)10_storage"
          }
        ],
        "numberOfBytes": "704"
      },
      "t_struct(Vote)21240_storage": {
        "encoding": "inplace",
        "label": "struct DisputeKitClassicBase.Vote",
        "members": [
          {
            "astId": 21229,
            "contract": "src/arbitration/dispute-kits/DisputeKitClassic.sol:DisputeKitClassic",
            "label": "voted",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 21231,
            "contract": "src/arbitration/dispute-kits/DisputeKitClassic.sol:DisputeKitClassic",
            "label": "account",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 21233,
            "contract": "src/arbitration/dispute-kits/DisputeKitClassic.sol:DisputeKitClassic",
            "label": "commit",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 21235,
            "contract": "src/arbitration/dispute-kits/DisputeKitClassic.sol:DisputeKitClassic",
            "label": "choice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 21239,
            "contract": "src/arbitration/dispute-kits/DisputeKitClassic.sol:DisputeKitClassic",
            "label": "__gap",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)10_storage"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
